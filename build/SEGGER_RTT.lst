ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"SEGGER_RTT.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._GetAvailWriteSpace,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_GetAvailWriteSpace:
  26              	.LVL0:
  27              	.LFB4:
  28              		.file 1 "RTT/SEGGER_RTT.c"
   1:RTT/SEGGER_RTT.c **** /*********************************************************************
   2:RTT/SEGGER_RTT.c **** *                    SEGGER Microcontroller GmbH                     *
   3:RTT/SEGGER_RTT.c **** *                        The Embedded Experts                        *
   4:RTT/SEGGER_RTT.c **** **********************************************************************
   5:RTT/SEGGER_RTT.c **** *                                                                    *
   6:RTT/SEGGER_RTT.c **** *            (c) 1995 - 2018 SEGGER Microcontroller GmbH             *
   7:RTT/SEGGER_RTT.c **** *                                                                    *
   8:RTT/SEGGER_RTT.c **** *       www.segger.com     Support: support@segger.com               *
   9:RTT/SEGGER_RTT.c **** *                                                                    *
  10:RTT/SEGGER_RTT.c **** **********************************************************************
  11:RTT/SEGGER_RTT.c **** *                                                                    *
  12:RTT/SEGGER_RTT.c **** *       SEGGER RTT * Real Time Transfer for embedded targets         *
  13:RTT/SEGGER_RTT.c **** *                                                                    *
  14:RTT/SEGGER_RTT.c **** **********************************************************************
  15:RTT/SEGGER_RTT.c **** *                                                                    *
  16:RTT/SEGGER_RTT.c **** * All rights reserved.                                               *
  17:RTT/SEGGER_RTT.c **** *                                                                    *
  18:RTT/SEGGER_RTT.c **** * SEGGER strongly recommends to not make any changes                 *
  19:RTT/SEGGER_RTT.c **** * to or modify the source code of this software in order to stay     *
  20:RTT/SEGGER_RTT.c **** * compatible with the RTT protocol and J-Link.                       *
  21:RTT/SEGGER_RTT.c **** *                                                                    *
  22:RTT/SEGGER_RTT.c **** * Redistribution and use in source and binary forms, with or         *
  23:RTT/SEGGER_RTT.c **** * without modification, are permitted provided that the following    *
  24:RTT/SEGGER_RTT.c **** * conditions are met:                                                *
  25:RTT/SEGGER_RTT.c **** *                                                                    *
  26:RTT/SEGGER_RTT.c **** * o Redistributions of source code must retain the above copyright   *
  27:RTT/SEGGER_RTT.c **** *   notice, this list of conditions and the following disclaimer.    *
  28:RTT/SEGGER_RTT.c **** *                                                                    *
  29:RTT/SEGGER_RTT.c **** * o Redistributions in binary form must reproduce the above          *
  30:RTT/SEGGER_RTT.c **** *   copyright notice, this list of conditions and the following      *
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 2


  31:RTT/SEGGER_RTT.c **** *   disclaimer in the documentation and/or other materials provided  *
  32:RTT/SEGGER_RTT.c **** *   with the distribution.                                           *
  33:RTT/SEGGER_RTT.c **** *                                                                    *
  34:RTT/SEGGER_RTT.c **** * o Neither the name of SEGGER Microcontroller GmbH         *
  35:RTT/SEGGER_RTT.c **** *   nor the names of its contributors may be used to endorse or      *
  36:RTT/SEGGER_RTT.c **** *   promote products derived from this software without specific     *
  37:RTT/SEGGER_RTT.c **** *   prior written permission.                                        *
  38:RTT/SEGGER_RTT.c **** *                                                                    *
  39:RTT/SEGGER_RTT.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND             *
  40:RTT/SEGGER_RTT.c **** * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,        *
  41:RTT/SEGGER_RTT.c **** * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF           *
  42:RTT/SEGGER_RTT.c **** * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE           *
  43:RTT/SEGGER_RTT.c **** * DISCLAIMED. IN NO EVENT SHALL SEGGER Microcontroller BE LIABLE FOR *
  44:RTT/SEGGER_RTT.c **** * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           *
  45:RTT/SEGGER_RTT.c **** * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT  *
  46:RTT/SEGGER_RTT.c **** * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;    *
  47:RTT/SEGGER_RTT.c **** * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF      *
  48:RTT/SEGGER_RTT.c **** * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT          *
  49:RTT/SEGGER_RTT.c **** * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE  *
  50:RTT/SEGGER_RTT.c **** * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH   *
  51:RTT/SEGGER_RTT.c **** * DAMAGE.                                                            *
  52:RTT/SEGGER_RTT.c **** *                                                                    *
  53:RTT/SEGGER_RTT.c **** **********************************************************************
  54:RTT/SEGGER_RTT.c **** *                                                                    *
  55:RTT/SEGGER_RTT.c **** *       RTT version: 6.34                                           *
  56:RTT/SEGGER_RTT.c **** *                                                                    *
  57:RTT/SEGGER_RTT.c **** **********************************************************************
  58:RTT/SEGGER_RTT.c **** ---------------------------END-OF-HEADER------------------------------
  59:RTT/SEGGER_RTT.c **** File    : SEGGER_RTT.c
  60:RTT/SEGGER_RTT.c **** Purpose : Implementation of SEGGER real-time transfer (RTT) which
  61:RTT/SEGGER_RTT.c ****           allows real-time communication on targets which support
  62:RTT/SEGGER_RTT.c ****           debugger memory accesses while the CPU is running.
  63:RTT/SEGGER_RTT.c **** Revision: $Rev: 10887 $
  64:RTT/SEGGER_RTT.c **** 
  65:RTT/SEGGER_RTT.c **** Additional information:
  66:RTT/SEGGER_RTT.c ****           Type "int" is assumed to be 32-bits in size
  67:RTT/SEGGER_RTT.c ****           H->T    Host to target communication
  68:RTT/SEGGER_RTT.c ****           T->H    Target to host communication
  69:RTT/SEGGER_RTT.c **** 
  70:RTT/SEGGER_RTT.c ****           RTT channel 0 is always present and reserved for Terminal usage.
  71:RTT/SEGGER_RTT.c ****           Name is fixed to "Terminal"
  72:RTT/SEGGER_RTT.c **** 
  73:RTT/SEGGER_RTT.c ****           Effective buffer size: SizeOfBuffer - 1
  74:RTT/SEGGER_RTT.c **** 
  75:RTT/SEGGER_RTT.c ****           WrOff == RdOff:       Buffer is empty
  76:RTT/SEGGER_RTT.c ****           WrOff == (RdOff - 1): Buffer is full
  77:RTT/SEGGER_RTT.c ****           WrOff >  RdOff:       Free space includes wrap-around
  78:RTT/SEGGER_RTT.c ****           WrOff <  RdOff:       Used space includes wrap-around
  79:RTT/SEGGER_RTT.c ****           (WrOff == (SizeOfBuffer - 1)) && (RdOff == 0):  
  80:RTT/SEGGER_RTT.c ****                                 Buffer full and wrap-around after next byte
  81:RTT/SEGGER_RTT.c **** 
  82:RTT/SEGGER_RTT.c **** 
  83:RTT/SEGGER_RTT.c **** ----------------------------------------------------------------------
  84:RTT/SEGGER_RTT.c **** */
  85:RTT/SEGGER_RTT.c **** 
  86:RTT/SEGGER_RTT.c **** #include "SEGGER_RTT.h"
  87:RTT/SEGGER_RTT.c **** 
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 3


  88:RTT/SEGGER_RTT.c **** #include <string.h>                 // for memcpy
  89:RTT/SEGGER_RTT.c **** 
  90:RTT/SEGGER_RTT.c **** /*********************************************************************
  91:RTT/SEGGER_RTT.c **** *
  92:RTT/SEGGER_RTT.c **** *       Configuration, default values
  93:RTT/SEGGER_RTT.c **** *
  94:RTT/SEGGER_RTT.c **** **********************************************************************
  95:RTT/SEGGER_RTT.c **** */
  96:RTT/SEGGER_RTT.c **** 
  97:RTT/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_UP
  98:RTT/SEGGER_RTT.c ****   #define BUFFER_SIZE_UP                                  1024  // Size of the buffer for terminal 
  99:RTT/SEGGER_RTT.c **** #endif
 100:RTT/SEGGER_RTT.c **** 
 101:RTT/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_DOWN
 102:RTT/SEGGER_RTT.c ****   #define BUFFER_SIZE_DOWN                                16    // Size of the buffer for terminal 
 103:RTT/SEGGER_RTT.c **** #endif
 104:RTT/SEGGER_RTT.c **** 
 105:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_UP_BUFFERS
 106:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_UP_BUFFERS                    2    // Number of up-buffers (T->H) avai
 107:RTT/SEGGER_RTT.c **** #endif
 108:RTT/SEGGER_RTT.c **** 
 109:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_DOWN_BUFFERS
 110:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_DOWN_BUFFERS                  2    // Number of down-buffers (H->T) av
 111:RTT/SEGGER_RTT.c **** #endif
 112:RTT/SEGGER_RTT.c **** 
 113:RTT/SEGGER_RTT.c **** #ifndef SEGGER_RTT_BUFFER_SECTION
 114:RTT/SEGGER_RTT.c ****   #if defined(SEGGER_RTT_SECTION)
 115:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_BUFFER_SECTION SEGGER_RTT_SECTION
 116:RTT/SEGGER_RTT.c ****   #endif
 117:RTT/SEGGER_RTT.c **** #endif
 118:RTT/SEGGER_RTT.c **** 
 119:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_ALIGNMENT
 120:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGNMENT                            0
 121:RTT/SEGGER_RTT.c **** #endif
 122:RTT/SEGGER_RTT.c **** 
 123:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_BUFFER_ALIGNMENT
 124:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGNMENT                     0
 125:RTT/SEGGER_RTT.c **** #endif
 126:RTT/SEGGER_RTT.c **** 
 127:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MODE_DEFAULT
 128:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MODE_DEFAULT                         SEGGER_RTT_MODE_NO_BLOCK_SKIP
 129:RTT/SEGGER_RTT.c **** #endif
 130:RTT/SEGGER_RTT.c **** 
 131:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_LOCK
 132:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_LOCK()
 133:RTT/SEGGER_RTT.c **** #endif
 134:RTT/SEGGER_RTT.c **** 
 135:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_UNLOCK
 136:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_UNLOCK()
 137:RTT/SEGGER_RTT.c **** #endif
 138:RTT/SEGGER_RTT.c **** 
 139:RTT/SEGGER_RTT.c **** #ifndef   STRLEN
 140:RTT/SEGGER_RTT.c ****   #define STRLEN(a)                                       strlen((a))
 141:RTT/SEGGER_RTT.c **** #endif
 142:RTT/SEGGER_RTT.c **** 
 143:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY_USE_BYTELOOP
 144:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MEMCPY_USE_BYTELOOP                  0
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 4


 145:RTT/SEGGER_RTT.c **** #endif
 146:RTT/SEGGER_RTT.c **** 
 147:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY
 148:RTT/SEGGER_RTT.c ****   #ifdef  MEMCPY
 149:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      MEMCPY((pDest), (pSrc), (NumBytes))
 150:RTT/SEGGER_RTT.c ****   #else
 151:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      memcpy((pDest), (pSrc), (NumBytes))
 152:RTT/SEGGER_RTT.c ****   #endif
 153:RTT/SEGGER_RTT.c **** #endif
 154:RTT/SEGGER_RTT.c **** 
 155:RTT/SEGGER_RTT.c **** #ifndef   MIN
 156:RTT/SEGGER_RTT.c ****   #define MIN(a, b)         (((a) < (b)) ? (a) : (b))
 157:RTT/SEGGER_RTT.c **** #endif
 158:RTT/SEGGER_RTT.c **** 
 159:RTT/SEGGER_RTT.c **** #ifndef   MAX
 160:RTT/SEGGER_RTT.c ****   #define MAX(a, b)         (((a) > (b)) ? (a) : (b))
 161:RTT/SEGGER_RTT.c **** #endif
 162:RTT/SEGGER_RTT.c **** //
 163:RTT/SEGGER_RTT.c **** // For some environments, NULL may not be defined until certain headers are included
 164:RTT/SEGGER_RTT.c **** //
 165:RTT/SEGGER_RTT.c **** #ifndef NULL
 166:RTT/SEGGER_RTT.c ****   #define NULL 0
 167:RTT/SEGGER_RTT.c **** #endif
 168:RTT/SEGGER_RTT.c **** 
 169:RTT/SEGGER_RTT.c **** /*********************************************************************
 170:RTT/SEGGER_RTT.c **** *
 171:RTT/SEGGER_RTT.c **** *       Defines, fixed
 172:RTT/SEGGER_RTT.c **** *
 173:RTT/SEGGER_RTT.c **** **********************************************************************
 174:RTT/SEGGER_RTT.c **** */
 175:RTT/SEGGER_RTT.c **** #if (defined __ICCARM__) || (defined __ICCRX__)
 176:RTT/SEGGER_RTT.c ****   #define RTT_PRAGMA(P) _Pragma(#P)
 177:RTT/SEGGER_RTT.c **** #endif
 178:RTT/SEGGER_RTT.c **** 
 179:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT || SEGGER_RTT_BUFFER_ALIGNMENT
 180:RTT/SEGGER_RTT.c ****   #if (defined __GNUC__)
 181:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 182:RTT/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 183:RTT/SEGGER_RTT.c ****     #define PRAGMA(A) _Pragma(#A)
 184:RTT/SEGGER_RTT.c **** #define SEGGER_RTT_ALIGN(Var, Alignment) RTT_PRAGMA(data_alignment=Alignment) \
 185:RTT/SEGGER_RTT.c ****                                   Var
 186:RTT/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 187:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 188:RTT/SEGGER_RTT.c ****   #else
 189:RTT/SEGGER_RTT.c ****     #error "Alignment not supported for this compiler."
 190:RTT/SEGGER_RTT.c ****   #endif
 191:RTT/SEGGER_RTT.c **** #else
 192:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGN(Var, Alignment) Var
 193:RTT/SEGGER_RTT.c **** #endif
 194:RTT/SEGGER_RTT.c **** 
 195:RTT/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION) || defined (SEGGER_RTT_BUFFER_SECTION)
 196:RTT/SEGGER_RTT.c ****   #if (defined __GNUC__)
 197:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section))) Var
 198:RTT/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 199:RTT/SEGGER_RTT.c **** #define SEGGER_RTT_PUT_SECTION(Var, Section) RTT_PRAGMA(location=Section) \
 200:RTT/SEGGER_RTT.c ****                                         Var
 201:RTT/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 5


 202:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section), zero_init))  Va
 203:RTT/SEGGER_RTT.c ****   #else
 204:RTT/SEGGER_RTT.c ****     #error "Section placement not supported for this compiler."
 205:RTT/SEGGER_RTT.c ****   #endif
 206:RTT/SEGGER_RTT.c **** #else
 207:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_SECTION(Var, Section) Var
 208:RTT/SEGGER_RTT.c **** #endif
 209:RTT/SEGGER_RTT.c **** 
 210:RTT/SEGGER_RTT.c **** 
 211:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT
 212:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_ALIGNMENT)
 213:RTT/SEGGER_RTT.c **** #else
 214:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  Var
 215:RTT/SEGGER_RTT.c **** #endif
 216:RTT/SEGGER_RTT.c **** 
 217:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_BUFFER_ALIGNMENT
 218:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_BUFFER_ALIGNMENT)
 219:RTT/SEGGER_RTT.c **** #else
 220:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  Var
 221:RTT/SEGGER_RTT.c **** #endif
 222:RTT/SEGGER_RTT.c **** 
 223:RTT/SEGGER_RTT.c **** 
 224:RTT/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION)
 225:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_SECTION)
 226:RTT/SEGGER_RTT.c **** #else
 227:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) Var
 228:RTT/SEGGER_RTT.c **** #endif
 229:RTT/SEGGER_RTT.c **** 
 230:RTT/SEGGER_RTT.c **** #if defined(SEGGER_RTT_BUFFER_SECTION)
 231:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_BUFFER_SECTION)
 232:RTT/SEGGER_RTT.c **** #else
 233:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) Var
 234:RTT/SEGGER_RTT.c **** #endif
 235:RTT/SEGGER_RTT.c **** 
 236:RTT/SEGGER_RTT.c **** /*********************************************************************
 237:RTT/SEGGER_RTT.c **** *
 238:RTT/SEGGER_RTT.c **** *       Static const data
 239:RTT/SEGGER_RTT.c **** *
 240:RTT/SEGGER_RTT.c **** **********************************************************************
 241:RTT/SEGGER_RTT.c **** */
 242:RTT/SEGGER_RTT.c **** 
 243:RTT/SEGGER_RTT.c **** static unsigned char _aTerminalId[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B
 244:RTT/SEGGER_RTT.c **** 
 245:RTT/SEGGER_RTT.c **** /*********************************************************************
 246:RTT/SEGGER_RTT.c **** *
 247:RTT/SEGGER_RTT.c **** *       Static data
 248:RTT/SEGGER_RTT.c **** *
 249:RTT/SEGGER_RTT.c **** **********************************************************************
 250:RTT/SEGGER_RTT.c **** */
 251:RTT/SEGGER_RTT.c **** //
 252:RTT/SEGGER_RTT.c **** // RTT Control Block and allocate buffers for channel 0
 253:RTT/SEGGER_RTT.c **** //
 254:RTT/SEGGER_RTT.c **** SEGGER_RTT_PUT_CB_SECTION(SEGGER_RTT_CB_ALIGN(SEGGER_RTT_CB _SEGGER_RTT));
 255:RTT/SEGGER_RTT.c **** 
 256:RTT/SEGGER_RTT.c **** SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acUpBuffer  [BUFFER_SIZE_UP]));
 257:RTT/SEGGER_RTT.c **** SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acDownBuffer[BUFFER_SIZE_DOWN]))
 258:RTT/SEGGER_RTT.c **** 
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 6


 259:RTT/SEGGER_RTT.c **** static char _ActiveTerminal;
 260:RTT/SEGGER_RTT.c **** 
 261:RTT/SEGGER_RTT.c **** /*********************************************************************
 262:RTT/SEGGER_RTT.c **** *
 263:RTT/SEGGER_RTT.c **** *       Static functions
 264:RTT/SEGGER_RTT.c **** *
 265:RTT/SEGGER_RTT.c **** **********************************************************************
 266:RTT/SEGGER_RTT.c **** */
 267:RTT/SEGGER_RTT.c **** 
 268:RTT/SEGGER_RTT.c **** /*********************************************************************
 269:RTT/SEGGER_RTT.c **** *
 270:RTT/SEGGER_RTT.c **** *       _DoInit()
 271:RTT/SEGGER_RTT.c **** *
 272:RTT/SEGGER_RTT.c **** *  Function description
 273:RTT/SEGGER_RTT.c **** *    Initializes the control block an buffers.
 274:RTT/SEGGER_RTT.c **** *    May only be called via INIT() to avoid overriding settings.
 275:RTT/SEGGER_RTT.c **** *
 276:RTT/SEGGER_RTT.c **** */
 277:RTT/SEGGER_RTT.c **** #define INIT()  do {                                            \
 278:RTT/SEGGER_RTT.c ****                   if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
 279:RTT/SEGGER_RTT.c ****                 } while (0)
 280:RTT/SEGGER_RTT.c **** static void _DoInit(void) {
 281:RTT/SEGGER_RTT.c ****   SEGGER_RTT_CB* p;
 282:RTT/SEGGER_RTT.c ****   //
 283:RTT/SEGGER_RTT.c ****   // Initialize control block
 284:RTT/SEGGER_RTT.c ****   //
 285:RTT/SEGGER_RTT.c ****   p = &_SEGGER_RTT;
 286:RTT/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 287:RTT/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 288:RTT/SEGGER_RTT.c ****   //
 289:RTT/SEGGER_RTT.c ****   // Initialize up buffer 0
 290:RTT/SEGGER_RTT.c ****   //
 291:RTT/SEGGER_RTT.c ****   p->aUp[0].sName         = "Terminal";
 292:RTT/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 293:RTT/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 294:RTT/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 295:RTT/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 296:RTT/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 297:RTT/SEGGER_RTT.c ****   //
 298:RTT/SEGGER_RTT.c ****   // Initialize down buffer 0
 299:RTT/SEGGER_RTT.c ****   //
 300:RTT/SEGGER_RTT.c ****   p->aDown[0].sName         = "Terminal";
 301:RTT/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 302:RTT/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 303:RTT/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 304:RTT/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 305:RTT/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 306:RTT/SEGGER_RTT.c ****   //
 307:RTT/SEGGER_RTT.c ****   // Finish initialization of the control block.
 308:RTT/SEGGER_RTT.c ****   // Copy Id string in three steps to make sure "SEGGER RTT" is not found
 309:RTT/SEGGER_RTT.c ****   // in initializer memory (usually flash) by J-Link
 310:RTT/SEGGER_RTT.c ****   //
 311:RTT/SEGGER_RTT.c ****   strcpy(&p->acID[7], "RTT");
 312:RTT/SEGGER_RTT.c ****   strcpy(&p->acID[0], "SEGGER");
 313:RTT/SEGGER_RTT.c ****   p->acID[6] = ' ';
 314:RTT/SEGGER_RTT.c **** }
 315:RTT/SEGGER_RTT.c **** 
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 7


 316:RTT/SEGGER_RTT.c **** /*********************************************************************
 317:RTT/SEGGER_RTT.c **** *
 318:RTT/SEGGER_RTT.c **** *       _WriteBlocking()
 319:RTT/SEGGER_RTT.c **** *
 320:RTT/SEGGER_RTT.c **** *  Function description
 321:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 322:RTT/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 323:RTT/SEGGER_RTT.c **** *    read by the host.
 324:RTT/SEGGER_RTT.c **** *    The caller is responsible for managing the write chunk sizes as
 325:RTT/SEGGER_RTT.c **** *    _WriteBlocking() will block until all data has been posted successfully.
 326:RTT/SEGGER_RTT.c **** *
 327:RTT/SEGGER_RTT.c **** *  Parameters
 328:RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 329:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 330:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 331:RTT/SEGGER_RTT.c **** *
 332:RTT/SEGGER_RTT.c **** *  Return value
 333:RTT/SEGGER_RTT.c **** *    >= 0 - Number of bytes written into buffer.
 334:RTT/SEGGER_RTT.c **** */
 335:RTT/SEGGER_RTT.c **** static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes)
 336:RTT/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 337:RTT/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 338:RTT/SEGGER_RTT.c ****   unsigned RdOff;
 339:RTT/SEGGER_RTT.c ****   unsigned WrOff;
 340:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 341:RTT/SEGGER_RTT.c ****   char*    pDst;
 342:RTT/SEGGER_RTT.c **** #endif
 343:RTT/SEGGER_RTT.c ****   //
 344:RTT/SEGGER_RTT.c ****   // Write data to buffer and handle wrap-around if necessary
 345:RTT/SEGGER_RTT.c ****   //
 346:RTT/SEGGER_RTT.c ****   NumBytesWritten = 0u;
 347:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 348:RTT/SEGGER_RTT.c ****   do {
 349:RTT/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 350:RTT/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 351:RTT/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 352:RTT/SEGGER_RTT.c ****     } else {
 353:RTT/SEGGER_RTT.c ****       NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 354:RTT/SEGGER_RTT.c ****     }
 355:RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes 
 356:RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 357:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 358:RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer + WrOff;
 359:RTT/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 360:RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 361:RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 362:RTT/SEGGER_RTT.c ****     while (NumBytesToWrite--) {
 363:RTT/SEGGER_RTT.c ****       *pDst++ = *pBuffer++;
 364:RTT/SEGGER_RTT.c ****     };
 365:RTT/SEGGER_RTT.c **** #else
 366:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 367:RTT/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 368:RTT/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 369:RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 370:RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 371:RTT/SEGGER_RTT.c **** #endif
 372:RTT/SEGGER_RTT.c ****     if (WrOff == pRing->SizeOfBuffer) {
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 8


 373:RTT/SEGGER_RTT.c ****       WrOff = 0u;
 374:RTT/SEGGER_RTT.c ****     }
 375:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 376:RTT/SEGGER_RTT.c ****   } while (NumBytes);
 377:RTT/SEGGER_RTT.c ****   //
 378:RTT/SEGGER_RTT.c ****   return NumBytesWritten;
 379:RTT/SEGGER_RTT.c **** }
 380:RTT/SEGGER_RTT.c **** 
 381:RTT/SEGGER_RTT.c **** /*********************************************************************
 382:RTT/SEGGER_RTT.c **** *
 383:RTT/SEGGER_RTT.c **** *       _WriteNoCheck()
 384:RTT/SEGGER_RTT.c **** *
 385:RTT/SEGGER_RTT.c **** *  Function description
 386:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 387:RTT/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 388:RTT/SEGGER_RTT.c **** *    read by the host.
 389:RTT/SEGGER_RTT.c **** *    It is callers responsibility to make sure data actually fits in buffer.
 390:RTT/SEGGER_RTT.c **** *
 391:RTT/SEGGER_RTT.c **** *  Parameters
 392:RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 393:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 394:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 395:RTT/SEGGER_RTT.c **** *
 396:RTT/SEGGER_RTT.c **** *  Notes
 397:RTT/SEGGER_RTT.c **** *    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
 398:RTT/SEGGER_RTT.c **** */
 399:RTT/SEGGER_RTT.c **** static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 400:RTT/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
 401:RTT/SEGGER_RTT.c ****   unsigned WrOff;
 402:RTT/SEGGER_RTT.c ****   unsigned Rem;
 403:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 404:RTT/SEGGER_RTT.c ****   char*    pDst;
 405:RTT/SEGGER_RTT.c **** #endif
 406:RTT/SEGGER_RTT.c **** 
 407:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 408:RTT/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 409:RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 410:RTT/SEGGER_RTT.c ****     //
 411:RTT/SEGGER_RTT.c ****     // All data fits before wrap around
 412:RTT/SEGGER_RTT.c ****     //
 413:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 414:RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer + WrOff;
 415:RTT/SEGGER_RTT.c ****     WrOff += NumBytes;
 416:RTT/SEGGER_RTT.c ****     while (NumBytes--) {
 417:RTT/SEGGER_RTT.c ****       *pDst++ = *pData++;
 418:RTT/SEGGER_RTT.c ****     };
 419:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 420:RTT/SEGGER_RTT.c **** #else
 421:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 422:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 423:RTT/SEGGER_RTT.c **** #endif
 424:RTT/SEGGER_RTT.c ****   } else {
 425:RTT/SEGGER_RTT.c ****     //
 426:RTT/SEGGER_RTT.c ****     // We reach the end of the buffer, so need to wrap around
 427:RTT/SEGGER_RTT.c ****     //
 428:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 429:RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer + WrOff;
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 9


 430:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 431:RTT/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 432:RTT/SEGGER_RTT.c ****       *pDst++ = *pData++;
 433:RTT/SEGGER_RTT.c ****     };
 434:RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer;
 435:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 436:RTT/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 437:RTT/SEGGER_RTT.c ****       *pDst++ = *pData++;
 438:RTT/SEGGER_RTT.c ****     };
 439:RTT/SEGGER_RTT.c ****     pRing->WrOff = NumBytes - Rem;
 440:RTT/SEGGER_RTT.c **** #else
 441:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 442:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 443:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 444:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 445:RTT/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 446:RTT/SEGGER_RTT.c **** #endif
 447:RTT/SEGGER_RTT.c ****   }
 448:RTT/SEGGER_RTT.c **** }
 449:RTT/SEGGER_RTT.c **** 
 450:RTT/SEGGER_RTT.c **** /*********************************************************************
 451:RTT/SEGGER_RTT.c **** *
 452:RTT/SEGGER_RTT.c **** *       _PostTerminalSwitch()
 453:RTT/SEGGER_RTT.c **** *
 454:RTT/SEGGER_RTT.c **** *  Function description
 455:RTT/SEGGER_RTT.c **** *    Switch terminal to the given terminal ID.  It is the caller's
 456:RTT/SEGGER_RTT.c **** *    responsibility to ensure the terminal ID is correct and there is
 457:RTT/SEGGER_RTT.c **** *    enough space in the buffer for this to complete successfully.
 458:RTT/SEGGER_RTT.c **** *
 459:RTT/SEGGER_RTT.c **** *  Parameters
 460:RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 461:RTT/SEGGER_RTT.c **** *    TerminalId   Terminal ID to switch to.
 462:RTT/SEGGER_RTT.c **** */
 463:RTT/SEGGER_RTT.c **** static void _PostTerminalSwitch(SEGGER_RTT_BUFFER_UP* pRing, unsigned char TerminalId) {
 464:RTT/SEGGER_RTT.c ****   unsigned char ac[2];
 465:RTT/SEGGER_RTT.c **** 
 466:RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 467:RTT/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 468:RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 469:RTT/SEGGER_RTT.c **** }
 470:RTT/SEGGER_RTT.c **** 
 471:RTT/SEGGER_RTT.c **** /*********************************************************************
 472:RTT/SEGGER_RTT.c **** *
 473:RTT/SEGGER_RTT.c **** *       _GetAvailWriteSpace()
 474:RTT/SEGGER_RTT.c **** *
 475:RTT/SEGGER_RTT.c **** *  Function description
 476:RTT/SEGGER_RTT.c **** *    Returns the number of bytes that can be written to the ring
 477:RTT/SEGGER_RTT.c **** *    buffer without blocking.
 478:RTT/SEGGER_RTT.c **** *
 479:RTT/SEGGER_RTT.c **** *  Parameters
 480:RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to check.
 481:RTT/SEGGER_RTT.c **** *
 482:RTT/SEGGER_RTT.c **** *  Return value
 483:RTT/SEGGER_RTT.c **** *    Number of bytes that are free in the buffer.
 484:RTT/SEGGER_RTT.c **** */
 485:RTT/SEGGER_RTT.c **** static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
  29              		.loc 1 485 66 view -0
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 10


  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 486:RTT/SEGGER_RTT.c ****   unsigned RdOff;
  34              		.loc 1 486 3 view .LVU1
 487:RTT/SEGGER_RTT.c ****   unsigned WrOff;
  35              		.loc 1 487 3 view .LVU2
 488:RTT/SEGGER_RTT.c ****   unsigned r;
  36              		.loc 1 488 3 view .LVU3
 489:RTT/SEGGER_RTT.c ****   //
 490:RTT/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
 491:RTT/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
 492:RTT/SEGGER_RTT.c ****   //
 493:RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
  37              		.loc 1 493 3 view .LVU4
  38              		.loc 1 493 9 is_stmt 0 view .LVU5
  39 0000 0369     		ldr	r3, [r0, #16]
  40              	.LVL1:
 494:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
  41              		.loc 1 494 3 is_stmt 1 view .LVU6
  42              		.loc 1 494 9 is_stmt 0 view .LVU7
  43 0002 C268     		ldr	r2, [r0, #12]
  44              	.LVL2:
 495:RTT/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
  45              		.loc 1 495 3 is_stmt 1 view .LVU8
  46              		.loc 1 495 6 is_stmt 0 view .LVU9
  47 0004 9342     		cmp	r3, r2
  48 0006 04D8     		bhi	.L2
 496:RTT/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
  49              		.loc 1 496 5 is_stmt 1 view .LVU10
  50              		.loc 1 496 14 is_stmt 0 view .LVU11
  51 0008 8068     		ldr	r0, [r0, #8]
  52              	.LVL3:
  53              		.loc 1 496 34 view .LVU12
  54 000a 801A     		subs	r0, r0, r2
  55              		.loc 1 496 42 view .LVU13
  56 000c 0344     		add	r3, r3, r0
  57              	.LVL4:
  58              		.loc 1 496 7 view .LVU14
  59 000e 581E     		subs	r0, r3, #1
  60              	.LVL5:
  61              		.loc 1 496 7 view .LVU15
  62 0010 7047     		bx	lr
  63              	.LVL6:
  64              	.L2:
 497:RTT/SEGGER_RTT.c ****   } else {
 498:RTT/SEGGER_RTT.c ****     r = RdOff - WrOff - 1u;
  65              		.loc 1 498 5 is_stmt 1 view .LVU16
  66              		.loc 1 498 15 is_stmt 0 view .LVU17
  67 0012 9B1A     		subs	r3, r3, r2
  68              	.LVL7:
  69              		.loc 1 498 7 view .LVU18
  70 0014 581E     		subs	r0, r3, #1
  71              	.LVL8:
 499:RTT/SEGGER_RTT.c ****   }
 500:RTT/SEGGER_RTT.c ****   return r;
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 11


  72              		.loc 1 500 3 is_stmt 1 view .LVU19
 501:RTT/SEGGER_RTT.c **** }
  73              		.loc 1 501 1 is_stmt 0 view .LVU20
  74 0016 7047     		bx	lr
  75              		.cfi_endproc
  76              	.LFE4:
  78              		.section	.text._WriteNoCheck,"ax",%progbits
  79              		.align	1
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  83              		.fpu fpv4-sp-d16
  85              	_WriteNoCheck:
  86              	.LVL9:
  87              	.LFB2:
 399:RTT/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  88              		.loc 1 399 94 is_stmt 1 view -0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
 399:RTT/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  92              		.loc 1 399 94 is_stmt 0 view .LVU22
  93 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
  94              	.LCFI0:
  95              		.cfi_def_cfa_offset 32
  96              		.cfi_offset 3, -32
  97              		.cfi_offset 4, -28
  98              		.cfi_offset 5, -24
  99              		.cfi_offset 6, -20
 100              		.cfi_offset 7, -16
 101              		.cfi_offset 8, -12
 102              		.cfi_offset 9, -8
 103              		.cfi_offset 14, -4
 104 0004 0446     		mov	r4, r0
 105 0006 8846     		mov	r8, r1
 106 0008 1646     		mov	r6, r2
 400:RTT/SEGGER_RTT.c ****   unsigned WrOff;
 107              		.loc 1 400 3 is_stmt 1 view .LVU23
 401:RTT/SEGGER_RTT.c ****   unsigned Rem;
 108              		.loc 1 401 3 view .LVU24
 402:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 109              		.loc 1 402 3 view .LVU25
 407:RTT/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 110              		.loc 1 407 3 view .LVU26
 407:RTT/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 111              		.loc 1 407 9 is_stmt 0 view .LVU27
 112 000a C568     		ldr	r5, [r0, #12]
 113              	.LVL10:
 408:RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 114              		.loc 1 408 3 is_stmt 1 view .LVU28
 408:RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 115              		.loc 1 408 14 is_stmt 0 view .LVU29
 116 000c 8768     		ldr	r7, [r0, #8]
 408:RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 117              		.loc 1 408 7 view .LVU30
 118 000e A7EB0509 		sub	r9, r7, r5
 119              	.LVL11:
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 12


 409:RTT/SEGGER_RTT.c ****     //
 120              		.loc 1 409 3 is_stmt 1 view .LVU31
 409:RTT/SEGGER_RTT.c ****     //
 121              		.loc 1 409 6 is_stmt 0 view .LVU32
 122 0012 9145     		cmp	r9, r2
 123 0014 07D9     		bls	.L5
 421:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 124              		.loc 1 421 5 is_stmt 1 view .LVU33
 125 0016 4068     		ldr	r0, [r0, #4]
 126              	.LVL12:
 421:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 127              		.loc 1 421 5 is_stmt 0 view .LVU34
 128 0018 2844     		add	r0, r0, r5
 129 001a FFF7FEFF 		bl	memcpy
 130              	.LVL13:
 422:RTT/SEGGER_RTT.c **** #endif
 131              		.loc 1 422 5 is_stmt 1 view .LVU35
 422:RTT/SEGGER_RTT.c **** #endif
 132              		.loc 1 422 26 is_stmt 0 view .LVU36
 133 001e 3544     		add	r5, r5, r6
 134              	.LVL14:
 422:RTT/SEGGER_RTT.c **** #endif
 135              		.loc 1 422 18 view .LVU37
 136 0020 E560     		str	r5, [r4, #12]
 137              	.L4:
 448:RTT/SEGGER_RTT.c **** 
 138              		.loc 1 448 1 view .LVU38
 139 0022 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 140              	.LVL15:
 141              	.L5:
 441:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 142              		.loc 1 441 5 is_stmt 1 view .LVU39
 442:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 143              		.loc 1 442 5 view .LVU40
 144 0026 4068     		ldr	r0, [r0, #4]
 145              	.LVL16:
 442:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 146              		.loc 1 442 5 is_stmt 0 view .LVU41
 147 0028 4A46     		mov	r2, r9
 148              	.LVL17:
 442:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 149              		.loc 1 442 5 view .LVU42
 150 002a 2844     		add	r0, r0, r5
 151 002c FFF7FEFF 		bl	memcpy
 152              	.LVL18:
 443:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 153              		.loc 1 443 5 is_stmt 1 view .LVU43
 443:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 154              		.loc 1 443 20 is_stmt 0 view .LVU44
 155 0030 ED1B     		subs	r5, r5, r7
 156              	.LVL19:
 443:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 157              		.loc 1 443 20 view .LVU45
 158 0032 3544     		add	r5, r5, r6
 159              	.LVL20:
 444:RTT/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 160              		.loc 1 444 5 is_stmt 1 view .LVU46
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 13


 161 0034 2A46     		mov	r2, r5
 162 0036 08EB0901 		add	r1, r8, r9
 163 003a 6068     		ldr	r0, [r4, #4]
 164 003c FFF7FEFF 		bl	memcpy
 165              	.LVL21:
 445:RTT/SEGGER_RTT.c **** #endif
 166              		.loc 1 445 5 view .LVU47
 445:RTT/SEGGER_RTT.c **** #endif
 167              		.loc 1 445 18 is_stmt 0 view .LVU48
 168 0040 E560     		str	r5, [r4, #12]
 448:RTT/SEGGER_RTT.c **** 
 169              		.loc 1 448 1 view .LVU49
 170 0042 EEE7     		b	.L4
 171              		.cfi_endproc
 172              	.LFE2:
 174              		.section	.text._WriteBlocking,"ax",%progbits
 175              		.align	1
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 179              		.fpu fpv4-sp-d16
 181              	_WriteBlocking:
 182              	.LVL22:
 183              	.LFB1:
 335:RTT/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 184              		.loc 1 335 101 is_stmt 1 view -0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 335:RTT/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 188              		.loc 1 335 101 is_stmt 0 view .LVU51
 189 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 190              	.LCFI1:
 191              		.cfi_def_cfa_offset 32
 192              		.cfi_offset 3, -32
 193              		.cfi_offset 4, -28
 194              		.cfi_offset 5, -24
 195              		.cfi_offset 6, -20
 196              		.cfi_offset 7, -16
 197              		.cfi_offset 8, -12
 198              		.cfi_offset 9, -8
 199              		.cfi_offset 14, -4
 200 0004 0646     		mov	r6, r0
 201 0006 8846     		mov	r8, r1
 202 0008 1746     		mov	r7, r2
 336:RTT/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 203              		.loc 1 336 3 is_stmt 1 view .LVU52
 337:RTT/SEGGER_RTT.c ****   unsigned RdOff;
 204              		.loc 1 337 3 view .LVU53
 338:RTT/SEGGER_RTT.c ****   unsigned WrOff;
 205              		.loc 1 338 3 view .LVU54
 339:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 206              		.loc 1 339 3 view .LVU55
 346:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 207              		.loc 1 346 3 view .LVU56
 208              	.LVL23:
 347:RTT/SEGGER_RTT.c ****   do {
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 14


 209              		.loc 1 347 3 view .LVU57
 347:RTT/SEGGER_RTT.c ****   do {
 210              		.loc 1 347 9 is_stmt 0 view .LVU58
 211 000a C568     		ldr	r5, [r0, #12]
 212              	.LVL24:
 346:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 213              		.loc 1 346 19 view .LVU59
 214 000c 4FF00009 		mov	r9, #0
 215 0010 18E0     		b	.L12
 216              	.LVL25:
 217              	.L17:
 351:RTT/SEGGER_RTT.c ****     } else {
 218              		.loc 1 351 7 is_stmt 1 view .LVU60
 351:RTT/SEGGER_RTT.c ****     } else {
 219              		.loc 1 351 31 is_stmt 0 view .LVU61
 220 0012 641B     		subs	r4, r4, r5
 221              	.LVL26:
 351:RTT/SEGGER_RTT.c ****     } else {
 222              		.loc 1 351 23 view .LVU62
 223 0014 621E     		subs	r2, r4, #1
 224              	.LVL27:
 225              	.L10:
 355:RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 226              		.loc 1 355 5 is_stmt 1 view .LVU63
 355:RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 227              		.loc 1 355 23 is_stmt 0 view .LVU64
 228 0016 B368     		ldr	r3, [r6, #8]
 229 0018 5C1B     		subs	r4, r3, r5
 355:RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 230              		.loc 1 355 21 view .LVU65
 231 001a 9442     		cmp	r4, r2
 232 001c 28BF     		it	cs
 233 001e 1446     		movcs	r4, r2
 234              	.LVL28:
 356:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 235              		.loc 1 356 5 is_stmt 1 view .LVU66
 356:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 236              		.loc 1 356 21 is_stmt 0 view .LVU67
 237 0020 BC42     		cmp	r4, r7
 238 0022 28BF     		it	cs
 239 0024 3C46     		movcs	r4, r7
 240              	.LVL29:
 366:RTT/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 241              		.loc 1 366 5 is_stmt 1 view .LVU68
 242 0026 7068     		ldr	r0, [r6, #4]
 243 0028 2246     		mov	r2, r4
 244 002a 4146     		mov	r1, r8
 245 002c 2844     		add	r0, r0, r5
 246 002e FFF7FEFF 		bl	memcpy
 247              	.LVL30:
 367:RTT/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 248              		.loc 1 367 5 view .LVU69
 367:RTT/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 249              		.loc 1 367 21 is_stmt 0 view .LVU70
 250 0032 A144     		add	r9, r9, r4
 251              	.LVL31:
 368:RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 15


 252              		.loc 1 368 5 is_stmt 1 view .LVU71
 368:RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 253              		.loc 1 368 21 is_stmt 0 view .LVU72
 254 0034 A044     		add	r8, r8, r4
 255              	.LVL32:
 369:RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 256              		.loc 1 369 5 is_stmt 1 view .LVU73
 369:RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 257              		.loc 1 369 21 is_stmt 0 view .LVU74
 258 0036 3F1B     		subs	r7, r7, r4
 259              	.LVL33:
 370:RTT/SEGGER_RTT.c **** #endif
 260              		.loc 1 370 5 is_stmt 1 view .LVU75
 370:RTT/SEGGER_RTT.c **** #endif
 261              		.loc 1 370 21 is_stmt 0 view .LVU76
 262 0038 2544     		add	r5, r5, r4
 263              	.LVL34:
 372:RTT/SEGGER_RTT.c ****       WrOff = 0u;
 264              		.loc 1 372 5 is_stmt 1 view .LVU77
 372:RTT/SEGGER_RTT.c ****       WrOff = 0u;
 265              		.loc 1 372 23 is_stmt 0 view .LVU78
 266 003a B368     		ldr	r3, [r6, #8]
 372:RTT/SEGGER_RTT.c ****       WrOff = 0u;
 267              		.loc 1 372 8 view .LVU79
 268 003c AB42     		cmp	r3, r5
 269 003e 09D0     		beq	.L15
 270              	.LVL35:
 271              	.L11:
 375:RTT/SEGGER_RTT.c ****   } while (NumBytes);
 272              		.loc 1 375 5 is_stmt 1 view .LVU80
 375:RTT/SEGGER_RTT.c ****   } while (NumBytes);
 273              		.loc 1 375 18 is_stmt 0 view .LVU81
 274 0040 F560     		str	r5, [r6, #12]
 376:RTT/SEGGER_RTT.c ****   //
 275              		.loc 1 376 11 is_stmt 1 view .LVU82
 376:RTT/SEGGER_RTT.c ****   //
 276              		.loc 1 376 3 is_stmt 0 view .LVU83
 277 0042 4FB1     		cbz	r7, .L16
 278              	.LVL36:
 279              	.L12:
 348:RTT/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 280              		.loc 1 348 3 is_stmt 1 view .LVU84
 349:RTT/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 281              		.loc 1 349 5 view .LVU85
 349:RTT/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 282              		.loc 1 349 11 is_stmt 0 view .LVU86
 283 0044 3469     		ldr	r4, [r6, #16]
 284              	.LVL37:
 350:RTT/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 285              		.loc 1 350 5 is_stmt 1 view .LVU87
 350:RTT/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 286              		.loc 1 350 8 is_stmt 0 view .LVU88
 287 0046 A542     		cmp	r5, r4
 288 0048 E3D3     		bcc	.L17
 353:RTT/SEGGER_RTT.c ****     }
 289              		.loc 1 353 7 is_stmt 1 view .LVU89
 353:RTT/SEGGER_RTT.c ****     }
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 16


 290              		.loc 1 353 30 is_stmt 0 view .LVU90
 291 004a B268     		ldr	r2, [r6, #8]
 353:RTT/SEGGER_RTT.c ****     }
 292              		.loc 1 353 62 view .LVU91
 293 004c 641B     		subs	r4, r4, r5
 294              	.LVL38:
 353:RTT/SEGGER_RTT.c ****     }
 295              		.loc 1 353 45 view .LVU92
 296 004e 1444     		add	r4, r4, r2
 353:RTT/SEGGER_RTT.c ****     }
 297              		.loc 1 353 23 view .LVU93
 298 0050 621E     		subs	r2, r4, #1
 299              	.LVL39:
 353:RTT/SEGGER_RTT.c ****     }
 300              		.loc 1 353 23 view .LVU94
 301 0052 E0E7     		b	.L10
 302              	.LVL40:
 303              	.L15:
 373:RTT/SEGGER_RTT.c ****     }
 304              		.loc 1 373 13 view .LVU95
 305 0054 0025     		movs	r5, #0
 306              	.LVL41:
 373:RTT/SEGGER_RTT.c ****     }
 307              		.loc 1 373 13 view .LVU96
 308 0056 F3E7     		b	.L11
 309              	.LVL42:
 310              	.L16:
 378:RTT/SEGGER_RTT.c **** }
 311              		.loc 1 378 3 is_stmt 1 view .LVU97
 379:RTT/SEGGER_RTT.c **** 
 312              		.loc 1 379 1 is_stmt 0 view .LVU98
 313 0058 4846     		mov	r0, r9
 314 005a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 379:RTT/SEGGER_RTT.c **** 
 315              		.loc 1 379 1 view .LVU99
 316              		.cfi_endproc
 317              	.LFE1:
 319              		.section	.text._PostTerminalSwitch,"ax",%progbits
 320              		.align	1
 321              		.syntax unified
 322              		.thumb
 323              		.thumb_func
 324              		.fpu fpv4-sp-d16
 326              	_PostTerminalSwitch:
 327              	.LVL43:
 328              	.LFB3:
 463:RTT/SEGGER_RTT.c ****   unsigned char ac[2];
 329              		.loc 1 463 88 is_stmt 1 view -0
 330              		.cfi_startproc
 331              		@ args = 0, pretend = 0, frame = 8
 332              		@ frame_needed = 0, uses_anonymous_args = 0
 463:RTT/SEGGER_RTT.c ****   unsigned char ac[2];
 333              		.loc 1 463 88 is_stmt 0 view .LVU101
 334 0000 00B5     		push	{lr}
 335              	.LCFI2:
 336              		.cfi_def_cfa_offset 4
 337              		.cfi_offset 14, -4
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 17


 338 0002 83B0     		sub	sp, sp, #12
 339              	.LCFI3:
 340              		.cfi_def_cfa_offset 16
 464:RTT/SEGGER_RTT.c **** 
 341              		.loc 1 464 3 is_stmt 1 view .LVU102
 466:RTT/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 342              		.loc 1 466 3 view .LVU103
 466:RTT/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 343              		.loc 1 466 9 is_stmt 0 view .LVU104
 344 0004 FF23     		movs	r3, #255
 345 0006 8DF80430 		strb	r3, [sp, #4]
 467:RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 346              		.loc 1 467 3 is_stmt 1 view .LVU105
 467:RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 347              		.loc 1 467 23 is_stmt 0 view .LVU106
 348 000a 054B     		ldr	r3, .L20
 349 000c 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 467:RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 350              		.loc 1 467 9 view .LVU107
 351 000e 8DF80530 		strb	r3, [sp, #5]
 468:RTT/SEGGER_RTT.c **** }
 352              		.loc 1 468 3 is_stmt 1 view .LVU108
 353 0012 0222     		movs	r2, #2
 354 0014 01A9     		add	r1, sp, #4
 355              	.LVL44:
 468:RTT/SEGGER_RTT.c **** }
 356              		.loc 1 468 3 is_stmt 0 view .LVU109
 357 0016 FFF7FEFF 		bl	_WriteBlocking
 358              	.LVL45:
 469:RTT/SEGGER_RTT.c **** 
 359              		.loc 1 469 1 view .LVU110
 360 001a 03B0     		add	sp, sp, #12
 361              	.LCFI4:
 362              		.cfi_def_cfa_offset 4
 363              		@ sp needed
 364 001c 5DF804FB 		ldr	pc, [sp], #4
 365              	.L21:
 366              		.align	2
 367              	.L20:
 368 0020 00000000 		.word	.LANCHOR0
 369              		.cfi_endproc
 370              	.LFE3:
 372              		.section	.rodata._DoInit.str1.4,"aMS",%progbits,1
 373              		.align	2
 374              	.LC0:
 375 0000 5465726D 		.ascii	"Terminal\000"
 375      696E616C 
 375      00
 376 0009 000000   		.align	2
 377              	.LC1:
 378 000c 52545400 		.ascii	"RTT\000"
 379              		.align	2
 380              	.LC2:
 381 0010 53454747 		.ascii	"SEGGER\000"
 381      455200
 382              		.section	.text._DoInit,"ax",%progbits
 383              		.align	1
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 18


 384              		.syntax unified
 385              		.thumb
 386              		.thumb_func
 387              		.fpu fpv4-sp-d16
 389              	_DoInit:
 390              	.LFB0:
 280:RTT/SEGGER_RTT.c ****   SEGGER_RTT_CB* p;
 391              		.loc 1 280 27 is_stmt 1 view -0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 0
 394              		@ frame_needed = 0, uses_anonymous_args = 0
 395              		@ link register save eliminated.
 281:RTT/SEGGER_RTT.c ****   //
 396              		.loc 1 281 3 view .LVU112
 285:RTT/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 397              		.loc 1 285 3 view .LVU113
 398              	.LVL46:
 286:RTT/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 399              		.loc 1 286 3 view .LVU114
 286:RTT/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 400              		.loc 1 286 25 is_stmt 0 view .LVU115
 401 0000 124B     		ldr	r3, .L23
 402 0002 0322     		movs	r2, #3
 403 0004 1A61     		str	r2, [r3, #16]
 287:RTT/SEGGER_RTT.c ****   //
 404              		.loc 1 287 3 is_stmt 1 view .LVU116
 287:RTT/SEGGER_RTT.c ****   //
 405              		.loc 1 287 25 is_stmt 0 view .LVU117
 406 0006 5A61     		str	r2, [r3, #20]
 291:RTT/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 407              		.loc 1 291 3 is_stmt 1 view .LVU118
 291:RTT/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 408              		.loc 1 291 27 is_stmt 0 view .LVU119
 409 0008 1149     		ldr	r1, .L23+4
 410 000a 9961     		str	r1, [r3, #24]
 292:RTT/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 411              		.loc 1 292 3 is_stmt 1 view .LVU120
 292:RTT/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 412              		.loc 1 292 27 is_stmt 0 view .LVU121
 413 000c 114A     		ldr	r2, .L23+8
 414 000e DA61     		str	r2, [r3, #28]
 293:RTT/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 415              		.loc 1 293 3 is_stmt 1 view .LVU122
 293:RTT/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 416              		.loc 1 293 27 is_stmt 0 view .LVU123
 417 0010 4FF48062 		mov	r2, #1024
 418 0014 1A62     		str	r2, [r3, #32]
 294:RTT/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 419              		.loc 1 294 3 is_stmt 1 view .LVU124
 294:RTT/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 420              		.loc 1 294 27 is_stmt 0 view .LVU125
 421 0016 0022     		movs	r2, #0
 422 0018 9A62     		str	r2, [r3, #40]
 295:RTT/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 423              		.loc 1 295 3 is_stmt 1 view .LVU126
 295:RTT/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 424              		.loc 1 295 27 is_stmt 0 view .LVU127
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 19


 425 001a 5A62     		str	r2, [r3, #36]
 296:RTT/SEGGER_RTT.c ****   //
 426              		.loc 1 296 3 is_stmt 1 view .LVU128
 296:RTT/SEGGER_RTT.c ****   //
 427              		.loc 1 296 27 is_stmt 0 view .LVU129
 428 001c DA62     		str	r2, [r3, #44]
 300:RTT/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 429              		.loc 1 300 3 is_stmt 1 view .LVU130
 300:RTT/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 430              		.loc 1 300 29 is_stmt 0 view .LVU131
 431 001e 1966     		str	r1, [r3, #96]
 301:RTT/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 432              		.loc 1 301 3 is_stmt 1 view .LVU132
 301:RTT/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 433              		.loc 1 301 29 is_stmt 0 view .LVU133
 434 0020 0D49     		ldr	r1, .L23+12
 435 0022 5966     		str	r1, [r3, #100]
 302:RTT/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 436              		.loc 1 302 3 is_stmt 1 view .LVU134
 302:RTT/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 437              		.loc 1 302 29 is_stmt 0 view .LVU135
 438 0024 1021     		movs	r1, #16
 439 0026 9966     		str	r1, [r3, #104]
 303:RTT/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 440              		.loc 1 303 3 is_stmt 1 view .LVU136
 303:RTT/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 441              		.loc 1 303 29 is_stmt 0 view .LVU137
 442 0028 1A67     		str	r2, [r3, #112]
 304:RTT/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 443              		.loc 1 304 3 is_stmt 1 view .LVU138
 304:RTT/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 444              		.loc 1 304 29 is_stmt 0 view .LVU139
 445 002a DA66     		str	r2, [r3, #108]
 305:RTT/SEGGER_RTT.c ****   //
 446              		.loc 1 305 3 is_stmt 1 view .LVU140
 305:RTT/SEGGER_RTT.c ****   //
 447              		.loc 1 305 29 is_stmt 0 view .LVU141
 448 002c 5A67     		str	r2, [r3, #116]
 311:RTT/SEGGER_RTT.c ****   strcpy(&p->acID[0], "SEGGER");
 449              		.loc 1 311 3 is_stmt 1 view .LVU142
 450 002e 0B4A     		ldr	r2, .L23+16
 451 0030 1068     		ldr	r0, [r2]
 452 0032 C3F80700 		str	r0, [r3, #7]	@ unaligned
 312:RTT/SEGGER_RTT.c ****   p->acID[6] = ' ';
 453              		.loc 1 312 3 view .LVU143
 454 0036 0A4A     		ldr	r2, .L23+20
 455 0038 92E80300 		ldm	r2, {r0, r1}
 456 003c 1860     		str	r0, [r3]
 457 003e 9980     		strh	r1, [r3, #4]	@ movhi
 458 0040 090C     		lsrs	r1, r1, #16
 459 0042 9971     		strb	r1, [r3, #6]
 313:RTT/SEGGER_RTT.c **** }
 460              		.loc 1 313 3 view .LVU144
 313:RTT/SEGGER_RTT.c **** }
 461              		.loc 1 313 14 is_stmt 0 view .LVU145
 462 0044 2022     		movs	r2, #32
 463 0046 9A71     		strb	r2, [r3, #6]
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 20


 314:RTT/SEGGER_RTT.c **** 
 464              		.loc 1 314 1 view .LVU146
 465 0048 7047     		bx	lr
 466              	.L24:
 467 004a 00BF     		.align	2
 468              	.L23:
 469 004c 00000000 		.word	.LANCHOR1
 470 0050 00000000 		.word	.LC0
 471 0054 00000000 		.word	.LANCHOR2
 472 0058 00000000 		.word	.LANCHOR3
 473 005c 0C000000 		.word	.LC1
 474 0060 10000000 		.word	.LC2
 475              		.cfi_endproc
 476              	.LFE0:
 478              		.section	.text.SEGGER_RTT_ReadNoLock,"ax",%progbits
 479              		.align	1
 480              		.global	SEGGER_RTT_ReadNoLock
 481              		.syntax unified
 482              		.thumb
 483              		.thumb_func
 484              		.fpu fpv4-sp-d16
 486              	SEGGER_RTT_ReadNoLock:
 487              	.LVL47:
 488              	.LFB5:
 502:RTT/SEGGER_RTT.c **** 
 503:RTT/SEGGER_RTT.c **** /*********************************************************************
 504:RTT/SEGGER_RTT.c **** *
 505:RTT/SEGGER_RTT.c **** *       Public code
 506:RTT/SEGGER_RTT.c **** *
 507:RTT/SEGGER_RTT.c **** **********************************************************************
 508:RTT/SEGGER_RTT.c **** */
 509:RTT/SEGGER_RTT.c **** /*********************************************************************
 510:RTT/SEGGER_RTT.c **** *
 511:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ReadNoLock()
 512:RTT/SEGGER_RTT.c **** *
 513:RTT/SEGGER_RTT.c **** *  Function description
 514:RTT/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 515:RTT/SEGGER_RTT.c **** *    which have been previously stored by the host.
 516:RTT/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 517:RTT/SEGGER_RTT.c **** *
 518:RTT/SEGGER_RTT.c **** *  Parameters
 519:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 520:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 521:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 522:RTT/SEGGER_RTT.c **** *
 523:RTT/SEGGER_RTT.c **** *  Return value
 524:RTT/SEGGER_RTT.c **** *    Number of bytes that have been read.
 525:RTT/SEGGER_RTT.c **** */
 526:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 489              		.loc 1 526 88 is_stmt 1 view -0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 0
 492              		@ frame_needed = 0, uses_anonymous_args = 0
 493              		.loc 1 526 88 is_stmt 0 view .LVU148
 494 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 495              	.LCFI5:
 496              		.cfi_def_cfa_offset 32
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 21


 497              		.cfi_offset 4, -32
 498              		.cfi_offset 5, -28
 499              		.cfi_offset 6, -24
 500              		.cfi_offset 7, -20
 501              		.cfi_offset 8, -16
 502              		.cfi_offset 9, -12
 503              		.cfi_offset 10, -8
 504              		.cfi_offset 14, -4
 505 0004 0446     		mov	r4, r0
 506 0006 8846     		mov	r8, r1
 507 0008 9146     		mov	r9, r2
 527:RTT/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 508              		.loc 1 527 3 is_stmt 1 view .LVU149
 528:RTT/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 509              		.loc 1 528 3 view .LVU150
 529:RTT/SEGGER_RTT.c ****   unsigned                RdOff;
 510              		.loc 1 529 3 view .LVU151
 530:RTT/SEGGER_RTT.c ****   unsigned                WrOff;
 511              		.loc 1 530 3 view .LVU152
 531:RTT/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 512              		.loc 1 531 3 view .LVU153
 532:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 513              		.loc 1 532 3 view .LVU154
 533:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 534:RTT/SEGGER_RTT.c ****   const char*             pSrc;
 535:RTT/SEGGER_RTT.c **** #endif
 536:RTT/SEGGER_RTT.c ****   //
 537:RTT/SEGGER_RTT.c ****   INIT();
 514              		.loc 1 537 3 view .LVU155
 515              		.loc 1 537 3 view .LVU156
 516 000a 244B     		ldr	r3, .L36
 517 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 518 000e C3B1     		cbz	r3, .L33
 519              	.LVL48:
 520              	.L26:
 521              		.loc 1 537 3 discriminator 3 view .LVU157
 538:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aDown[BufferIndex];
 522              		.loc 1 538 3 discriminator 3 view .LVU158
 539:RTT/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 523              		.loc 1 539 3 discriminator 3 view .LVU159
 540:RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 524              		.loc 1 540 3 discriminator 3 view .LVU160
 525              		.loc 1 540 9 is_stmt 0 discriminator 3 view .LVU161
 526 0010 04EB4403 		add	r3, r4, r4, lsl #1
 527 0014 214A     		ldr	r2, .L36
 528 0016 02EBC303 		add	r3, r2, r3, lsl #3
 529 001a 1F6F     		ldr	r7, [r3, #112]
 530              	.LVL49:
 541:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 531              		.loc 1 541 3 is_stmt 1 discriminator 3 view .LVU162
 532              		.loc 1 541 9 is_stmt 0 discriminator 3 view .LVU163
 533 001c DD6E     		ldr	r5, [r3, #108]
 534              	.LVL50:
 542:RTT/SEGGER_RTT.c ****   NumBytesRead = 0u;
 535              		.loc 1 542 3 is_stmt 1 discriminator 3 view .LVU164
 543:RTT/SEGGER_RTT.c ****   //
 544:RTT/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 22


 545:RTT/SEGGER_RTT.c ****   //
 546:RTT/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 536              		.loc 1 546 3 discriminator 3 view .LVU165
 537              		.loc 1 546 6 is_stmt 0 discriminator 3 view .LVU166
 538 001e AF42     		cmp	r7, r5
 539 0020 12D8     		bhi	.L34
 542:RTT/SEGGER_RTT.c ****   NumBytesRead = 0u;
 540              		.loc 1 542 16 view .LVU167
 541 0022 0026     		movs	r6, #0
 542              	.LVL51:
 543              	.L27:
 547:RTT/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 548:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 549:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 550:RTT/SEGGER_RTT.c ****     pSrc = pRing->pBuffer + RdOff;
 551:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 552:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 553:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 554:RTT/SEGGER_RTT.c ****     while (NumBytesRem--) {
 555:RTT/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 556:RTT/SEGGER_RTT.c ****     };
 557:RTT/SEGGER_RTT.c **** #else
 558:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 559:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 560:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 561:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 562:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 563:RTT/SEGGER_RTT.c **** #endif
 564:RTT/SEGGER_RTT.c ****     //
 565:RTT/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 566:RTT/SEGGER_RTT.c ****     //
 567:RTT/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 568:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 569:RTT/SEGGER_RTT.c ****     }
 570:RTT/SEGGER_RTT.c ****   }
 571:RTT/SEGGER_RTT.c ****   //
 572:RTT/SEGGER_RTT.c ****   // Read remaining items of buffer
 573:RTT/SEGGER_RTT.c ****   //
 574:RTT/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 544              		.loc 1 574 3 is_stmt 1 view .LVU168
 545              		.loc 1 574 15 is_stmt 0 view .LVU169
 546 0024 ED1B     		subs	r5, r5, r7
 547              	.LVL52:
 575:RTT/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 548              		.loc 1 575 3 is_stmt 1 view .LVU170
 549              		.loc 1 575 15 is_stmt 0 view .LVU171
 550 0026 4D45     		cmp	r5, r9
 551 0028 28BF     		it	cs
 552 002a 4D46     		movcs	r5, r9
 553              	.LVL53:
 576:RTT/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 554              		.loc 1 576 3 is_stmt 1 view .LVU172
 555              		.loc 1 576 6 is_stmt 0 view .LVU173
 556 002c 3DBB     		cbnz	r5, .L35
 557              	.LVL54:
 558              	.L28:
 577:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 23


 578:RTT/SEGGER_RTT.c ****     pSrc = pRing->pBuffer + RdOff;
 579:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 580:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 581:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 582:RTT/SEGGER_RTT.c ****     while (NumBytesRem--) {
 583:RTT/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 584:RTT/SEGGER_RTT.c ****     };
 585:RTT/SEGGER_RTT.c **** #else
 586:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 587:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 588:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 589:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 590:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 591:RTT/SEGGER_RTT.c **** #endif
 592:RTT/SEGGER_RTT.c ****   }
 593:RTT/SEGGER_RTT.c ****   if (NumBytesRead) {
 559              		.loc 1 593 3 is_stmt 1 view .LVU174
 560              		.loc 1 593 6 is_stmt 0 view .LVU175
 561 002e 2EB1     		cbz	r6, .L25
 594:RTT/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 562              		.loc 1 594 5 is_stmt 1 view .LVU176
 563              		.loc 1 594 18 is_stmt 0 view .LVU177
 564 0030 04EB4404 		add	r4, r4, r4, lsl #1
 565              	.LVL55:
 566              		.loc 1 594 18 view .LVU178
 567 0034 1948     		ldr	r0, .L36
 568 0036 00EBC404 		add	r4, r0, r4, lsl #3
 569 003a 2767     		str	r7, [r4, #112]
 595:RTT/SEGGER_RTT.c ****   }
 596:RTT/SEGGER_RTT.c ****   //
 597:RTT/SEGGER_RTT.c ****   return NumBytesRead;
 570              		.loc 1 597 3 is_stmt 1 view .LVU179
 571              	.L25:
 598:RTT/SEGGER_RTT.c **** }
 572              		.loc 1 598 1 is_stmt 0 view .LVU180
 573 003c 3046     		mov	r0, r6
 574 003e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 575              	.LVL56:
 576              	.L33:
 537:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aDown[BufferIndex];
 577              		.loc 1 537 3 is_stmt 1 discriminator 1 view .LVU181
 578 0042 FFF7FEFF 		bl	_DoInit
 579              	.LVL57:
 537:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aDown[BufferIndex];
 580              		.loc 1 537 3 is_stmt 0 discriminator 1 view .LVU182
 581 0046 E3E7     		b	.L26
 582              	.LVL58:
 583              	.L34:
 547:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 584              		.loc 1 547 5 is_stmt 1 view .LVU183
 547:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 585              		.loc 1 547 24 is_stmt 0 view .LVU184
 586 0048 04EB440A 		add	r10, r4, r4, lsl #1
 587 004c 02EBCA0A 		add	r10, r2, r10, lsl #3
 588 0050 DAF86860 		ldr	r6, [r10, #104]
 547:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 589              		.loc 1 547 17 view .LVU185
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 24


 590 0054 F61B     		subs	r6, r6, r7
 591              	.LVL59:
 548:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 592              		.loc 1 548 5 is_stmt 1 view .LVU186
 548:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 593              		.loc 1 548 17 is_stmt 0 view .LVU187
 594 0056 4E45     		cmp	r6, r9
 595 0058 28BF     		it	cs
 596 005a 4E46     		movcs	r6, r9
 597              	.LVL60:
 558:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 598              		.loc 1 558 5 is_stmt 1 view .LVU188
 599 005c DAF86410 		ldr	r1, [r10, #100]
 600 0060 3246     		mov	r2, r6
 601 0062 3944     		add	r1, r1, r7
 602 0064 4046     		mov	r0, r8
 603 0066 FFF7FEFF 		bl	memcpy
 604              	.LVL61:
 559:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 605              		.loc 1 559 5 view .LVU189
 560:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 606              		.loc 1 560 5 view .LVU190
 560:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 607              		.loc 1 560 18 is_stmt 0 view .LVU191
 608 006a B044     		add	r8, r8, r6
 609              	.LVL62:
 561:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 610              		.loc 1 561 5 is_stmt 1 view .LVU192
 561:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 611              		.loc 1 561 18 is_stmt 0 view .LVU193
 612 006c A9EB0609 		sub	r9, r9, r6
 613              	.LVL63:
 562:RTT/SEGGER_RTT.c **** #endif
 614              		.loc 1 562 5 is_stmt 1 view .LVU194
 562:RTT/SEGGER_RTT.c **** #endif
 615              		.loc 1 562 18 is_stmt 0 view .LVU195
 616 0070 3744     		add	r7, r7, r6
 617              	.LVL64:
 567:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 618              		.loc 1 567 5 is_stmt 1 view .LVU196
 567:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 619              		.loc 1 567 23 is_stmt 0 view .LVU197
 620 0072 DAF86830 		ldr	r3, [r10, #104]
 567:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 621              		.loc 1 567 8 view .LVU198
 622 0076 BB42     		cmp	r3, r7
 623 0078 D4D1     		bne	.L27
 568:RTT/SEGGER_RTT.c ****     }
 624              		.loc 1 568 13 view .LVU199
 625 007a 0027     		movs	r7, #0
 626              	.LVL65:
 568:RTT/SEGGER_RTT.c ****     }
 627              		.loc 1 568 13 view .LVU200
 628 007c D2E7     		b	.L27
 629              	.LVL66:
 630              	.L35:
 586:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 25


 631              		.loc 1 586 5 is_stmt 1 view .LVU201
 632 007e 04EB4403 		add	r3, r4, r4, lsl #1
 633 0082 064A     		ldr	r2, .L36
 634 0084 02EBC303 		add	r3, r2, r3, lsl #3
 635 0088 596E     		ldr	r1, [r3, #100]
 636 008a 2A46     		mov	r2, r5
 637 008c 3944     		add	r1, r1, r7
 638 008e 4046     		mov	r0, r8
 639 0090 FFF7FEFF 		bl	memcpy
 640              	.LVL67:
 587:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 641              		.loc 1 587 5 view .LVU202
 587:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 642              		.loc 1 587 18 is_stmt 0 view .LVU203
 643 0094 2E44     		add	r6, r6, r5
 644              	.LVL68:
 588:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 645              		.loc 1 588 5 is_stmt 1 view .LVU204
 589:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 646              		.loc 1 589 5 view .LVU205
 590:RTT/SEGGER_RTT.c **** #endif
 647              		.loc 1 590 5 view .LVU206
 590:RTT/SEGGER_RTT.c **** #endif
 648              		.loc 1 590 18 is_stmt 0 view .LVU207
 649 0096 2F44     		add	r7, r7, r5
 650              	.LVL69:
 590:RTT/SEGGER_RTT.c **** #endif
 651              		.loc 1 590 18 view .LVU208
 652 0098 C9E7     		b	.L28
 653              	.L37:
 654 009a 00BF     		.align	2
 655              	.L36:
 656 009c 00000000 		.word	.LANCHOR1
 657              		.cfi_endproc
 658              	.LFE5:
 660              		.section	.text.SEGGER_RTT_Read,"ax",%progbits
 661              		.align	1
 662              		.global	SEGGER_RTT_Read
 663              		.syntax unified
 664              		.thumb
 665              		.thumb_func
 666              		.fpu fpv4-sp-d16
 668              	SEGGER_RTT_Read:
 669              	.LVL70:
 670              	.LFB6:
 599:RTT/SEGGER_RTT.c **** 
 600:RTT/SEGGER_RTT.c **** /*********************************************************************
 601:RTT/SEGGER_RTT.c **** *
 602:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_Read
 603:RTT/SEGGER_RTT.c **** *
 604:RTT/SEGGER_RTT.c **** *  Function description
 605:RTT/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 606:RTT/SEGGER_RTT.c **** *    which have been previously stored by the host.
 607:RTT/SEGGER_RTT.c **** *
 608:RTT/SEGGER_RTT.c **** *  Parameters
 609:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 610:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 26


 611:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 612:RTT/SEGGER_RTT.c **** *
 613:RTT/SEGGER_RTT.c **** *  Return value
 614:RTT/SEGGER_RTT.c **** *    Number of bytes that have been read.
 615:RTT/SEGGER_RTT.c **** */
 616:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 671              		.loc 1 616 84 is_stmt 1 view -0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 0
 674              		@ frame_needed = 0, uses_anonymous_args = 0
 675              		.loc 1 616 84 is_stmt 0 view .LVU210
 676 0000 10B5     		push	{r4, lr}
 677              	.LCFI6:
 678              		.cfi_def_cfa_offset 8
 679              		.cfi_offset 4, -8
 680              		.cfi_offset 14, -4
 681 0002 0B46     		mov	r3, r1
 617:RTT/SEGGER_RTT.c ****   unsigned NumBytesRead;
 682              		.loc 1 617 3 is_stmt 1 view .LVU211
 683              	.LBB2:
 618:RTT/SEGGER_RTT.c ****   //
 619:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 684              		.loc 1 619 3 view .LVU212
 685              		.loc 1 619 3 view .LVU213
 686              		.syntax unified
 687              	@ 619 "RTT/SEGGER_RTT.c" 1
 688 0004 EFF31184 		mrs   r4, basepri  
 689 0008 4FF02001 		mov   r1, #32       
 690 000c 81F31188 		msr   basepri, r1  
 691              		
 692              	@ 0 "" 2
 693              	.LVL71:
 694              		.loc 1 619 20 view .LVU214
 620:RTT/SEGGER_RTT.c ****   //
 621:RTT/SEGGER_RTT.c ****   // Call the non-locking read function
 622:RTT/SEGGER_RTT.c ****   //
 623:RTT/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 695              		.loc 1 623 3 view .LVU215
 696              		.loc 1 623 18 is_stmt 0 view .LVU216
 697              		.thumb
 698              		.syntax unified
 699 0010 1946     		mov	r1, r3
 700 0012 FFF7FEFF 		bl	SEGGER_RTT_ReadNoLock
 701              	.LVL72:
 624:RTT/SEGGER_RTT.c ****   //
 625:RTT/SEGGER_RTT.c ****   // Finish up.
 626:RTT/SEGGER_RTT.c ****   //
 627:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 702              		.loc 1 627 3 is_stmt 1 view .LVU217
 703              		.syntax unified
 704              	@ 627 "RTT/SEGGER_RTT.c" 1
 705 0016 84F31188 		msr   basepri, r4  
 706              		
 707              	@ 0 "" 2
 708              		.thumb
 709              		.syntax unified
 710              	.LBE2:
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 27


 711              		.loc 1 627 22 view .LVU218
 628:RTT/SEGGER_RTT.c ****   //
 629:RTT/SEGGER_RTT.c ****   return NumBytesRead;
 712              		.loc 1 629 3 view .LVU219
 630:RTT/SEGGER_RTT.c **** }
 713              		.loc 1 630 1 is_stmt 0 view .LVU220
 714 001a 10BD     		pop	{r4, pc}
 715              		.loc 1 630 1 view .LVU221
 716              		.cfi_endproc
 717              	.LFE6:
 719              		.section	.text.SEGGER_RTT_WriteWithOverwriteNoLock,"ax",%progbits
 720              		.align	1
 721              		.global	SEGGER_RTT_WriteWithOverwriteNoLock
 722              		.syntax unified
 723              		.thumb
 724              		.thumb_func
 725              		.fpu fpv4-sp-d16
 727              	SEGGER_RTT_WriteWithOverwriteNoLock:
 728              	.LVL73:
 729              	.LFB7:
 631:RTT/SEGGER_RTT.c **** 
 632:RTT/SEGGER_RTT.c **** /*********************************************************************
 633:RTT/SEGGER_RTT.c **** *
 634:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteWithOverwriteNoLock
 635:RTT/SEGGER_RTT.c **** *
 636:RTT/SEGGER_RTT.c **** *  Function description
 637:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 638:RTT/SEGGER_RTT.c **** *    control block.
 639:RTT/SEGGER_RTT.c **** *    SEGGER_RTT_WriteWithOverwriteNoLock does not lock the application 
 640:RTT/SEGGER_RTT.c **** *    and overwrites data if the data does not fit into the buffer.
 641:RTT/SEGGER_RTT.c **** *
 642:RTT/SEGGER_RTT.c **** *  Parameters
 643:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 644:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 645:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 646:RTT/SEGGER_RTT.c **** *
 647:RTT/SEGGER_RTT.c **** *  Notes
 648:RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, data is overwritten.
 649:RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 650:RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 651:RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 652:RTT/SEGGER_RTT.c **** *    (3) Do not use SEGGER_RTT_WriteWithOverwriteNoLock if a J-Link 
 653:RTT/SEGGER_RTT.c **** *        connection reads RTT data.
 654:RTT/SEGGER_RTT.c **** */
 655:RTT/SEGGER_RTT.c **** void SEGGER_RTT_WriteWithOverwriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumByt
 730              		.loc 1 655 104 is_stmt 1 view -0
 731              		.cfi_startproc
 732              		@ args = 0, pretend = 0, frame = 0
 733              		@ frame_needed = 0, uses_anonymous_args = 0
 734              		.loc 1 655 104 is_stmt 0 view .LVU223
 735 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 736              	.LCFI7:
 737              		.cfi_def_cfa_offset 32
 738              		.cfi_offset 3, -32
 739              		.cfi_offset 4, -28
 740              		.cfi_offset 5, -24
 741              		.cfi_offset 6, -20
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 28


 742              		.cfi_offset 7, -16
 743              		.cfi_offset 8, -12
 744              		.cfi_offset 9, -8
 745              		.cfi_offset 14, -4
 746 0004 0646     		mov	r6, r0
 747 0006 8846     		mov	r8, r1
 748 0008 1746     		mov	r7, r2
 656:RTT/SEGGER_RTT.c ****   const char*           pData;
 749              		.loc 1 656 3 is_stmt 1 view .LVU224
 657:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 750              		.loc 1 657 3 view .LVU225
 658:RTT/SEGGER_RTT.c ****   unsigned              Avail;
 751              		.loc 1 658 3 view .LVU226
 659:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 660:RTT/SEGGER_RTT.c ****   char*                 pDst;
 661:RTT/SEGGER_RTT.c **** #endif
 662:RTT/SEGGER_RTT.c **** 
 663:RTT/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 752              		.loc 1 663 3 view .LVU227
 753              	.LVL74:
 664:RTT/SEGGER_RTT.c ****   //
 665:RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer and copy some elements into local variables.
 666:RTT/SEGGER_RTT.c ****   //
 667:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 754              		.loc 1 667 3 view .LVU228
 668:RTT/SEGGER_RTT.c ****   //
 669:RTT/SEGGER_RTT.c ****   // Check if we will overwrite data and need to adjust the RdOff.
 670:RTT/SEGGER_RTT.c ****   //
 671:RTT/SEGGER_RTT.c ****   if (pRing->WrOff == pRing->RdOff) {
 755              		.loc 1 671 3 view .LVU229
 756              		.loc 1 671 12 is_stmt 0 view .LVU230
 757 000a 00EB4002 		add	r2, r0, r0, lsl #1
 758              	.LVL75:
 759              		.loc 1 671 12 view .LVU231
 760 000e 3F4B     		ldr	r3, .L53
 761 0010 03EBC203 		add	r3, r3, r2, lsl #3
 762 0014 596A     		ldr	r1, [r3, #36]
 763              	.LVL76:
 764              		.loc 1 671 28 view .LVU232
 765 0016 9B6A     		ldr	r3, [r3, #40]
 766              		.loc 1 671 6 view .LVU233
 767 0018 9942     		cmp	r1, r3
 768 001a 0FD0     		beq	.L51
 672:RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 673:RTT/SEGGER_RTT.c ****   } else if ( pRing->WrOff < pRing->RdOff) {
 769              		.loc 1 673 10 is_stmt 1 view .LVU234
 770              		.loc 1 673 35 is_stmt 0 view .LVU235
 771 001c 00EB4003 		add	r3, r0, r0, lsl #1
 772 0020 3A4A     		ldr	r2, .L53
 773 0022 02EBC303 		add	r3, r2, r3, lsl #3
 774 0026 9B6A     		ldr	r3, [r3, #40]
 775              		.loc 1 673 13 view .LVU236
 776 0028 9942     		cmp	r1, r3
 777 002a 19D2     		bcs	.L43
 674:RTT/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u;
 778              		.loc 1 674 5 is_stmt 1 view .LVU237
 779              		.loc 1 674 18 is_stmt 0 view .LVU238
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 29


 780 002c 00EB4003 		add	r3, r0, r0, lsl #1
 781 0030 02EBC303 		add	r3, r2, r3, lsl #3
 782 0034 9B6A     		ldr	r3, [r3, #40]
 783              		.loc 1 674 26 view .LVU239
 784 0036 5B1A     		subs	r3, r3, r1
 785              		.loc 1 674 11 view .LVU240
 786 0038 013B     		subs	r3, r3, #1
 787              	.LVL77:
 788              		.loc 1 674 11 view .LVU241
 789 003a 05E0     		b	.L42
 790              	.LVL78:
 791              	.L51:
 672:RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 792              		.loc 1 672 5 is_stmt 1 view .LVU242
 672:RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 793              		.loc 1 672 18 is_stmt 0 view .LVU243
 794 003c 1346     		mov	r3, r2
 795 003e 334A     		ldr	r2, .L53
 796 0040 02EBC303 		add	r3, r2, r3, lsl #3
 797 0044 1B6A     		ldr	r3, [r3, #32]
 672:RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 798              		.loc 1 672 11 view .LVU244
 799 0046 013B     		subs	r3, r3, #1
 800              	.LVL79:
 801              	.L42:
 675:RTT/SEGGER_RTT.c ****   } else {
 676:RTT/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u + pRing->SizeOfBuffer;
 677:RTT/SEGGER_RTT.c ****   }
 678:RTT/SEGGER_RTT.c ****   if (NumBytes > Avail) {
 802              		.loc 1 678 3 is_stmt 1 view .LVU245
 803              		.loc 1 678 6 is_stmt 0 view .LVU246
 804 0048 BB42     		cmp	r3, r7
 805 004a 25D2     		bcs	.L44
 679:RTT/SEGGER_RTT.c ****     pRing->RdOff += (NumBytes - Avail);
 806              		.loc 1 679 5 is_stmt 1 view .LVU247
 807              		.loc 1 679 18 is_stmt 0 view .LVU248
 808 004c 06EB4602 		add	r2, r6, r6, lsl #1
 809 0050 2E48     		ldr	r0, .L53
 810              	.LVL80:
 811              		.loc 1 679 18 view .LVU249
 812 0052 00EBC202 		add	r2, r0, r2, lsl #3
 813 0056 906A     		ldr	r0, [r2, #40]
 814              		.loc 1 679 31 view .LVU250
 815 0058 FB1A     		subs	r3, r7, r3
 816              	.LVL81:
 817              		.loc 1 679 18 view .LVU251
 818 005a 0344     		add	r3, r3, r0
 819 005c 9362     		str	r3, [r2, #40]
 680:RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 820              		.loc 1 680 5 is_stmt 1 view .LVU252
 821              		.loc 1 680 11 is_stmt 0 view .LVU253
 822 005e 12E0     		b	.L45
 823              	.LVL82:
 824              	.L43:
 676:RTT/SEGGER_RTT.c ****   }
 825              		.loc 1 676 5 is_stmt 1 view .LVU254
 676:RTT/SEGGER_RTT.c ****   }
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 30


 826              		.loc 1 676 18 is_stmt 0 view .LVU255
 827 0060 00EB4002 		add	r2, r0, r0, lsl #1
 828 0064 294B     		ldr	r3, .L53
 829 0066 03EBC202 		add	r2, r3, r2, lsl #3
 830 006a 936A     		ldr	r3, [r2, #40]
 676:RTT/SEGGER_RTT.c ****   }
 831              		.loc 1 676 26 view .LVU256
 832 006c 5B1A     		subs	r3, r3, r1
 676:RTT/SEGGER_RTT.c ****   }
 833              		.loc 1 676 53 view .LVU257
 834 006e 126A     		ldr	r2, [r2, #32]
 676:RTT/SEGGER_RTT.c ****   }
 835              		.loc 1 676 46 view .LVU258
 836 0070 1344     		add	r3, r3, r2
 676:RTT/SEGGER_RTT.c ****   }
 837              		.loc 1 676 11 view .LVU259
 838 0072 013B     		subs	r3, r3, #1
 839              	.LVL83:
 676:RTT/SEGGER_RTT.c ****   }
 840              		.loc 1 676 11 view .LVU260
 841 0074 E8E7     		b	.L42
 842              	.LVL84:
 843              	.L46:
 681:RTT/SEGGER_RTT.c ****       pRing->RdOff -= pRing->SizeOfBuffer;
 844              		.loc 1 681 7 is_stmt 1 view .LVU261
 845              		.loc 1 681 20 is_stmt 0 view .LVU262
 846 0076 06EB4603 		add	r3, r6, r6, lsl #1
 847 007a 244A     		ldr	r2, .L53
 848 007c 02EBC303 		add	r3, r2, r3, lsl #3
 849 0080 9A6A     		ldr	r2, [r3, #40]
 850 0082 121A     		subs	r2, r2, r0
 851 0084 9A62     		str	r2, [r3, #40]
 852              	.L45:
 680:RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 853              		.loc 1 680 11 is_stmt 1 view .LVU263
 680:RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 854              		.loc 1 680 17 is_stmt 0 view .LVU264
 855 0086 06EB4603 		add	r3, r6, r6, lsl #1
 856 008a 204A     		ldr	r2, .L53
 857 008c 02EBC303 		add	r3, r2, r3, lsl #3
 858 0090 9A6A     		ldr	r2, [r3, #40]
 680:RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 859              		.loc 1 680 33 view .LVU265
 860 0092 186A     		ldr	r0, [r3, #32]
 680:RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 861              		.loc 1 680 11 view .LVU266
 862 0094 8242     		cmp	r2, r0
 863 0096 EED2     		bcs	.L46
 864              	.L44:
 682:RTT/SEGGER_RTT.c ****     }
 683:RTT/SEGGER_RTT.c ****   }
 684:RTT/SEGGER_RTT.c ****   //
 685:RTT/SEGGER_RTT.c ****   // Write all data, no need to check the RdOff, but possibly handle multiple wrap-arounds
 686:RTT/SEGGER_RTT.c ****   //
 687:RTT/SEGGER_RTT.c ****   Avail = pRing->SizeOfBuffer - pRing->WrOff;
 865              		.loc 1 687 3 is_stmt 1 view .LVU267
 866              		.loc 1 687 16 is_stmt 0 view .LVU268
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 31


 867 0098 06EB4603 		add	r3, r6, r6, lsl #1
 868 009c 1B4A     		ldr	r2, .L53
 869 009e 02EBC303 		add	r3, r2, r3, lsl #3
 870 00a2 1C6A     		ldr	r4, [r3, #32]
 871              		.loc 1 687 9 view .LVU269
 872 00a4 641A     		subs	r4, r4, r1
 873              	.LVL85:
 874              	.L49:
 688:RTT/SEGGER_RTT.c ****   do {
 875              		.loc 1 688 3 is_stmt 1 view .LVU270
 689:RTT/SEGGER_RTT.c ****     if (Avail > NumBytes) {
 876              		.loc 1 689 5 view .LVU271
 877              		.loc 1 689 8 is_stmt 0 view .LVU272
 878 00a6 A742     		cmp	r7, r4
 879 00a8 19D3     		bcc	.L52
 690:RTT/SEGGER_RTT.c ****       //
 691:RTT/SEGGER_RTT.c ****       // Last round
 692:RTT/SEGGER_RTT.c ****       //
 693:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 694:RTT/SEGGER_RTT.c ****       pDst = pRing->pBuffer + pRing->WrOff;
 695:RTT/SEGGER_RTT.c ****       Avail = NumBytes;
 696:RTT/SEGGER_RTT.c ****       while (NumBytes--) {
 697:RTT/SEGGER_RTT.c ****         *pDst++ = *pData++;
 698:RTT/SEGGER_RTT.c ****       };
 699:RTT/SEGGER_RTT.c ****       pRing->WrOff += Avail;
 700:RTT/SEGGER_RTT.c **** #else
 701:RTT/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY(pRing->pBuffer + pRing->WrOff, pData, NumBytes);
 702:RTT/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 703:RTT/SEGGER_RTT.c **** #endif
 704:RTT/SEGGER_RTT.c ****       break;
 705:RTT/SEGGER_RTT.c ****     } else {
 706:RTT/SEGGER_RTT.c ****       //
 707:RTT/SEGGER_RTT.c ****       //  Wrap-around necessary, write until wrap-around and reset WrOff
 708:RTT/SEGGER_RTT.c ****       //
 709:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 710:RTT/SEGGER_RTT.c ****       pDst = pRing->pBuffer + pRing->WrOff;
 711:RTT/SEGGER_RTT.c ****       NumBytes -= Avail;
 712:RTT/SEGGER_RTT.c ****       while (Avail--) {
 713:RTT/SEGGER_RTT.c ****         *pDst++ = *pData++;
 714:RTT/SEGGER_RTT.c ****       };
 715:RTT/SEGGER_RTT.c ****       pRing->WrOff = 0;
 716:RTT/SEGGER_RTT.c **** #else
 717:RTT/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY(pRing->pBuffer + pRing->WrOff, pData, Avail);
 880              		.loc 1 717 7 is_stmt 1 view .LVU273
 881 00aa 184D     		ldr	r5, .L53
 882 00ac 731C     		adds	r3, r6, #1
 883 00ae 03EB4303 		add	r3, r3, r3, lsl #1
 884 00b2 05EBC303 		add	r3, r5, r3, lsl #3
 885 00b6 5868     		ldr	r0, [r3, #4]
 886 00b8 06EB4603 		add	r3, r6, r6, lsl #1
 887 00bc 05EBC305 		add	r5, r5, r3, lsl #3
 888 00c0 6B6A     		ldr	r3, [r5, #36]
 889 00c2 2246     		mov	r2, r4
 890 00c4 4146     		mov	r1, r8
 891 00c6 1844     		add	r0, r0, r3
 892 00c8 FFF7FEFF 		bl	memcpy
 893              	.LVL86:
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 32


 718:RTT/SEGGER_RTT.c ****       pData += Avail;
 894              		.loc 1 718 7 view .LVU274
 895              		.loc 1 718 13 is_stmt 0 view .LVU275
 896 00cc A044     		add	r8, r8, r4
 897              	.LVL87:
 719:RTT/SEGGER_RTT.c ****       pRing->WrOff = 0;
 898              		.loc 1 719 7 is_stmt 1 view .LVU276
 899              		.loc 1 719 20 is_stmt 0 view .LVU277
 900 00ce 0023     		movs	r3, #0
 901 00d0 6B62     		str	r3, [r5, #36]
 720:RTT/SEGGER_RTT.c ****       NumBytes -= Avail;
 902              		.loc 1 720 7 is_stmt 1 view .LVU278
 903              		.loc 1 720 16 is_stmt 0 view .LVU279
 904 00d2 3F1B     		subs	r7, r7, r4
 905              	.LVL88:
 721:RTT/SEGGER_RTT.c **** #endif
 722:RTT/SEGGER_RTT.c ****       Avail = (pRing->SizeOfBuffer - 1);
 906              		.loc 1 722 7 is_stmt 1 view .LVU280
 907              		.loc 1 722 21 is_stmt 0 view .LVU281
 908 00d4 2C6A     		ldr	r4, [r5, #32]
 909              	.LVL89:
 910              		.loc 1 722 13 view .LVU282
 911 00d6 013C     		subs	r4, r4, #1
 912              	.LVL90:
 723:RTT/SEGGER_RTT.c ****     }
 724:RTT/SEGGER_RTT.c ****   } while (NumBytes);
 913              		.loc 1 724 11 is_stmt 1 view .LVU283
 914              		.loc 1 724 3 is_stmt 0 view .LVU284
 915 00d8 002F     		cmp	r7, #0
 916 00da E4D1     		bne	.L49
 917 00dc 13E0     		b	.L40
 918              	.L52:
 701:RTT/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 919              		.loc 1 701 7 is_stmt 1 view .LVU285
 920 00de 0B4C     		ldr	r4, .L53
 921              	.LVL91:
 701:RTT/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 922              		.loc 1 701 7 is_stmt 0 view .LVU286
 923 00e0 731C     		adds	r3, r6, #1
 924 00e2 03EB4303 		add	r3, r3, r3, lsl #1
 925 00e6 04EBC303 		add	r3, r4, r3, lsl #3
 926 00ea 5868     		ldr	r0, [r3, #4]
 927 00ec 06EB4605 		add	r5, r6, r6, lsl #1
 928 00f0 04EBC505 		add	r5, r4, r5, lsl #3
 929 00f4 6B6A     		ldr	r3, [r5, #36]
 930 00f6 3A46     		mov	r2, r7
 931 00f8 4146     		mov	r1, r8
 932 00fa 1844     		add	r0, r0, r3
 933 00fc FFF7FEFF 		bl	memcpy
 934              	.LVL92:
 702:RTT/SEGGER_RTT.c **** #endif
 935              		.loc 1 702 7 is_stmt 1 view .LVU287
 702:RTT/SEGGER_RTT.c **** #endif
 936              		.loc 1 702 20 is_stmt 0 view .LVU288
 937 0100 6B6A     		ldr	r3, [r5, #36]
 938 0102 1F44     		add	r7, r7, r3
 939              	.LVL93:
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 33


 702:RTT/SEGGER_RTT.c **** #endif
 940              		.loc 1 702 20 view .LVU289
 941 0104 6F62     		str	r7, [r5, #36]
 704:RTT/SEGGER_RTT.c ****     } else {
 942              		.loc 1 704 7 is_stmt 1 view .LVU290
 943              	.L40:
 725:RTT/SEGGER_RTT.c **** }
 944              		.loc 1 725 1 is_stmt 0 view .LVU291
 945 0106 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 946              	.LVL94:
 947              	.L54:
 948              		.loc 1 725 1 view .LVU292
 949 010a 00BF     		.align	2
 950              	.L53:
 951 010c 00000000 		.word	.LANCHOR1
 952              		.cfi_endproc
 953              	.LFE7:
 955              		.section	.text.SEGGER_RTT_WriteSkipNoLock,"ax",%progbits
 956              		.align	1
 957              		.global	SEGGER_RTT_WriteSkipNoLock
 958              		.syntax unified
 959              		.thumb
 960              		.thumb_func
 961              		.fpu fpv4-sp-d16
 963              	SEGGER_RTT_WriteSkipNoLock:
 964              	.LVL95:
 965              	.LFB8:
 726:RTT/SEGGER_RTT.c **** 
 727:RTT/SEGGER_RTT.c **** /*********************************************************************
 728:RTT/SEGGER_RTT.c **** *
 729:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteSkipNoLock
 730:RTT/SEGGER_RTT.c **** *
 731:RTT/SEGGER_RTT.c **** *  Function description
 732:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 733:RTT/SEGGER_RTT.c **** *    control block which is then read by the host.
 734:RTT/SEGGER_RTT.c **** *    SEGGER_RTT_WriteSkipNoLock does not lock the application and
 735:RTT/SEGGER_RTT.c **** *    skips all data, if the data does not fit into the buffer.
 736:RTT/SEGGER_RTT.c **** *
 737:RTT/SEGGER_RTT.c **** *  Parameters
 738:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 739:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 740:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 741:RTT/SEGGER_RTT.c **** *
 742:RTT/SEGGER_RTT.c **** *  Return value
 743:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
 744:RTT/SEGGER_RTT.c **** *
 745:RTT/SEGGER_RTT.c **** *  Notes
 746:RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
 747:RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 748:RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 749:RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 750:RTT/SEGGER_RTT.c **** */
 751:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 966              		.loc 1 751 99 is_stmt 1 view -0
 967              		.cfi_startproc
 968              		@ args = 0, pretend = 0, frame = 8
 969              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 34


 970              		.loc 1 751 99 is_stmt 0 view .LVU294
 971 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 972              	.LCFI8:
 973              		.cfi_def_cfa_offset 36
 974              		.cfi_offset 4, -36
 975              		.cfi_offset 5, -32
 976              		.cfi_offset 6, -28
 977              		.cfi_offset 7, -24
 978              		.cfi_offset 8, -20
 979              		.cfi_offset 9, -16
 980              		.cfi_offset 10, -12
 981              		.cfi_offset 11, -8
 982              		.cfi_offset 14, -4
 983 0004 83B0     		sub	sp, sp, #12
 984              	.LCFI9:
 985              		.cfi_def_cfa_offset 48
 986 0006 0446     		mov	r4, r0
 987 0008 0F46     		mov	r7, r1
 988 000a 1546     		mov	r5, r2
 752:RTT/SEGGER_RTT.c ****   const char*           pData;
 989              		.loc 1 752 3 is_stmt 1 view .LVU295
 753:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 990              		.loc 1 753 3 view .LVU296
 754:RTT/SEGGER_RTT.c ****   unsigned              Avail;
 991              		.loc 1 754 3 view .LVU297
 755:RTT/SEGGER_RTT.c ****   unsigned              RdOff;
 992              		.loc 1 755 3 view .LVU298
 756:RTT/SEGGER_RTT.c ****   unsigned              WrOff;
 993              		.loc 1 756 3 view .LVU299
 757:RTT/SEGGER_RTT.c ****   unsigned              Rem;
 994              		.loc 1 757 3 view .LVU300
 758:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 759:RTT/SEGGER_RTT.c ****   char*                 pDst;
 760:RTT/SEGGER_RTT.c **** #endif
 761:RTT/SEGGER_RTT.c **** 
 762:RTT/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 995              		.loc 1 762 3 view .LVU301
 996              	.LVL96:
 763:RTT/SEGGER_RTT.c ****   //
 764:RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer and copy some elements into local variables.
 765:RTT/SEGGER_RTT.c ****   //
 766:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 997              		.loc 1 766 3 view .LVU302
 767:RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 998              		.loc 1 767 3 view .LVU303
 999              		.loc 1 767 9 is_stmt 0 view .LVU304
 1000 000c 00EB4003 		add	r3, r0, r0, lsl #1
 1001 0010 434A     		ldr	r2, .L67
 1002              	.LVL97:
 1003              		.loc 1 767 9 view .LVU305
 1004 0012 02EBC302 		add	r2, r2, r3, lsl #3
 1005 0016 936A     		ldr	r3, [r2, #40]
 1006              	.LVL98:
 768:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 1007              		.loc 1 768 3 is_stmt 1 view .LVU306
 1008              		.loc 1 768 9 is_stmt 0 view .LVU307
 1009 0018 566A     		ldr	r6, [r2, #36]
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 35


 1010              	.LVL99:
 769:RTT/SEGGER_RTT.c ****   //
 770:RTT/SEGGER_RTT.c ****   // Handle the most common cases fastest.
 771:RTT/SEGGER_RTT.c ****   // Which is:
 772:RTT/SEGGER_RTT.c ****   //    RdOff <= WrOff -> Space until wrap around is free.
 773:RTT/SEGGER_RTT.c ****   //  AND
 774:RTT/SEGGER_RTT.c ****   //    WrOff + NumBytes < SizeOfBuffer -> No Wrap around necessary.
 775:RTT/SEGGER_RTT.c ****   //
 776:RTT/SEGGER_RTT.c ****   //  OR
 777:RTT/SEGGER_RTT.c ****   //
 778:RTT/SEGGER_RTT.c ****   //    RdOff > WrOff -> Space until RdOff - 1 is free.
 779:RTT/SEGGER_RTT.c ****   //  AND
 780:RTT/SEGGER_RTT.c ****   //    WrOff + NumBytes < RdOff -> Data fits into buffer
 781:RTT/SEGGER_RTT.c ****   //
 782:RTT/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 1011              		.loc 1 782 3 is_stmt 1 view .LVU308
 1012              		.loc 1 782 6 is_stmt 0 view .LVU309
 1013 001a B342     		cmp	r3, r6
 1014 001c 64D8     		bhi	.L56
 783:RTT/SEGGER_RTT.c ****     //
 784:RTT/SEGGER_RTT.c ****     // Get space until WrOff will be at wrap around.
 785:RTT/SEGGER_RTT.c ****     //
 786:RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 1015              		.loc 1 786 5 is_stmt 1 view .LVU310
 1016              		.loc 1 786 18 is_stmt 0 view .LVU311
 1017 001e 00EB4002 		add	r2, r0, r0, lsl #1
 1018 0022 3F49     		ldr	r1, .L67
 1019              	.LVL100:
 1020              		.loc 1 786 18 view .LVU312
 1021 0024 01EBC202 		add	r2, r1, r2, lsl #3
 1022 0028 D2F82080 		ldr	r8, [r2, #32]
 1023              		.loc 1 786 38 view .LVU313
 1024 002c A8EB0609 		sub	r9, r8, r6
 1025              		.loc 1 786 11 view .LVU314
 1026 0030 09F1FF32 		add	r2, r9, #-1
 1027              	.LVL101:
 787:RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {
 1028              		.loc 1 787 5 is_stmt 1 view .LVU315
 1029              		.loc 1 787 8 is_stmt 0 view .LVU316
 1030 0034 9542     		cmp	r5, r2
 1031 0036 04D9     		bls	.L64
 788:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 789:RTT/SEGGER_RTT.c ****       pDst = pRing->pBuffer + WrOff;
 790:RTT/SEGGER_RTT.c ****       WrOff += NumBytes;
 791:RTT/SEGGER_RTT.c ****       while (NumBytes--) {
 792:RTT/SEGGER_RTT.c ****         *pDst++ = *pData++;
 793:RTT/SEGGER_RTT.c ****       };
 794:RTT/SEGGER_RTT.c ****       pRing->WrOff = WrOff;
 795:RTT/SEGGER_RTT.c **** #else
 796:RTT/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 797:RTT/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 798:RTT/SEGGER_RTT.c **** #endif
 799:RTT/SEGGER_RTT.c ****       return 1;
 800:RTT/SEGGER_RTT.c ****     }
 801:RTT/SEGGER_RTT.c ****     //
 802:RTT/SEGGER_RTT.c ****     // If data did not fit into space until wrap around calculate complete space in buffer.
 803:RTT/SEGGER_RTT.c ****     //
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 36


 804:RTT/SEGGER_RTT.c ****     Avail += RdOff;
 1032              		.loc 1 804 5 is_stmt 1 view .LVU317
 1033              		.loc 1 804 11 is_stmt 0 view .LVU318
 1034 0038 1344     		add	r3, r3, r2
 1035              	.LVL102:
 805:RTT/SEGGER_RTT.c ****     //
 806:RTT/SEGGER_RTT.c ****     // If there is still no space for the whole of this output, don't bother.
 807:RTT/SEGGER_RTT.c ****     //
 808:RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {
 1036              		.loc 1 808 5 is_stmt 1 view .LVU319
 1037              		.loc 1 808 8 is_stmt 0 view .LVU320
 1038 003a 9D42     		cmp	r5, r3
 1039 003c 16D9     		bls	.L65
 809:RTT/SEGGER_RTT.c ****       //
 810:RTT/SEGGER_RTT.c ****       //  OK, we have enough space in buffer. Copy in one or 2 chunks
 811:RTT/SEGGER_RTT.c ****       //
 812:RTT/SEGGER_RTT.c ****       Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 813:RTT/SEGGER_RTT.c ****       if (Rem > NumBytes) {
 814:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 815:RTT/SEGGER_RTT.c ****         pDst = pRing->pBuffer + WrOff;
 816:RTT/SEGGER_RTT.c ****         WrOff += NumBytes;
 817:RTT/SEGGER_RTT.c ****         while (NumBytes--) {
 818:RTT/SEGGER_RTT.c ****           *pDst++ = *pData++;
 819:RTT/SEGGER_RTT.c ****         };
 820:RTT/SEGGER_RTT.c ****         pRing->WrOff = WrOff;
 821:RTT/SEGGER_RTT.c **** #else
 822:RTT/SEGGER_RTT.c ****         SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 823:RTT/SEGGER_RTT.c ****         pRing->WrOff = WrOff + NumBytes;
 824:RTT/SEGGER_RTT.c **** #endif
 825:RTT/SEGGER_RTT.c ****       } else {
 826:RTT/SEGGER_RTT.c ****         //
 827:RTT/SEGGER_RTT.c ****         // We reach the end of the buffer, so need to wrap around
 828:RTT/SEGGER_RTT.c ****         //
 829:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 830:RTT/SEGGER_RTT.c ****         pDst = pRing->pBuffer + WrOff;
 831:RTT/SEGGER_RTT.c ****         NumBytes -= Rem;
 832:RTT/SEGGER_RTT.c ****         WrOff = NumBytes;
 833:RTT/SEGGER_RTT.c ****         do {
 834:RTT/SEGGER_RTT.c ****           *pDst++ = *pData++;
 835:RTT/SEGGER_RTT.c ****         } while (--Rem);
 836:RTT/SEGGER_RTT.c ****         pDst = pRing->pBuffer;
 837:RTT/SEGGER_RTT.c ****         while (NumBytes--) {
 838:RTT/SEGGER_RTT.c ****           *pDst++ = *pData++;
 839:RTT/SEGGER_RTT.c ****         };
 840:RTT/SEGGER_RTT.c ****         pRing->WrOff = WrOff;
 841:RTT/SEGGER_RTT.c **** #else
 842:RTT/SEGGER_RTT.c ****         SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 843:RTT/SEGGER_RTT.c ****         SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 844:RTT/SEGGER_RTT.c ****         pRing->WrOff = NumBytes - Rem;
 845:RTT/SEGGER_RTT.c **** #endif
 846:RTT/SEGGER_RTT.c ****       }
 847:RTT/SEGGER_RTT.c ****       return 1;
 848:RTT/SEGGER_RTT.c ****     }
 849:RTT/SEGGER_RTT.c ****   } else {
 850:RTT/SEGGER_RTT.c ****     Avail = RdOff - WrOff - 1u;
 851:RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {
 852:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 37


 853:RTT/SEGGER_RTT.c ****       pDst = pRing->pBuffer + WrOff;
 854:RTT/SEGGER_RTT.c ****       WrOff += NumBytes;
 855:RTT/SEGGER_RTT.c ****       while (NumBytes--) {
 856:RTT/SEGGER_RTT.c ****         *pDst++ = *pData++;
 857:RTT/SEGGER_RTT.c ****       };
 858:RTT/SEGGER_RTT.c ****       pRing->WrOff = WrOff;
 859:RTT/SEGGER_RTT.c **** #else
 860:RTT/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 861:RTT/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 862:RTT/SEGGER_RTT.c **** #endif
 863:RTT/SEGGER_RTT.c ****       return 1;
 864:RTT/SEGGER_RTT.c ****     }
 865:RTT/SEGGER_RTT.c ****   }
 866:RTT/SEGGER_RTT.c ****   //
 867:RTT/SEGGER_RTT.c ****   // If we reach this point no data has been written
 868:RTT/SEGGER_RTT.c ****   //
 869:RTT/SEGGER_RTT.c ****   return 0;
 1040              		.loc 1 869 10 view .LVU321
 1041 003e 0020     		movs	r0, #0
 1042              	.LVL103:
 1043              		.loc 1 869 10 view .LVU322
 1044 0040 57E0     		b	.L55
 1045              	.LVL104:
 1046              	.L64:
 796:RTT/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 1047              		.loc 1 796 7 is_stmt 1 view .LVU323
 1048 0042 8846     		mov	r8, r1
 1049 0044 431C     		adds	r3, r0, #1
 1050              	.LVL105:
 796:RTT/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 1051              		.loc 1 796 7 is_stmt 0 view .LVU324
 1052 0046 03EB4303 		add	r3, r3, r3, lsl #1
 1053 004a 01EBC303 		add	r3, r1, r3, lsl #3
 1054 004e 5868     		ldr	r0, [r3, #4]
 1055              	.LVL106:
 796:RTT/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 1056              		.loc 1 796 7 view .LVU325
 1057 0050 2A46     		mov	r2, r5
 1058              	.LVL107:
 796:RTT/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 1059              		.loc 1 796 7 view .LVU326
 1060 0052 3946     		mov	r1, r7
 1061 0054 3044     		add	r0, r0, r6
 1062 0056 FFF7FEFF 		bl	memcpy
 1063              	.LVL108:
 797:RTT/SEGGER_RTT.c **** #endif
 1064              		.loc 1 797 7 is_stmt 1 view .LVU327
 797:RTT/SEGGER_RTT.c **** #endif
 1065              		.loc 1 797 28 is_stmt 0 view .LVU328
 1066 005a 3544     		add	r5, r5, r6
 1067              	.LVL109:
 797:RTT/SEGGER_RTT.c **** #endif
 1068              		.loc 1 797 20 view .LVU329
 1069 005c 04EB4404 		add	r4, r4, r4, lsl #1
 1070              	.LVL110:
 797:RTT/SEGGER_RTT.c **** #endif
 1071              		.loc 1 797 20 view .LVU330
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 38


 1072 0060 08EBC408 		add	r8, r8, r4, lsl #3
 1073 0064 C8F82450 		str	r5, [r8, #36]
 799:RTT/SEGGER_RTT.c ****     }
 1074              		.loc 1 799 7 is_stmt 1 view .LVU331
 799:RTT/SEGGER_RTT.c ****     }
 1075              		.loc 1 799 14 is_stmt 0 view .LVU332
 1076 0068 0120     		movs	r0, #1
 1077 006a 42E0     		b	.L55
 1078              	.LVL111:
 1079              	.L65:
 812:RTT/SEGGER_RTT.c ****       if (Rem > NumBytes) {
 1080              		.loc 1 812 7 is_stmt 1 view .LVU333
 813:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1081              		.loc 1 813 7 view .LVU334
 813:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1082              		.loc 1 813 10 is_stmt 0 view .LVU335
 1083 006c A945     		cmp	r9, r5
 1084 006e 15D9     		bls	.L59
 822:RTT/SEGGER_RTT.c ****         pRing->WrOff = WrOff + NumBytes;
 1085              		.loc 1 822 9 is_stmt 1 view .LVU336
 1086 0070 DFF8AC80 		ldr	r8, .L67
 1087 0074 431C     		adds	r3, r0, #1
 1088              	.LVL112:
 822:RTT/SEGGER_RTT.c ****         pRing->WrOff = WrOff + NumBytes;
 1089              		.loc 1 822 9 is_stmt 0 view .LVU337
 1090 0076 03EB4303 		add	r3, r3, r3, lsl #1
 1091 007a 08EBC303 		add	r3, r8, r3, lsl #3
 1092 007e 5868     		ldr	r0, [r3, #4]
 1093              	.LVL113:
 822:RTT/SEGGER_RTT.c ****         pRing->WrOff = WrOff + NumBytes;
 1094              		.loc 1 822 9 view .LVU338
 1095 0080 2A46     		mov	r2, r5
 1096 0082 3946     		mov	r1, r7
 1097 0084 3044     		add	r0, r0, r6
 1098 0086 FFF7FEFF 		bl	memcpy
 1099              	.LVL114:
 823:RTT/SEGGER_RTT.c **** #endif
 1100              		.loc 1 823 9 is_stmt 1 view .LVU339
 823:RTT/SEGGER_RTT.c **** #endif
 1101              		.loc 1 823 30 is_stmt 0 view .LVU340
 1102 008a 3544     		add	r5, r5, r6
 1103              	.LVL115:
 823:RTT/SEGGER_RTT.c **** #endif
 1104              		.loc 1 823 22 view .LVU341
 1105 008c 04EB4404 		add	r4, r4, r4, lsl #1
 1106              	.LVL116:
 823:RTT/SEGGER_RTT.c **** #endif
 1107              		.loc 1 823 22 view .LVU342
 1108 0090 08EBC408 		add	r8, r8, r4, lsl #3
 1109 0094 C8F82450 		str	r5, [r8, #36]
 1110              	.LVL117:
 1111              	.L60:
 847:RTT/SEGGER_RTT.c ****     }
 1112              		.loc 1 847 7 is_stmt 1 view .LVU343
 847:RTT/SEGGER_RTT.c ****     }
 1113              		.loc 1 847 14 is_stmt 0 view .LVU344
 1114 0098 0120     		movs	r0, #1
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 39


 1115 009a 2AE0     		b	.L55
 1116              	.LVL118:
 1117              	.L59:
 842:RTT/SEGGER_RTT.c ****         SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 1118              		.loc 1 842 9 is_stmt 1 view .LVU345
 1119 009c DFF880A0 		ldr	r10, .L67
 1120 00a0 00F1010B 		add	fp, r0, #1
 1121 00a4 4FEA4B03 		lsl	r3, fp, #1
 1122              	.LVL119:
 842:RTT/SEGGER_RTT.c ****         SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 1123              		.loc 1 842 9 is_stmt 0 view .LVU346
 1124 00a8 0193     		str	r3, [sp, #4]
 1125 00aa 0BEB4B03 		add	r3, fp, fp, lsl #1
 1126 00ae 0AEBC303 		add	r3, r10, r3, lsl #3
 1127 00b2 5868     		ldr	r0, [r3, #4]
 1128              	.LVL120:
 842:RTT/SEGGER_RTT.c ****         SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 1129              		.loc 1 842 9 view .LVU347
 1130 00b4 4A46     		mov	r2, r9
 1131 00b6 3946     		mov	r1, r7
 1132 00b8 3044     		add	r0, r0, r6
 1133 00ba FFF7FEFF 		bl	memcpy
 1134              	.LVL121:
 843:RTT/SEGGER_RTT.c ****         pRing->WrOff = NumBytes - Rem;
 1135              		.loc 1 843 9 is_stmt 1 view .LVU348
 1136 00be 019B     		ldr	r3, [sp, #4]
 1137 00c0 9B44     		add	fp, fp, r3
 1138 00c2 0AEBCB0B 		add	fp, r10, fp, lsl #3
 1139 00c6 A6EB0806 		sub	r6, r6, r8
 1140              	.LVL122:
 843:RTT/SEGGER_RTT.c ****         pRing->WrOff = NumBytes - Rem;
 1141              		.loc 1 843 9 is_stmt 0 view .LVU349
 1142 00ca 3544     		add	r5, r5, r6
 1143              	.LVL123:
 843:RTT/SEGGER_RTT.c ****         pRing->WrOff = NumBytes - Rem;
 1144              		.loc 1 843 9 view .LVU350
 1145 00cc 2A46     		mov	r2, r5
 1146 00ce 07EB0901 		add	r1, r7, r9
 1147 00d2 DBF80400 		ldr	r0, [fp, #4]
 1148 00d6 FFF7FEFF 		bl	memcpy
 1149              	.LVL124:
 844:RTT/SEGGER_RTT.c **** #endif
 1150              		.loc 1 844 9 is_stmt 1 view .LVU351
 844:RTT/SEGGER_RTT.c **** #endif
 1151              		.loc 1 844 22 is_stmt 0 view .LVU352
 1152 00da 04EB4404 		add	r4, r4, r4, lsl #1
 1153              	.LVL125:
 844:RTT/SEGGER_RTT.c **** #endif
 1154              		.loc 1 844 22 view .LVU353
 1155 00de 0AEBC40A 		add	r10, r10, r4, lsl #3
 1156 00e2 CAF82450 		str	r5, [r10, #36]
 1157 00e6 D7E7     		b	.L60
 1158              	.LVL126:
 1159              	.L56:
 850:RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {
 1160              		.loc 1 850 5 is_stmt 1 view .LVU354
 850:RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 40


 1161              		.loc 1 850 19 is_stmt 0 view .LVU355
 1162 00e8 9B1B     		subs	r3, r3, r6
 1163              	.LVL127:
 850:RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {
 1164              		.loc 1 850 11 view .LVU356
 1165 00ea 013B     		subs	r3, r3, #1
 1166              	.LVL128:
 851:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1167              		.loc 1 851 5 is_stmt 1 view .LVU357
 851:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1168              		.loc 1 851 8 is_stmt 0 view .LVU358
 1169 00ec AB42     		cmp	r3, r5
 1170 00ee 03D2     		bcs	.L66
 1171              		.loc 1 869 10 view .LVU359
 1172 00f0 0020     		movs	r0, #0
 1173              	.LVL129:
 1174              	.L55:
 870:RTT/SEGGER_RTT.c **** }
 1175              		.loc 1 870 1 view .LVU360
 1176 00f2 03B0     		add	sp, sp, #12
 1177              	.LCFI10:
 1178              		.cfi_remember_state
 1179              		.cfi_def_cfa_offset 36
 1180              		@ sp needed
 1181 00f4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1182              	.LVL130:
 1183              	.L66:
 1184              	.LCFI11:
 1185              		.cfi_restore_state
 860:RTT/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 1186              		.loc 1 860 7 is_stmt 1 view .LVU361
 1187 00f8 DFF82480 		ldr	r8, .L67
 1188 00fc 431C     		adds	r3, r0, #1
 1189              	.LVL131:
 860:RTT/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 1190              		.loc 1 860 7 is_stmt 0 view .LVU362
 1191 00fe 03EB4303 		add	r3, r3, r3, lsl #1
 1192 0102 08EBC303 		add	r3, r8, r3, lsl #3
 1193 0106 5868     		ldr	r0, [r3, #4]
 1194              	.LVL132:
 860:RTT/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 1195              		.loc 1 860 7 view .LVU363
 1196 0108 2A46     		mov	r2, r5
 1197 010a 3044     		add	r0, r0, r6
 1198 010c FFF7FEFF 		bl	memcpy
 1199              	.LVL133:
 861:RTT/SEGGER_RTT.c **** #endif
 1200              		.loc 1 861 7 is_stmt 1 view .LVU364
 861:RTT/SEGGER_RTT.c **** #endif
 1201              		.loc 1 861 28 is_stmt 0 view .LVU365
 1202 0110 3544     		add	r5, r5, r6
 1203              	.LVL134:
 861:RTT/SEGGER_RTT.c **** #endif
 1204              		.loc 1 861 20 view .LVU366
 1205 0112 04EB4404 		add	r4, r4, r4, lsl #1
 1206              	.LVL135:
 861:RTT/SEGGER_RTT.c **** #endif
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 41


 1207              		.loc 1 861 20 view .LVU367
 1208 0116 08EBC404 		add	r4, r8, r4, lsl #3
 1209 011a 6562     		str	r5, [r4, #36]
 863:RTT/SEGGER_RTT.c ****     }
 1210              		.loc 1 863 7 is_stmt 1 view .LVU368
 863:RTT/SEGGER_RTT.c ****     }
 1211              		.loc 1 863 14 is_stmt 0 view .LVU369
 1212 011c 0120     		movs	r0, #1
 1213 011e E8E7     		b	.L55
 1214              	.L68:
 1215              		.align	2
 1216              	.L67:
 1217 0120 00000000 		.word	.LANCHOR1
 1218              		.cfi_endproc
 1219              	.LFE8:
 1221              		.section	.text.SEGGER_RTT_WriteNoLock,"ax",%progbits
 1222              		.align	1
 1223              		.global	SEGGER_RTT_WriteNoLock
 1224              		.syntax unified
 1225              		.thumb
 1226              		.thumb_func
 1227              		.fpu fpv4-sp-d16
 1229              	SEGGER_RTT_WriteNoLock:
 1230              	.LVL136:
 1231              	.LFB9:
 871:RTT/SEGGER_RTT.c **** 
 872:RTT/SEGGER_RTT.c **** /*********************************************************************
 873:RTT/SEGGER_RTT.c **** *
 874:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteNoLock
 875:RTT/SEGGER_RTT.c **** *
 876:RTT/SEGGER_RTT.c **** *  Function description
 877:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 878:RTT/SEGGER_RTT.c **** *    control block which is then read by the host.
 879:RTT/SEGGER_RTT.c **** *    SEGGER_RTT_WriteNoLock does not lock the application.
 880:RTT/SEGGER_RTT.c **** *
 881:RTT/SEGGER_RTT.c **** *  Parameters
 882:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 883:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 884:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 885:RTT/SEGGER_RTT.c **** *
 886:RTT/SEGGER_RTT.c **** *  Return value
 887:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
 888:RTT/SEGGER_RTT.c **** *
 889:RTT/SEGGER_RTT.c **** *  Notes
 890:RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
 891:RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 892:RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 893:RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 894:RTT/SEGGER_RTT.c **** */
 895:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1232              		.loc 1 895 95 is_stmt 1 view -0
 1233              		.cfi_startproc
 1234              		@ args = 0, pretend = 0, frame = 0
 1235              		@ frame_needed = 0, uses_anonymous_args = 0
 1236              		.loc 1 895 95 is_stmt 0 view .LVU371
 1237 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1238              	.LCFI12:
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 42


 1239              		.cfi_def_cfa_offset 24
 1240              		.cfi_offset 3, -24
 1241              		.cfi_offset 4, -20
 1242              		.cfi_offset 5, -16
 1243              		.cfi_offset 6, -12
 1244              		.cfi_offset 7, -8
 1245              		.cfi_offset 14, -4
 1246 0002 0F46     		mov	r7, r1
 1247 0004 1646     		mov	r6, r2
 896:RTT/SEGGER_RTT.c ****   unsigned              Status;
 1248              		.loc 1 896 3 is_stmt 1 view .LVU372
 897:RTT/SEGGER_RTT.c ****   unsigned              Avail;
 1249              		.loc 1 897 3 view .LVU373
 898:RTT/SEGGER_RTT.c ****   const char*           pData;
 1250              		.loc 1 898 3 view .LVU374
 899:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1251              		.loc 1 899 3 view .LVU375
 900:RTT/SEGGER_RTT.c **** 
 901:RTT/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1252              		.loc 1 901 3 view .LVU376
 1253              	.LVL137:
 902:RTT/SEGGER_RTT.c ****   //
 903:RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
 904:RTT/SEGGER_RTT.c ****   //
 905:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1254              		.loc 1 905 3 view .LVU377
 1255              		.loc 1 905 9 is_stmt 0 view .LVU378
 1256 0006 184B     		ldr	r3, .L76
 1257 0008 451C     		adds	r5, r0, #1
 1258 000a 05EB4505 		add	r5, r5, r5, lsl #1
 1259 000e 03EBC505 		add	r5, r3, r5, lsl #3
 1260              	.LVL138:
 906:RTT/SEGGER_RTT.c ****   //
 907:RTT/SEGGER_RTT.c ****   // How we output depends upon the mode...
 908:RTT/SEGGER_RTT.c ****   //
 909:RTT/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1261              		.loc 1 909 3 is_stmt 1 view .LVU379
 1262              		.loc 1 909 16 is_stmt 0 view .LVU380
 1263 0012 00EB4000 		add	r0, r0, r0, lsl #1
 1264              	.LVL139:
 1265              		.loc 1 909 16 view .LVU381
 1266 0016 03EBC000 		add	r0, r3, r0, lsl #3
 1267 001a C46A     		ldr	r4, [r0, #44]
 1268              		.loc 1 909 3 view .LVU382
 1269 001c 012C     		cmp	r4, #1
 1270 001e 11D0     		beq	.L70
 1271 0020 022C     		cmp	r4, #2
 1272 0022 1CD0     		beq	.L71
 1273 0024 14B1     		cbz	r4, .L75
 1274 0026 0024     		movs	r4, #0
 1275              	.LVL140:
 910:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
 911:RTT/SEGGER_RTT.c ****     //
 912:RTT/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
 913:RTT/SEGGER_RTT.c ****     // of this output, don't bother.
 914:RTT/SEGGER_RTT.c ****     //
 915:RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 43


 916:RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 917:RTT/SEGGER_RTT.c ****       Status = 0u;
 918:RTT/SEGGER_RTT.c ****     } else {
 919:RTT/SEGGER_RTT.c ****       Status = NumBytes;
 920:RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 921:RTT/SEGGER_RTT.c ****     }
 922:RTT/SEGGER_RTT.c ****     break;
 923:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
 924:RTT/SEGGER_RTT.c ****     //
 925:RTT/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
 926:RTT/SEGGER_RTT.c ****     //
 927:RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 928:RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 929:RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 930:RTT/SEGGER_RTT.c ****     break;
 931:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 932:RTT/SEGGER_RTT.c ****     //
 933:RTT/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
 934:RTT/SEGGER_RTT.c ****     //
 935:RTT/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
 936:RTT/SEGGER_RTT.c ****     break;
 937:RTT/SEGGER_RTT.c ****   default:
 938:RTT/SEGGER_RTT.c ****     Status = 0u;
 939:RTT/SEGGER_RTT.c ****     break;
 940:RTT/SEGGER_RTT.c ****   }
 941:RTT/SEGGER_RTT.c ****   //
 942:RTT/SEGGER_RTT.c ****   // Finish up.
 943:RTT/SEGGER_RTT.c ****   //
 944:RTT/SEGGER_RTT.c ****   return Status;
 1276              		.loc 1 944 3 is_stmt 1 view .LVU383
 1277              	.L69:
 945:RTT/SEGGER_RTT.c **** }
 1278              		.loc 1 945 1 is_stmt 0 view .LVU384
 1279 0028 2046     		mov	r0, r4
 1280 002a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1281              	.LVL141:
 1282              	.L75:
 915:RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1283              		.loc 1 915 5 is_stmt 1 view .LVU385
 915:RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1284              		.loc 1 915 13 is_stmt 0 view .LVU386
 1285 002c 2846     		mov	r0, r5
 1286 002e FFF7FEFF 		bl	_GetAvailWriteSpace
 1287              	.LVL142:
 916:RTT/SEGGER_RTT.c ****       Status = 0u;
 1288              		.loc 1 916 5 is_stmt 1 view .LVU387
 916:RTT/SEGGER_RTT.c ****       Status = 0u;
 1289              		.loc 1 916 8 is_stmt 0 view .LVU388
 1290 0032 8642     		cmp	r6, r0
 1291 0034 F8D8     		bhi	.L69
 919:RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1292              		.loc 1 919 7 is_stmt 1 view .LVU389
 1293              	.LVL143:
 920:RTT/SEGGER_RTT.c ****     }
 1294              		.loc 1 920 7 view .LVU390
 1295 0036 3246     		mov	r2, r6
 1296 0038 3946     		mov	r1, r7
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 44


 1297 003a 2846     		mov	r0, r5
 1298              	.LVL144:
 920:RTT/SEGGER_RTT.c ****     }
 1299              		.loc 1 920 7 is_stmt 0 view .LVU391
 1300 003c FFF7FEFF 		bl	_WriteNoCheck
 1301              	.LVL145:
 919:RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1302              		.loc 1 919 14 view .LVU392
 1303 0040 3446     		mov	r4, r6
 1304 0042 F1E7     		b	.L69
 1305              	.LVL146:
 1306              	.L70:
 927:RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1307              		.loc 1 927 5 is_stmt 1 view .LVU393
 927:RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1308              		.loc 1 927 13 is_stmt 0 view .LVU394
 1309 0044 2846     		mov	r0, r5
 1310 0046 FFF7FEFF 		bl	_GetAvailWriteSpace
 1311              	.LVL147:
 928:RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1312              		.loc 1 928 5 is_stmt 1 view .LVU395
 928:RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1313              		.loc 1 928 12 is_stmt 0 view .LVU396
 1314 004a 3446     		mov	r4, r6
 1315 004c 8642     		cmp	r6, r0
 1316 004e 28BF     		it	cs
 1317 0050 0446     		movcs	r4, r0
 1318              	.LVL148:
 929:RTT/SEGGER_RTT.c ****     break;
 1319              		.loc 1 929 5 is_stmt 1 view .LVU397
 1320 0052 2246     		mov	r2, r4
 1321 0054 3946     		mov	r1, r7
 1322 0056 2846     		mov	r0, r5
 1323              	.LVL149:
 929:RTT/SEGGER_RTT.c ****     break;
 1324              		.loc 1 929 5 is_stmt 0 view .LVU398
 1325 0058 FFF7FEFF 		bl	_WriteNoCheck
 1326              	.LVL150:
 930:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 1327              		.loc 1 930 5 is_stmt 1 view .LVU399
 1328 005c E4E7     		b	.L69
 1329              	.LVL151:
 1330              	.L71:
 935:RTT/SEGGER_RTT.c ****     break;
 1331              		.loc 1 935 5 view .LVU400
 935:RTT/SEGGER_RTT.c ****     break;
 1332              		.loc 1 935 14 is_stmt 0 view .LVU401
 1333 005e 2846     		mov	r0, r5
 1334 0060 FFF7FEFF 		bl	_WriteBlocking
 1335              	.LVL152:
 935:RTT/SEGGER_RTT.c ****     break;
 1336              		.loc 1 935 14 view .LVU402
 1337 0064 0446     		mov	r4, r0
 1338              	.LVL153:
 936:RTT/SEGGER_RTT.c ****   default:
 1339              		.loc 1 936 5 is_stmt 1 view .LVU403
 1340 0066 DFE7     		b	.L69
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 45


 1341              	.L77:
 1342              		.align	2
 1343              	.L76:
 1344 0068 00000000 		.word	.LANCHOR1
 1345              		.cfi_endproc
 1346              	.LFE9:
 1348              		.section	.text.SEGGER_RTT_Write,"ax",%progbits
 1349              		.align	1
 1350              		.global	SEGGER_RTT_Write
 1351              		.syntax unified
 1352              		.thumb
 1353              		.thumb_func
 1354              		.fpu fpv4-sp-d16
 1356              	SEGGER_RTT_Write:
 1357              	.LVL154:
 1358              	.LFB10:
 946:RTT/SEGGER_RTT.c **** 
 947:RTT/SEGGER_RTT.c **** /*********************************************************************
 948:RTT/SEGGER_RTT.c **** *
 949:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_Write
 950:RTT/SEGGER_RTT.c **** *
 951:RTT/SEGGER_RTT.c **** *  Function description
 952:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 953:RTT/SEGGER_RTT.c **** *    control block which is then read by the host.
 954:RTT/SEGGER_RTT.c **** *
 955:RTT/SEGGER_RTT.c **** *  Parameters
 956:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 957:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 958:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 959:RTT/SEGGER_RTT.c **** *
 960:RTT/SEGGER_RTT.c **** *  Return value
 961:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
 962:RTT/SEGGER_RTT.c **** *
 963:RTT/SEGGER_RTT.c **** *  Notes
 964:RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
 965:RTT/SEGGER_RTT.c **** */
 966:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1359              		.loc 1 966 89 view -0
 1360              		.cfi_startproc
 1361              		@ args = 0, pretend = 0, frame = 0
 1362              		@ frame_needed = 0, uses_anonymous_args = 0
 1363              		.loc 1 966 89 is_stmt 0 view .LVU405
 1364 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1365              	.LCFI13:
 1366              		.cfi_def_cfa_offset 24
 1367              		.cfi_offset 3, -24
 1368              		.cfi_offset 4, -20
 1369              		.cfi_offset 5, -16
 1370              		.cfi_offset 6, -12
 1371              		.cfi_offset 7, -8
 1372              		.cfi_offset 14, -4
 1373 0002 0446     		mov	r4, r0
 1374 0004 0D46     		mov	r5, r1
 1375 0006 1646     		mov	r6, r2
 967:RTT/SEGGER_RTT.c ****   unsigned Status;
 1376              		.loc 1 967 3 is_stmt 1 view .LVU406
 968:RTT/SEGGER_RTT.c ****   //
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 46


 969:RTT/SEGGER_RTT.c ****   INIT();
 1377              		.loc 1 969 3 view .LVU407
 1378              		.loc 1 969 3 view .LVU408
 1379 0008 094B     		ldr	r3, .L82
 1380 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1381 000c 6BB1     		cbz	r3, .L81
 1382              	.LVL155:
 1383              	.L79:
 1384              		.loc 1 969 3 discriminator 3 view .LVU409
 1385              	.LBB3:
 970:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1386              		.loc 1 970 3 discriminator 3 view .LVU410
 1387              		.loc 1 970 3 discriminator 3 view .LVU411
 1388              		.syntax unified
 1389              	@ 970 "RTT/SEGGER_RTT.c" 1
 1390 000e EFF31187 		mrs   r7, basepri  
 1391 0012 4FF02001 		mov   r1, #32       
 1392 0016 81F31188 		msr   basepri, r1  
 1393              		
 1394              	@ 0 "" 2
 1395              	.LVL156:
 1396              		.loc 1 970 20 discriminator 3 view .LVU412
 971:RTT/SEGGER_RTT.c ****   //
 972:RTT/SEGGER_RTT.c ****   // Call the non-locking write function
 973:RTT/SEGGER_RTT.c ****   //
 974:RTT/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 1397              		.loc 1 974 3 discriminator 3 view .LVU413
 1398              		.loc 1 974 12 is_stmt 0 discriminator 3 view .LVU414
 1399              		.thumb
 1400              		.syntax unified
 1401 001a 3246     		mov	r2, r6
 1402 001c 2946     		mov	r1, r5
 1403 001e 2046     		mov	r0, r4
 1404 0020 FFF7FEFF 		bl	SEGGER_RTT_WriteNoLock
 1405              	.LVL157:
 975:RTT/SEGGER_RTT.c ****   //
 976:RTT/SEGGER_RTT.c ****   // Finish up.
 977:RTT/SEGGER_RTT.c ****   //
 978:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1406              		.loc 1 978 3 is_stmt 1 discriminator 3 view .LVU415
 1407              		.syntax unified
 1408              	@ 978 "RTT/SEGGER_RTT.c" 1
 1409 0024 87F31188 		msr   basepri, r7  
 1410              		
 1411              	@ 0 "" 2
 1412              		.thumb
 1413              		.syntax unified
 1414              	.LBE3:
 1415              		.loc 1 978 22 discriminator 3 view .LVU416
 979:RTT/SEGGER_RTT.c ****   //
 980:RTT/SEGGER_RTT.c ****   return Status;
 1416              		.loc 1 980 3 discriminator 3 view .LVU417
 981:RTT/SEGGER_RTT.c **** }
 1417              		.loc 1 981 1 is_stmt 0 discriminator 3 view .LVU418
 1418 0028 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1419              	.LVL158:
 1420              	.L81:
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 47


 969:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1421              		.loc 1 969 3 is_stmt 1 discriminator 1 view .LVU419
 1422 002a FFF7FEFF 		bl	_DoInit
 1423              	.LVL159:
 969:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1424              		.loc 1 969 3 is_stmt 0 discriminator 1 view .LVU420
 1425 002e EEE7     		b	.L79
 1426              	.L83:
 1427              		.align	2
 1428              	.L82:
 1429 0030 00000000 		.word	.LANCHOR1
 1430              		.cfi_endproc
 1431              	.LFE10:
 1433              		.section	.text.SEGGER_RTT_WriteString,"ax",%progbits
 1434              		.align	1
 1435              		.global	SEGGER_RTT_WriteString
 1436              		.syntax unified
 1437              		.thumb
 1438              		.thumb_func
 1439              		.fpu fpv4-sp-d16
 1441              	SEGGER_RTT_WriteString:
 1442              	.LVL160:
 1443              	.LFB11:
 982:RTT/SEGGER_RTT.c **** 
 983:RTT/SEGGER_RTT.c **** /*********************************************************************
 984:RTT/SEGGER_RTT.c **** *
 985:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteString
 986:RTT/SEGGER_RTT.c **** *
 987:RTT/SEGGER_RTT.c **** *  Function description
 988:RTT/SEGGER_RTT.c **** *    Stores string in SEGGER RTT control block.
 989:RTT/SEGGER_RTT.c **** *    This data is read by the host.
 990:RTT/SEGGER_RTT.c **** *
 991:RTT/SEGGER_RTT.c **** *  Parameters
 992:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 993:RTT/SEGGER_RTT.c **** *    s            Pointer to string.
 994:RTT/SEGGER_RTT.c **** *
 995:RTT/SEGGER_RTT.c **** *  Return value
 996:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
 997:RTT/SEGGER_RTT.c **** *
 998:RTT/SEGGER_RTT.c **** *  Notes
 999:RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1000:RTT/SEGGER_RTT.c **** *    (2) String passed to this function has to be \0 terminated
1001:RTT/SEGGER_RTT.c **** *    (3) \0 termination character is *not* stored in RTT buffer
1002:RTT/SEGGER_RTT.c **** */
1003:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 1444              		.loc 1 1003 70 is_stmt 1 view -0
 1445              		.cfi_startproc
 1446              		@ args = 0, pretend = 0, frame = 0
 1447              		@ frame_needed = 0, uses_anonymous_args = 0
 1448              		.loc 1 1003 70 is_stmt 0 view .LVU422
 1449 0000 38B5     		push	{r3, r4, r5, lr}
 1450              	.LCFI14:
 1451              		.cfi_def_cfa_offset 16
 1452              		.cfi_offset 3, -16
 1453              		.cfi_offset 4, -12
 1454              		.cfi_offset 5, -8
 1455              		.cfi_offset 14, -4
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 48


 1456 0002 0546     		mov	r5, r0
 1457 0004 0C46     		mov	r4, r1
1004:RTT/SEGGER_RTT.c ****   unsigned Len;
 1458              		.loc 1 1004 3 is_stmt 1 view .LVU423
1005:RTT/SEGGER_RTT.c **** 
1006:RTT/SEGGER_RTT.c ****   Len = STRLEN(s);
 1459              		.loc 1 1006 3 view .LVU424
 1460              		.loc 1 1006 9 is_stmt 0 view .LVU425
 1461 0006 0846     		mov	r0, r1
 1462              	.LVL161:
 1463              		.loc 1 1006 9 view .LVU426
 1464 0008 FFF7FEFF 		bl	strlen
 1465              	.LVL162:
 1466              		.loc 1 1006 9 view .LVU427
 1467 000c 0246     		mov	r2, r0
 1468              	.LVL163:
1007:RTT/SEGGER_RTT.c ****   return SEGGER_RTT_Write(BufferIndex, s, Len);
 1469              		.loc 1 1007 3 is_stmt 1 view .LVU428
 1470              		.loc 1 1007 10 is_stmt 0 view .LVU429
 1471 000e 2146     		mov	r1, r4
 1472 0010 2846     		mov	r0, r5
 1473              	.LVL164:
 1474              		.loc 1 1007 10 view .LVU430
 1475 0012 FFF7FEFF 		bl	SEGGER_RTT_Write
 1476              	.LVL165:
1008:RTT/SEGGER_RTT.c **** }
 1477              		.loc 1 1008 1 view .LVU431
 1478 0016 38BD     		pop	{r3, r4, r5, pc}
 1479              		.loc 1 1008 1 view .LVU432
 1480              		.cfi_endproc
 1481              	.LFE11:
 1483              		.section	.text.SEGGER_RTT_PutCharSkipNoLock,"ax",%progbits
 1484              		.align	1
 1485              		.global	SEGGER_RTT_PutCharSkipNoLock
 1486              		.syntax unified
 1487              		.thumb
 1488              		.thumb_func
 1489              		.fpu fpv4-sp-d16
 1491              	SEGGER_RTT_PutCharSkipNoLock:
 1492              	.LVL166:
 1493              	.LFB12:
1009:RTT/SEGGER_RTT.c **** 
1010:RTT/SEGGER_RTT.c **** /*********************************************************************
1011:RTT/SEGGER_RTT.c **** *
1012:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkipNoLock
1013:RTT/SEGGER_RTT.c **** *
1014:RTT/SEGGER_RTT.c **** *  Function description
1015:RTT/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1016:RTT/SEGGER_RTT.c **** *    SEGGER_RTT_PutCharSkipNoLock does not lock the application and
1017:RTT/SEGGER_RTT.c **** *    skips the byte, if it does not fit into the buffer.
1018:RTT/SEGGER_RTT.c **** *
1019:RTT/SEGGER_RTT.c **** *  Parameters
1020:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1021:RTT/SEGGER_RTT.c **** *    c            Byte to be stored.
1022:RTT/SEGGER_RTT.c **** *
1023:RTT/SEGGER_RTT.c **** *  Return value
1024:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 49


1025:RTT/SEGGER_RTT.c **** *
1026:RTT/SEGGER_RTT.c **** *  Notes
1027:RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1028:RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1029:RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1030:RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1031:RTT/SEGGER_RTT.c **** */
1032:RTT/SEGGER_RTT.c **** 
1033:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkipNoLock(unsigned BufferIndex, char c) {
 1494              		.loc 1 1033 69 is_stmt 1 view -0
 1495              		.cfi_startproc
 1496              		@ args = 0, pretend = 0, frame = 0
 1497              		@ frame_needed = 0, uses_anonymous_args = 0
 1498              		@ link register save eliminated.
 1499              		.loc 1 1033 69 is_stmt 0 view .LVU434
 1500 0000 30B4     		push	{r4, r5}
 1501              	.LCFI15:
 1502              		.cfi_def_cfa_offset 8
 1503              		.cfi_offset 4, -8
 1504              		.cfi_offset 5, -4
1034:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1505              		.loc 1 1034 3 is_stmt 1 view .LVU435
1035:RTT/SEGGER_RTT.c ****   unsigned              WrOff;
 1506              		.loc 1 1035 3 view .LVU436
1036:RTT/SEGGER_RTT.c ****   unsigned              Status;
 1507              		.loc 1 1036 3 view .LVU437
1037:RTT/SEGGER_RTT.c ****   //
1038:RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1039:RTT/SEGGER_RTT.c ****   //
1040:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1508              		.loc 1 1040 3 view .LVU438
 1509              	.LVL167:
1041:RTT/SEGGER_RTT.c ****   //
1042:RTT/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1043:RTT/SEGGER_RTT.c ****   //
1044:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1510              		.loc 1 1044 3 view .LVU439
 1511              		.loc 1 1044 16 is_stmt 0 view .LVU440
 1512 0002 00EB4002 		add	r2, r0, r0, lsl #1
 1513 0006 114B     		ldr	r3, .L93
 1514 0008 03EBC203 		add	r3, r3, r2, lsl #3
 1515 000c 5D6A     		ldr	r5, [r3, #36]
 1516              		.loc 1 1044 9 view .LVU441
 1517 000e 6A1C     		adds	r2, r5, #1
 1518              	.LVL168:
1045:RTT/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1519              		.loc 1 1045 3 is_stmt 1 view .LVU442
 1520              		.loc 1 1045 21 is_stmt 0 view .LVU443
 1521 0010 1B6A     		ldr	r3, [r3, #32]
 1522              		.loc 1 1045 6 view .LVU444
 1523 0012 9342     		cmp	r3, r2
 1524 0014 16D0     		beq	.L92
 1525              	.LVL169:
 1526              	.L87:
1046:RTT/SEGGER_RTT.c ****     WrOff = 0;
1047:RTT/SEGGER_RTT.c ****   }
1048:RTT/SEGGER_RTT.c ****   //
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 50


1049:RTT/SEGGER_RTT.c ****   // Output byte if free space is available
1050:RTT/SEGGER_RTT.c ****   //
1051:RTT/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1527              		.loc 1 1051 3 is_stmt 1 view .LVU445
 1528              		.loc 1 1051 21 is_stmt 0 view .LVU446
 1529 0016 00EB4003 		add	r3, r0, r0, lsl #1
 1530 001a 0C4C     		ldr	r4, .L93
 1531 001c 04EBC303 		add	r3, r4, r3, lsl #3
 1532 0020 9B6A     		ldr	r3, [r3, #40]
 1533              		.loc 1 1051 6 view .LVU447
 1534 0022 9342     		cmp	r3, r2
 1535 0024 10D0     		beq	.L90
1052:RTT/SEGGER_RTT.c ****     pRing->pBuffer[pRing->WrOff] = c;
 1536              		.loc 1 1052 5 is_stmt 1 view .LVU448
 1537              		.loc 1 1052 10 is_stmt 0 view .LVU449
 1538 0026 431C     		adds	r3, r0, #1
 1539 0028 03EB4303 		add	r3, r3, r3, lsl #1
 1540 002c 04EBC303 		add	r3, r4, r3, lsl #3
 1541 0030 5B68     		ldr	r3, [r3, #4]
 1542              		.loc 1 1052 34 view .LVU450
 1543 0032 5955     		strb	r1, [r3, r5]
1053:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1544              		.loc 1 1053 5 is_stmt 1 view .LVU451
 1545              		.loc 1 1053 18 is_stmt 0 view .LVU452
 1546 0034 00EB4000 		add	r0, r0, r0, lsl #1
 1547              	.LVL170:
 1548              		.loc 1 1053 18 view .LVU453
 1549 0038 04EBC000 		add	r0, r4, r0, lsl #3
 1550 003c 4262     		str	r2, [r0, #36]
1054:RTT/SEGGER_RTT.c ****     Status = 1;
 1551              		.loc 1 1054 5 is_stmt 1 view .LVU454
 1552              	.LVL171:
 1553              		.loc 1 1054 12 is_stmt 0 view .LVU455
 1554 003e 0120     		movs	r0, #1
 1555              	.LVL172:
 1556              	.L86:
1055:RTT/SEGGER_RTT.c ****   } else {
1056:RTT/SEGGER_RTT.c ****     Status = 0;
1057:RTT/SEGGER_RTT.c ****   }
1058:RTT/SEGGER_RTT.c ****   //
1059:RTT/SEGGER_RTT.c ****   return Status;
1060:RTT/SEGGER_RTT.c **** }
 1557              		.loc 1 1060 1 view .LVU456
 1558 0040 30BC     		pop	{r4, r5}
 1559              	.LCFI16:
 1560              		.cfi_remember_state
 1561              		.cfi_restore 5
 1562              		.cfi_restore 4
 1563              		.cfi_def_cfa_offset 0
 1564 0042 7047     		bx	lr
 1565              	.LVL173:
 1566              	.L92:
 1567              	.LCFI17:
 1568              		.cfi_restore_state
1046:RTT/SEGGER_RTT.c ****   }
 1569              		.loc 1 1046 11 view .LVU457
 1570 0044 0022     		movs	r2, #0
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 51


 1571              	.LVL174:
1046:RTT/SEGGER_RTT.c ****   }
 1572              		.loc 1 1046 11 view .LVU458
 1573 0046 E6E7     		b	.L87
 1574              	.LVL175:
 1575              	.L90:
1056:RTT/SEGGER_RTT.c ****   }
 1576              		.loc 1 1056 12 view .LVU459
 1577 0048 0020     		movs	r0, #0
 1578              	.LVL176:
1059:RTT/SEGGER_RTT.c **** }
 1579              		.loc 1 1059 3 is_stmt 1 view .LVU460
1059:RTT/SEGGER_RTT.c **** }
 1580              		.loc 1 1059 10 is_stmt 0 view .LVU461
 1581 004a F9E7     		b	.L86
 1582              	.L94:
 1583              		.align	2
 1584              	.L93:
 1585 004c 00000000 		.word	.LANCHOR1
 1586              		.cfi_endproc
 1587              	.LFE12:
 1589              		.section	.text.SEGGER_RTT_PutCharSkip,"ax",%progbits
 1590              		.align	1
 1591              		.global	SEGGER_RTT_PutCharSkip
 1592              		.syntax unified
 1593              		.thumb
 1594              		.thumb_func
 1595              		.fpu fpv4-sp-d16
 1597              	SEGGER_RTT_PutCharSkip:
 1598              	.LVL177:
 1599              	.LFB13:
1061:RTT/SEGGER_RTT.c **** 
1062:RTT/SEGGER_RTT.c **** /*********************************************************************
1063:RTT/SEGGER_RTT.c **** *
1064:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkip
1065:RTT/SEGGER_RTT.c **** *
1066:RTT/SEGGER_RTT.c **** *  Function description
1067:RTT/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1068:RTT/SEGGER_RTT.c **** *
1069:RTT/SEGGER_RTT.c **** *  Parameters
1070:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1071:RTT/SEGGER_RTT.c **** *    c            Byte to be stored.
1072:RTT/SEGGER_RTT.c **** *
1073:RTT/SEGGER_RTT.c **** *  Return value
1074:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1075:RTT/SEGGER_RTT.c **** *
1076:RTT/SEGGER_RTT.c **** *  Notes
1077:RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1078:RTT/SEGGER_RTT.c **** */
1079:RTT/SEGGER_RTT.c **** 
1080:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkip(unsigned BufferIndex, char c) {
 1600              		.loc 1 1080 63 is_stmt 1 view -0
 1601              		.cfi_startproc
 1602              		@ args = 0, pretend = 0, frame = 0
 1603              		@ frame_needed = 0, uses_anonymous_args = 0
 1604              		.loc 1 1080 63 is_stmt 0 view .LVU463
 1605 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 52


 1606              	.LCFI18:
 1607              		.cfi_def_cfa_offset 16
 1608              		.cfi_offset 3, -16
 1609              		.cfi_offset 4, -12
 1610              		.cfi_offset 5, -8
 1611              		.cfi_offset 14, -4
 1612 0002 0446     		mov	r4, r0
 1613 0004 0D46     		mov	r5, r1
1081:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1614              		.loc 1 1081 3 is_stmt 1 view .LVU464
1082:RTT/SEGGER_RTT.c ****   unsigned              WrOff;
 1615              		.loc 1 1082 3 view .LVU465
1083:RTT/SEGGER_RTT.c ****   unsigned              Status;
 1616              		.loc 1 1083 3 view .LVU466
1084:RTT/SEGGER_RTT.c ****   //
1085:RTT/SEGGER_RTT.c ****   // Prepare
1086:RTT/SEGGER_RTT.c ****   //
1087:RTT/SEGGER_RTT.c ****   INIT();
 1617              		.loc 1 1087 3 view .LVU467
 1618              		.loc 1 1087 3 view .LVU468
 1619 0006 194B     		ldr	r3, .L104
 1620 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1621 000a 3BB3     		cbz	r3, .L102
 1622              	.LVL178:
 1623              	.L96:
 1624              		.loc 1 1087 3 discriminator 3 view .LVU469
 1625              	.LBB4:
1088:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1626              		.loc 1 1088 3 discriminator 3 view .LVU470
 1627              		.loc 1 1088 3 discriminator 3 view .LVU471
 1628              		.syntax unified
 1629              	@ 1088 "RTT/SEGGER_RTT.c" 1
 1630 000c EFF3118C 		mrs   ip, basepri  
 1631 0010 4FF02001 		mov   r1, #32       
 1632 0014 81F31188 		msr   basepri, r1  
 1633              		
 1634              	@ 0 "" 2
 1635              	.LVL179:
 1636              		.loc 1 1088 20 discriminator 3 view .LVU472
1089:RTT/SEGGER_RTT.c ****   //
1090:RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1091:RTT/SEGGER_RTT.c ****   //
1092:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1637              		.loc 1 1092 3 discriminator 3 view .LVU473
1093:RTT/SEGGER_RTT.c ****   //
1094:RTT/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1095:RTT/SEGGER_RTT.c ****   //
1096:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1638              		.loc 1 1096 3 discriminator 3 view .LVU474
 1639              		.loc 1 1096 16 is_stmt 0 discriminator 3 view .LVU475
 1640              		.thumb
 1641              		.syntax unified
 1642 0018 04EB4403 		add	r3, r4, r4, lsl #1
 1643 001c 134A     		ldr	r2, .L104
 1644 001e 02EBC303 		add	r3, r2, r3, lsl #3
 1645 0022 586A     		ldr	r0, [r3, #36]
 1646              		.loc 1 1096 9 discriminator 3 view .LVU476
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 53


 1647 0024 421C     		adds	r2, r0, #1
 1648              	.LVL180:
1097:RTT/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1649              		.loc 1 1097 3 is_stmt 1 discriminator 3 view .LVU477
 1650              		.loc 1 1097 21 is_stmt 0 discriminator 3 view .LVU478
 1651 0026 1B6A     		ldr	r3, [r3, #32]
 1652              		.loc 1 1097 6 discriminator 3 view .LVU479
 1653 0028 9342     		cmp	r3, r2
 1654 002a 1AD0     		beq	.L103
 1655              	.LVL181:
 1656              	.L97:
1098:RTT/SEGGER_RTT.c ****     WrOff = 0;
1099:RTT/SEGGER_RTT.c ****   }
1100:RTT/SEGGER_RTT.c ****   //
1101:RTT/SEGGER_RTT.c ****   // Output byte if free space is available
1102:RTT/SEGGER_RTT.c ****   //
1103:RTT/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1657              		.loc 1 1103 3 is_stmt 1 view .LVU480
 1658              		.loc 1 1103 21 is_stmt 0 view .LVU481
 1659 002c 04EB4403 		add	r3, r4, r4, lsl #1
 1660 0030 0E49     		ldr	r1, .L104
 1661 0032 01EBC303 		add	r3, r1, r3, lsl #3
 1662 0036 9B6A     		ldr	r3, [r3, #40]
 1663              		.loc 1 1103 6 view .LVU482
 1664 0038 9342     		cmp	r3, r2
 1665 003a 14D0     		beq	.L100
1104:RTT/SEGGER_RTT.c ****     pRing->pBuffer[pRing->WrOff] = c;
 1666              		.loc 1 1104 5 is_stmt 1 view .LVU483
 1667              		.loc 1 1104 10 is_stmt 0 view .LVU484
 1668 003c 631C     		adds	r3, r4, #1
 1669 003e 03EB4303 		add	r3, r3, r3, lsl #1
 1670 0042 01EBC303 		add	r3, r1, r3, lsl #3
 1671 0046 5B68     		ldr	r3, [r3, #4]
 1672              		.loc 1 1104 34 view .LVU485
 1673 0048 1D54     		strb	r5, [r3, r0]
1105:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1674              		.loc 1 1105 5 is_stmt 1 view .LVU486
 1675              		.loc 1 1105 18 is_stmt 0 view .LVU487
 1676 004a 04EB4404 		add	r4, r4, r4, lsl #1
 1677              	.LVL182:
 1678              		.loc 1 1105 18 view .LVU488
 1679 004e 01EBC404 		add	r4, r1, r4, lsl #3
 1680 0052 6262     		str	r2, [r4, #36]
1106:RTT/SEGGER_RTT.c ****     Status = 1;
 1681              		.loc 1 1106 5 is_stmt 1 view .LVU489
 1682              	.LVL183:
 1683              		.loc 1 1106 12 is_stmt 0 view .LVU490
 1684 0054 0120     		movs	r0, #1
 1685              	.LVL184:
 1686              	.L98:
1107:RTT/SEGGER_RTT.c ****   } else {
1108:RTT/SEGGER_RTT.c ****     Status = 0;
1109:RTT/SEGGER_RTT.c ****   }
1110:RTT/SEGGER_RTT.c ****   //
1111:RTT/SEGGER_RTT.c ****   // Finish up.
1112:RTT/SEGGER_RTT.c ****   //
1113:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 54


 1687              		.loc 1 1113 3 is_stmt 1 view .LVU491
 1688              		.syntax unified
 1689              	@ 1113 "RTT/SEGGER_RTT.c" 1
 1690 0056 8CF31188 		msr   basepri, ip  
 1691              		
 1692              	@ 0 "" 2
 1693              		.thumb
 1694              		.syntax unified
 1695              	.LBE4:
 1696              		.loc 1 1113 22 view .LVU492
1114:RTT/SEGGER_RTT.c ****   //
1115:RTT/SEGGER_RTT.c ****   return Status;
 1697              		.loc 1 1115 3 view .LVU493
1116:RTT/SEGGER_RTT.c **** }
 1698              		.loc 1 1116 1 is_stmt 0 view .LVU494
 1699 005a 38BD     		pop	{r3, r4, r5, pc}
 1700              	.LVL185:
 1701              	.L102:
1087:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1702              		.loc 1 1087 3 is_stmt 1 discriminator 1 view .LVU495
 1703 005c FFF7FEFF 		bl	_DoInit
 1704              	.LVL186:
1087:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1705              		.loc 1 1087 3 is_stmt 0 discriminator 1 view .LVU496
 1706 0060 D4E7     		b	.L96
 1707              	.LVL187:
 1708              	.L103:
 1709              	.LBB5:
1098:RTT/SEGGER_RTT.c ****   }
 1710              		.loc 1 1098 11 view .LVU497
 1711 0062 0022     		movs	r2, #0
 1712              	.LVL188:
1098:RTT/SEGGER_RTT.c ****   }
 1713              		.loc 1 1098 11 view .LVU498
 1714 0064 E2E7     		b	.L97
 1715              	.LVL189:
 1716              	.L100:
1108:RTT/SEGGER_RTT.c ****   }
 1717              		.loc 1 1108 12 view .LVU499
 1718 0066 0020     		movs	r0, #0
 1719 0068 F5E7     		b	.L98
 1720              	.L105:
 1721 006a 00BF     		.align	2
 1722              	.L104:
 1723 006c 00000000 		.word	.LANCHOR1
 1724              	.LBE5:
 1725              		.cfi_endproc
 1726              	.LFE13:
 1728              		.section	.text.SEGGER_RTT_PutChar,"ax",%progbits
 1729              		.align	1
 1730              		.global	SEGGER_RTT_PutChar
 1731              		.syntax unified
 1732              		.thumb
 1733              		.thumb_func
 1734              		.fpu fpv4-sp-d16
 1736              	SEGGER_RTT_PutChar:
 1737              	.LVL190:
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 55


 1738              	.LFB14:
1117:RTT/SEGGER_RTT.c **** 
1118:RTT/SEGGER_RTT.c ****  /*********************************************************************
1119:RTT/SEGGER_RTT.c **** *
1120:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_PutChar
1121:RTT/SEGGER_RTT.c **** *
1122:RTT/SEGGER_RTT.c **** *  Function description
1123:RTT/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1124:RTT/SEGGER_RTT.c **** *
1125:RTT/SEGGER_RTT.c **** *  Parameters
1126:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1127:RTT/SEGGER_RTT.c **** *    c            Byte to be stored.
1128:RTT/SEGGER_RTT.c **** *
1129:RTT/SEGGER_RTT.c **** *  Return value
1130:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1131:RTT/SEGGER_RTT.c **** *
1132:RTT/SEGGER_RTT.c **** *  Notes
1133:RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1134:RTT/SEGGER_RTT.c **** */
1135:RTT/SEGGER_RTT.c **** 
1136:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutChar(unsigned BufferIndex, char c) {
 1739              		.loc 1 1136 59 is_stmt 1 view -0
 1740              		.cfi_startproc
 1741              		@ args = 0, pretend = 0, frame = 0
 1742              		@ frame_needed = 0, uses_anonymous_args = 0
 1743              		.loc 1 1136 59 is_stmt 0 view .LVU501
 1744 0000 38B5     		push	{r3, r4, r5, lr}
 1745              	.LCFI19:
 1746              		.cfi_def_cfa_offset 16
 1747              		.cfi_offset 3, -16
 1748              		.cfi_offset 4, -12
 1749              		.cfi_offset 5, -8
 1750              		.cfi_offset 14, -4
 1751 0002 0446     		mov	r4, r0
 1752 0004 0D46     		mov	r5, r1
1137:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1753              		.loc 1 1137 3 is_stmt 1 view .LVU502
1138:RTT/SEGGER_RTT.c ****   unsigned              WrOff;
 1754              		.loc 1 1138 3 view .LVU503
1139:RTT/SEGGER_RTT.c ****   unsigned              Status;
 1755              		.loc 1 1139 3 view .LVU504
1140:RTT/SEGGER_RTT.c ****   //
1141:RTT/SEGGER_RTT.c ****   // Prepare
1142:RTT/SEGGER_RTT.c ****   //
1143:RTT/SEGGER_RTT.c ****   INIT();
 1756              		.loc 1 1143 3 view .LVU505
 1757              		.loc 1 1143 3 view .LVU506
 1758 0006 214B     		ldr	r3, .L117
 1759 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1760 000a 7BB3     		cbz	r3, .L115
 1761              	.LVL191:
 1762              	.L107:
 1763              		.loc 1 1143 3 discriminator 3 view .LVU507
 1764              	.LBB6:
1144:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1765              		.loc 1 1144 3 discriminator 3 view .LVU508
 1766              		.loc 1 1144 3 discriminator 3 view .LVU509
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 56


 1767              		.syntax unified
 1768              	@ 1144 "RTT/SEGGER_RTT.c" 1
 1769 000c EFF3118C 		mrs   ip, basepri  
 1770 0010 4FF02001 		mov   r1, #32       
 1771 0014 81F31188 		msr   basepri, r1  
 1772              		
 1773              	@ 0 "" 2
 1774              	.LVL192:
 1775              		.loc 1 1144 20 discriminator 3 view .LVU510
1145:RTT/SEGGER_RTT.c ****   //
1146:RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1147:RTT/SEGGER_RTT.c ****   //
1148:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1776              		.loc 1 1148 3 discriminator 3 view .LVU511
1149:RTT/SEGGER_RTT.c ****   //
1150:RTT/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1151:RTT/SEGGER_RTT.c ****   //
1152:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1777              		.loc 1 1152 3 discriminator 3 view .LVU512
 1778              		.loc 1 1152 16 is_stmt 0 discriminator 3 view .LVU513
 1779              		.thumb
 1780              		.syntax unified
 1781 0018 04EB4403 		add	r3, r4, r4, lsl #1
 1782 001c 1B4A     		ldr	r2, .L117
 1783 001e 02EBC303 		add	r3, r2, r3, lsl #3
 1784 0022 596A     		ldr	r1, [r3, #36]
 1785              		.loc 1 1152 9 discriminator 3 view .LVU514
 1786 0024 481C     		adds	r0, r1, #1
 1787              	.LVL193:
1153:RTT/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1788              		.loc 1 1153 3 is_stmt 1 discriminator 3 view .LVU515
 1789              		.loc 1 1153 21 is_stmt 0 discriminator 3 view .LVU516
 1790 0026 1B6A     		ldr	r3, [r3, #32]
 1791              		.loc 1 1153 6 discriminator 3 view .LVU517
 1792 0028 8342     		cmp	r3, r0
 1793 002a 22D0     		beq	.L116
 1794              	.LVL194:
 1795              	.L108:
1154:RTT/SEGGER_RTT.c ****     WrOff = 0;
1155:RTT/SEGGER_RTT.c ****   }
1156:RTT/SEGGER_RTT.c ****   //
1157:RTT/SEGGER_RTT.c ****   // Wait for free space if mode is set to blocking
1158:RTT/SEGGER_RTT.c ****   //
1159:RTT/SEGGER_RTT.c ****   if (pRing->Flags == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 1796              		.loc 1 1159 3 is_stmt 1 view .LVU518
 1797              		.loc 1 1159 12 is_stmt 0 view .LVU519
 1798 002c 04EB4403 		add	r3, r4, r4, lsl #1
 1799 0030 164A     		ldr	r2, .L117
 1800 0032 02EBC303 		add	r3, r2, r3, lsl #3
 1801 0036 DB6A     		ldr	r3, [r3, #44]
 1802              		.loc 1 1159 6 view .LVU520
 1803 0038 022B     		cmp	r3, #2
 1804 003a 1CD0     		beq	.L110
 1805              	.L109:
1160:RTT/SEGGER_RTT.c ****     while (WrOff == pRing->RdOff) {
1161:RTT/SEGGER_RTT.c ****       ;
1162:RTT/SEGGER_RTT.c ****     }
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 57


1163:RTT/SEGGER_RTT.c ****   }
1164:RTT/SEGGER_RTT.c ****   //
1165:RTT/SEGGER_RTT.c ****   // Output byte if free space is available
1166:RTT/SEGGER_RTT.c ****   //
1167:RTT/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1806              		.loc 1 1167 3 is_stmt 1 view .LVU521
 1807              		.loc 1 1167 21 is_stmt 0 view .LVU522
 1808 003c 04EB4403 		add	r3, r4, r4, lsl #1
 1809 0040 124A     		ldr	r2, .L117
 1810 0042 02EBC303 		add	r3, r2, r3, lsl #3
 1811 0046 9B6A     		ldr	r3, [r3, #40]
 1812              		.loc 1 1167 6 view .LVU523
 1813 0048 8342     		cmp	r3, r0
 1814 004a 1DD0     		beq	.L113
1168:RTT/SEGGER_RTT.c ****     pRing->pBuffer[pRing->WrOff] = c;
 1815              		.loc 1 1168 5 is_stmt 1 view .LVU524
 1816              		.loc 1 1168 10 is_stmt 0 view .LVU525
 1817 004c 631C     		adds	r3, r4, #1
 1818 004e 03EB4303 		add	r3, r3, r3, lsl #1
 1819 0052 02EBC303 		add	r3, r2, r3, lsl #3
 1820 0056 5B68     		ldr	r3, [r3, #4]
 1821              		.loc 1 1168 34 view .LVU526
 1822 0058 5D54     		strb	r5, [r3, r1]
1169:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1823              		.loc 1 1169 5 is_stmt 1 view .LVU527
 1824              		.loc 1 1169 18 is_stmt 0 view .LVU528
 1825 005a 04EB4404 		add	r4, r4, r4, lsl #1
 1826              	.LVL195:
 1827              		.loc 1 1169 18 view .LVU529
 1828 005e 02EBC404 		add	r4, r2, r4, lsl #3
 1829 0062 6062     		str	r0, [r4, #36]
1170:RTT/SEGGER_RTT.c ****     Status = 1;
 1830              		.loc 1 1170 5 is_stmt 1 view .LVU530
 1831              	.LVL196:
 1832              		.loc 1 1170 12 is_stmt 0 view .LVU531
 1833 0064 0120     		movs	r0, #1
 1834              	.LVL197:
 1835              	.L111:
1171:RTT/SEGGER_RTT.c ****   } else {
1172:RTT/SEGGER_RTT.c ****     Status = 0;
1173:RTT/SEGGER_RTT.c ****   }
1174:RTT/SEGGER_RTT.c ****   //
1175:RTT/SEGGER_RTT.c ****   // Finish up.
1176:RTT/SEGGER_RTT.c ****   //
1177:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1836              		.loc 1 1177 3 is_stmt 1 view .LVU532
 1837              		.syntax unified
 1838              	@ 1177 "RTT/SEGGER_RTT.c" 1
 1839 0066 8CF31188 		msr   basepri, ip  
 1840              		
 1841              	@ 0 "" 2
 1842              		.thumb
 1843              		.syntax unified
 1844              	.LBE6:
 1845              		.loc 1 1177 22 view .LVU533
1178:RTT/SEGGER_RTT.c ****   //
1179:RTT/SEGGER_RTT.c ****   return Status;
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 58


 1846              		.loc 1 1179 3 view .LVU534
1180:RTT/SEGGER_RTT.c **** }
 1847              		.loc 1 1180 1 is_stmt 0 view .LVU535
 1848 006a 38BD     		pop	{r3, r4, r5, pc}
 1849              	.LVL198:
 1850              	.L115:
1143:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1851              		.loc 1 1143 3 is_stmt 1 discriminator 1 view .LVU536
 1852 006c FFF7FEFF 		bl	_DoInit
 1853              	.LVL199:
1143:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1854              		.loc 1 1143 3 is_stmt 0 discriminator 1 view .LVU537
 1855 0070 CCE7     		b	.L107
 1856              	.LVL200:
 1857              	.L116:
 1858              	.LBB7:
1154:RTT/SEGGER_RTT.c ****   }
 1859              		.loc 1 1154 11 view .LVU538
 1860 0072 0020     		movs	r0, #0
 1861              	.LVL201:
1154:RTT/SEGGER_RTT.c ****   }
 1862              		.loc 1 1154 11 view .LVU539
 1863 0074 DAE7     		b	.L108
 1864              	.LVL202:
 1865              	.L110:
1161:RTT/SEGGER_RTT.c ****     }
 1866              		.loc 1 1161 7 is_stmt 1 discriminator 1 view .LVU540
1160:RTT/SEGGER_RTT.c ****       ;
 1867              		.loc 1 1160 11 discriminator 1 view .LVU541
1160:RTT/SEGGER_RTT.c ****       ;
 1868              		.loc 1 1160 26 is_stmt 0 discriminator 1 view .LVU542
 1869 0076 04EB4403 		add	r3, r4, r4, lsl #1
 1870 007a 044A     		ldr	r2, .L117
 1871 007c 02EBC303 		add	r3, r2, r3, lsl #3
 1872 0080 9B6A     		ldr	r3, [r3, #40]
1160:RTT/SEGGER_RTT.c ****       ;
 1873              		.loc 1 1160 11 discriminator 1 view .LVU543
 1874 0082 8342     		cmp	r3, r0
 1875 0084 F7D0     		beq	.L110
 1876 0086 D9E7     		b	.L109
 1877              	.L113:
1172:RTT/SEGGER_RTT.c ****   }
 1878              		.loc 1 1172 12 view .LVU544
 1879 0088 0020     		movs	r0, #0
 1880              	.LVL203:
1172:RTT/SEGGER_RTT.c ****   }
 1881              		.loc 1 1172 12 view .LVU545
 1882 008a ECE7     		b	.L111
 1883              	.L118:
 1884              		.align	2
 1885              	.L117:
 1886 008c 00000000 		.word	.LANCHOR1
 1887              	.LBE7:
 1888              		.cfi_endproc
 1889              	.LFE14:
 1891              		.section	.text.SEGGER_RTT_GetKey,"ax",%progbits
 1892              		.align	1
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 59


 1893              		.global	SEGGER_RTT_GetKey
 1894              		.syntax unified
 1895              		.thumb
 1896              		.thumb_func
 1897              		.fpu fpv4-sp-d16
 1899              	SEGGER_RTT_GetKey:
 1900              	.LFB15:
1181:RTT/SEGGER_RTT.c **** 
1182:RTT/SEGGER_RTT.c **** /*********************************************************************
1183:RTT/SEGGER_RTT.c **** *
1184:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_GetKey
1185:RTT/SEGGER_RTT.c **** *
1186:RTT/SEGGER_RTT.c **** *  Function description
1187:RTT/SEGGER_RTT.c **** *    Reads one character from the SEGGER RTT buffer.
1188:RTT/SEGGER_RTT.c **** *    Host has previously stored data there.
1189:RTT/SEGGER_RTT.c **** *
1190:RTT/SEGGER_RTT.c **** *  Return value
1191:RTT/SEGGER_RTT.c **** *    <  0 -   No character available (buffer empty).
1192:RTT/SEGGER_RTT.c **** *    >= 0 -   Character which has been read. (Possible values: 0 - 255)
1193:RTT/SEGGER_RTT.c **** *
1194:RTT/SEGGER_RTT.c **** *  Notes
1195:RTT/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0.
1196:RTT/SEGGER_RTT.c **** */
1197:RTT/SEGGER_RTT.c **** int SEGGER_RTT_GetKey(void) {
 1901              		.loc 1 1197 29 is_stmt 1 view -0
 1902              		.cfi_startproc
 1903              		@ args = 0, pretend = 0, frame = 8
 1904              		@ frame_needed = 0, uses_anonymous_args = 0
 1905 0000 00B5     		push	{lr}
 1906              	.LCFI20:
 1907              		.cfi_def_cfa_offset 4
 1908              		.cfi_offset 14, -4
 1909 0002 83B0     		sub	sp, sp, #12
 1910              	.LCFI21:
 1911              		.cfi_def_cfa_offset 16
1198:RTT/SEGGER_RTT.c ****   char c;
 1912              		.loc 1 1198 3 view .LVU547
1199:RTT/SEGGER_RTT.c ****   int r;
 1913              		.loc 1 1199 3 view .LVU548
1200:RTT/SEGGER_RTT.c **** 
1201:RTT/SEGGER_RTT.c ****   r = (int)SEGGER_RTT_Read(0u, &c, 1u);
 1914              		.loc 1 1201 3 view .LVU549
 1915              		.loc 1 1201 12 is_stmt 0 view .LVU550
 1916 0004 0122     		movs	r2, #1
 1917 0006 0DF10701 		add	r1, sp, #7
 1918 000a 0020     		movs	r0, #0
 1919 000c FFF7FEFF 		bl	SEGGER_RTT_Read
 1920              	.LVL204:
1202:RTT/SEGGER_RTT.c ****   if (r == 1) {
 1921              		.loc 1 1202 3 is_stmt 1 view .LVU551
 1922              		.loc 1 1202 6 is_stmt 0 view .LVU552
 1923 0010 0128     		cmp	r0, #1
 1924 0012 04D1     		bne	.L121
1203:RTT/SEGGER_RTT.c ****     r = (int)(unsigned char)c;
 1925              		.loc 1 1203 5 is_stmt 1 view .LVU553
 1926              		.loc 1 1203 9 is_stmt 0 view .LVU554
 1927 0014 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 60


 1928              	.LVL205:
 1929              	.L119:
1204:RTT/SEGGER_RTT.c ****   } else {
1205:RTT/SEGGER_RTT.c ****     r = -1;
1206:RTT/SEGGER_RTT.c ****   }
1207:RTT/SEGGER_RTT.c ****   return r;
1208:RTT/SEGGER_RTT.c **** }
 1930              		.loc 1 1208 1 view .LVU555
 1931 0018 03B0     		add	sp, sp, #12
 1932              	.LCFI22:
 1933              		.cfi_remember_state
 1934              		.cfi_def_cfa_offset 4
 1935              		@ sp needed
 1936 001a 5DF804FB 		ldr	pc, [sp], #4
 1937              	.LVL206:
 1938              	.L121:
 1939              	.LCFI23:
 1940              		.cfi_restore_state
1205:RTT/SEGGER_RTT.c ****   }
 1941              		.loc 1 1205 7 view .LVU556
 1942 001e 4FF0FF30 		mov	r0, #-1
 1943              	.LVL207:
1207:RTT/SEGGER_RTT.c **** }
 1944              		.loc 1 1207 3 is_stmt 1 view .LVU557
1207:RTT/SEGGER_RTT.c **** }
 1945              		.loc 1 1207 10 is_stmt 0 view .LVU558
 1946 0022 F9E7     		b	.L119
 1947              		.cfi_endproc
 1948              	.LFE15:
 1950              		.section	.text.SEGGER_RTT_WaitKey,"ax",%progbits
 1951              		.align	1
 1952              		.global	SEGGER_RTT_WaitKey
 1953              		.syntax unified
 1954              		.thumb
 1955              		.thumb_func
 1956              		.fpu fpv4-sp-d16
 1958              	SEGGER_RTT_WaitKey:
 1959              	.LFB16:
1209:RTT/SEGGER_RTT.c **** 
1210:RTT/SEGGER_RTT.c **** /*********************************************************************
1211:RTT/SEGGER_RTT.c **** *
1212:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WaitKey
1213:RTT/SEGGER_RTT.c **** *
1214:RTT/SEGGER_RTT.c **** *  Function description
1215:RTT/SEGGER_RTT.c **** *    Waits until at least one character is avaible in the SEGGER RTT buffer.
1216:RTT/SEGGER_RTT.c **** *    Once a character is available, it is read and this function returns.
1217:RTT/SEGGER_RTT.c **** *
1218:RTT/SEGGER_RTT.c **** *  Return value
1219:RTT/SEGGER_RTT.c **** *    >=0 -   Character which has been read.
1220:RTT/SEGGER_RTT.c **** *
1221:RTT/SEGGER_RTT.c **** *  Notes
1222:RTT/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1223:RTT/SEGGER_RTT.c **** *    (2) This function is blocking if no character is present in RTT buffer
1224:RTT/SEGGER_RTT.c **** */
1225:RTT/SEGGER_RTT.c **** int SEGGER_RTT_WaitKey(void) {
 1960              		.loc 1 1225 30 is_stmt 1 view -0
 1961              		.cfi_startproc
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 61


 1962              		@ args = 0, pretend = 0, frame = 0
 1963              		@ frame_needed = 0, uses_anonymous_args = 0
 1964 0000 08B5     		push	{r3, lr}
 1965              	.LCFI24:
 1966              		.cfi_def_cfa_offset 8
 1967              		.cfi_offset 3, -8
 1968              		.cfi_offset 14, -4
 1969              	.L124:
1226:RTT/SEGGER_RTT.c ****   int r;
 1970              		.loc 1 1226 3 discriminator 1 view .LVU560
1227:RTT/SEGGER_RTT.c **** 
1228:RTT/SEGGER_RTT.c ****   do {
 1971              		.loc 1 1228 3 discriminator 1 view .LVU561
1229:RTT/SEGGER_RTT.c ****     r = SEGGER_RTT_GetKey();
 1972              		.loc 1 1229 5 discriminator 1 view .LVU562
 1973              		.loc 1 1229 9 is_stmt 0 discriminator 1 view .LVU563
 1974 0002 FFF7FEFF 		bl	SEGGER_RTT_GetKey
 1975              	.LVL208:
1230:RTT/SEGGER_RTT.c ****   } while (r < 0);
 1976              		.loc 1 1230 11 is_stmt 1 discriminator 1 view .LVU564
 1977              		.loc 1 1230 3 is_stmt 0 discriminator 1 view .LVU565
 1978 0006 0028     		cmp	r0, #0
 1979              		.loc 1 1230 3 discriminator 1 view .LVU566
 1980 0008 FBDB     		blt	.L124
1231:RTT/SEGGER_RTT.c ****   return r;
 1981              		.loc 1 1231 3 is_stmt 1 view .LVU567
1232:RTT/SEGGER_RTT.c **** }
 1982              		.loc 1 1232 1 is_stmt 0 view .LVU568
 1983 000a 08BD     		pop	{r3, pc}
 1984              		.cfi_endproc
 1985              	.LFE16:
 1987              		.section	.text.SEGGER_RTT_HasKey,"ax",%progbits
 1988              		.align	1
 1989              		.global	SEGGER_RTT_HasKey
 1990              		.syntax unified
 1991              		.thumb
 1992              		.thumb_func
 1993              		.fpu fpv4-sp-d16
 1995              	SEGGER_RTT_HasKey:
 1996              	.LFB17:
1233:RTT/SEGGER_RTT.c **** 
1234:RTT/SEGGER_RTT.c **** /*********************************************************************
1235:RTT/SEGGER_RTT.c **** *
1236:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_HasKey
1237:RTT/SEGGER_RTT.c **** *
1238:RTT/SEGGER_RTT.c **** *  Function description
1239:RTT/SEGGER_RTT.c **** *    Checks if at least one character for reading is available in the SEGGER RTT buffer.
1240:RTT/SEGGER_RTT.c **** *
1241:RTT/SEGGER_RTT.c **** *  Return value
1242:RTT/SEGGER_RTT.c **** *    == 0 -     No characters are available to read.
1243:RTT/SEGGER_RTT.c **** *    == 1 -     At least one character is available.
1244:RTT/SEGGER_RTT.c **** *
1245:RTT/SEGGER_RTT.c **** *  Notes
1246:RTT/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1247:RTT/SEGGER_RTT.c **** */
1248:RTT/SEGGER_RTT.c **** int SEGGER_RTT_HasKey(void) {
 1997              		.loc 1 1248 29 is_stmt 1 view -0
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 62


 1998              		.cfi_startproc
 1999              		@ args = 0, pretend = 0, frame = 0
 2000              		@ frame_needed = 0, uses_anonymous_args = 0
 2001 0000 08B5     		push	{r3, lr}
 2002              	.LCFI25:
 2003              		.cfi_def_cfa_offset 8
 2004              		.cfi_offset 3, -8
 2005              		.cfi_offset 14, -4
1249:RTT/SEGGER_RTT.c ****   unsigned RdOff;
 2006              		.loc 1 1249 3 view .LVU570
1250:RTT/SEGGER_RTT.c ****   int r;
 2007              		.loc 1 1250 3 view .LVU571
1251:RTT/SEGGER_RTT.c **** 
1252:RTT/SEGGER_RTT.c ****   INIT();
 2008              		.loc 1 1252 3 view .LVU572
 2009              		.loc 1 1252 3 view .LVU573
 2010 0002 074B     		ldr	r3, .L132
 2011 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2012 0006 33B1     		cbz	r3, .L131
 2013              	.L127:
 2014              		.loc 1 1252 3 discriminator 3 view .LVU574
1253:RTT/SEGGER_RTT.c ****   RdOff = _SEGGER_RTT.aDown[0].RdOff;
 2015              		.loc 1 1253 3 discriminator 3 view .LVU575
 2016              		.loc 1 1253 9 is_stmt 0 discriminator 3 view .LVU576
 2017 0008 054B     		ldr	r3, .L132
 2018 000a 1A6F     		ldr	r2, [r3, #112]
 2019              	.LVL209:
1254:RTT/SEGGER_RTT.c ****   if (RdOff != _SEGGER_RTT.aDown[0].WrOff) {
 2020              		.loc 1 1254 3 is_stmt 1 discriminator 3 view .LVU577
 2021              		.loc 1 1254 36 is_stmt 0 discriminator 3 view .LVU578
 2022 000c DB6E     		ldr	r3, [r3, #108]
 2023              		.loc 1 1254 6 discriminator 3 view .LVU579
 2024 000e 9342     		cmp	r3, r2
 2025 0010 04D0     		beq	.L129
1255:RTT/SEGGER_RTT.c ****     r = 1;
 2026              		.loc 1 1255 7 view .LVU580
 2027 0012 0120     		movs	r0, #1
 2028              	.L126:
1256:RTT/SEGGER_RTT.c ****   } else {
1257:RTT/SEGGER_RTT.c ****     r = 0;
1258:RTT/SEGGER_RTT.c ****   }
1259:RTT/SEGGER_RTT.c ****   return r;
1260:RTT/SEGGER_RTT.c **** }
 2029              		.loc 1 1260 1 view .LVU581
 2030 0014 08BD     		pop	{r3, pc}
 2031              	.LVL210:
 2032              	.L131:
1252:RTT/SEGGER_RTT.c ****   RdOff = _SEGGER_RTT.aDown[0].RdOff;
 2033              		.loc 1 1252 3 is_stmt 1 discriminator 1 view .LVU582
 2034 0016 FFF7FEFF 		bl	_DoInit
 2035              	.LVL211:
 2036 001a F5E7     		b	.L127
 2037              	.LVL212:
 2038              	.L129:
1257:RTT/SEGGER_RTT.c ****   }
 2039              		.loc 1 1257 7 is_stmt 0 view .LVU583
 2040 001c 0020     		movs	r0, #0
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 63


 2041              	.LVL213:
1259:RTT/SEGGER_RTT.c **** }
 2042              		.loc 1 1259 3 is_stmt 1 view .LVU584
1259:RTT/SEGGER_RTT.c **** }
 2043              		.loc 1 1259 10 is_stmt 0 view .LVU585
 2044 001e F9E7     		b	.L126
 2045              	.L133:
 2046              		.align	2
 2047              	.L132:
 2048 0020 00000000 		.word	.LANCHOR1
 2049              		.cfi_endproc
 2050              	.LFE17:
 2052              		.section	.text.SEGGER_RTT_HasData,"ax",%progbits
 2053              		.align	1
 2054              		.global	SEGGER_RTT_HasData
 2055              		.syntax unified
 2056              		.thumb
 2057              		.thumb_func
 2058              		.fpu fpv4-sp-d16
 2060              	SEGGER_RTT_HasData:
 2061              	.LVL214:
 2062              	.LFB18:
1261:RTT/SEGGER_RTT.c **** 
1262:RTT/SEGGER_RTT.c **** /*********************************************************************
1263:RTT/SEGGER_RTT.c **** *
1264:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_HasData
1265:RTT/SEGGER_RTT.c **** *
1266:RTT/SEGGER_RTT.c **** *  Function description
1267:RTT/SEGGER_RTT.c **** *    Check if there is data from the host in the given buffer.
1268:RTT/SEGGER_RTT.c **** *
1269:RTT/SEGGER_RTT.c **** *  Return value:
1270:RTT/SEGGER_RTT.c **** *  ==0:  No data
1271:RTT/SEGGER_RTT.c **** *  !=0:  Data in buffer
1272:RTT/SEGGER_RTT.c **** *
1273:RTT/SEGGER_RTT.c **** */
1274:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasData(unsigned BufferIndex) {
 2063              		.loc 1 1274 51 is_stmt 1 view -0
 2064              		.cfi_startproc
 2065              		@ args = 0, pretend = 0, frame = 0
 2066              		@ frame_needed = 0, uses_anonymous_args = 0
 2067              		@ link register save eliminated.
1275:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 2068              		.loc 1 1275 3 view .LVU587
1276:RTT/SEGGER_RTT.c ****   unsigned                v;
 2069              		.loc 1 1276 3 view .LVU588
1277:RTT/SEGGER_RTT.c **** 
1278:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aDown[BufferIndex];
 2070              		.loc 1 1278 3 view .LVU589
1279:RTT/SEGGER_RTT.c ****   v = pRing->WrOff;
 2071              		.loc 1 1279 3 view .LVU590
 2072              		.loc 1 1279 5 is_stmt 0 view .LVU591
 2073 0000 064B     		ldr	r3, .L135
 2074 0002 00EB4002 		add	r2, r0, r0, lsl #1
 2075 0006 03EBC202 		add	r2, r3, r2, lsl #3
 2076 000a D26E     		ldr	r2, [r2, #108]
 2077              	.LVL215:
1280:RTT/SEGGER_RTT.c ****   return v - pRing->RdOff;
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 64


 2078              		.loc 1 1280 3 is_stmt 1 view .LVU592
 2079              		.loc 1 1280 19 is_stmt 0 view .LVU593
 2080 000c 00EB4000 		add	r0, r0, r0, lsl #1
 2081              	.LVL216:
 2082              		.loc 1 1280 19 view .LVU594
 2083 0010 03EBC000 		add	r0, r3, r0, lsl #3
 2084 0014 006F     		ldr	r0, [r0, #112]
1281:RTT/SEGGER_RTT.c **** }
 2085              		.loc 1 1281 1 view .LVU595
 2086 0016 101A     		subs	r0, r2, r0
 2087 0018 7047     		bx	lr
 2088              	.L136:
 2089 001a 00BF     		.align	2
 2090              	.L135:
 2091 001c 00000000 		.word	.LANCHOR1
 2092              		.cfi_endproc
 2093              	.LFE18:
 2095              		.section	.text.SEGGER_RTT_HasDataUp,"ax",%progbits
 2096              		.align	1
 2097              		.global	SEGGER_RTT_HasDataUp
 2098              		.syntax unified
 2099              		.thumb
 2100              		.thumb_func
 2101              		.fpu fpv4-sp-d16
 2103              	SEGGER_RTT_HasDataUp:
 2104              	.LVL217:
 2105              	.LFB19:
1282:RTT/SEGGER_RTT.c **** 
1283:RTT/SEGGER_RTT.c **** /*********************************************************************
1284:RTT/SEGGER_RTT.c **** *
1285:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_HasDataUp
1286:RTT/SEGGER_RTT.c **** *
1287:RTT/SEGGER_RTT.c **** *  Function description
1288:RTT/SEGGER_RTT.c **** *    Check if there is data remaining to be sent in the given buffer.
1289:RTT/SEGGER_RTT.c **** *
1290:RTT/SEGGER_RTT.c **** *  Return value:
1291:RTT/SEGGER_RTT.c **** *  ==0:  No data
1292:RTT/SEGGER_RTT.c **** *  !=0:  Data in buffer
1293:RTT/SEGGER_RTT.c **** *
1294:RTT/SEGGER_RTT.c **** */
1295:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
 2106              		.loc 1 1295 53 is_stmt 1 view -0
 2107              		.cfi_startproc
 2108              		@ args = 0, pretend = 0, frame = 0
 2109              		@ frame_needed = 0, uses_anonymous_args = 0
 2110              		@ link register save eliminated.
1296:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2111              		.loc 1 1296 3 view .LVU597
1297:RTT/SEGGER_RTT.c ****   unsigned                v;
 2112              		.loc 1 1297 3 view .LVU598
1298:RTT/SEGGER_RTT.c **** 
1299:RTT/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 2113              		.loc 1 1299 3 view .LVU599
1300:RTT/SEGGER_RTT.c ****   v = pRing->RdOff;
 2114              		.loc 1 1300 3 view .LVU600
 2115              		.loc 1 1300 5 is_stmt 0 view .LVU601
 2116 0000 064B     		ldr	r3, .L138
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 65


 2117 0002 00EB4002 		add	r2, r0, r0, lsl #1
 2118 0006 03EBC202 		add	r2, r3, r2, lsl #3
 2119 000a 926A     		ldr	r2, [r2, #40]
 2120              	.LVL218:
1301:RTT/SEGGER_RTT.c ****   return pRing->WrOff - v;
 2121              		.loc 1 1301 3 is_stmt 1 view .LVU602
 2122              		.loc 1 1301 15 is_stmt 0 view .LVU603
 2123 000c 00EB4000 		add	r0, r0, r0, lsl #1
 2124              	.LVL219:
 2125              		.loc 1 1301 15 view .LVU604
 2126 0010 03EBC000 		add	r0, r3, r0, lsl #3
 2127 0014 406A     		ldr	r0, [r0, #36]
1302:RTT/SEGGER_RTT.c **** }
 2128              		.loc 1 1302 1 view .LVU605
 2129 0016 801A     		subs	r0, r0, r2
 2130 0018 7047     		bx	lr
 2131              	.L139:
 2132 001a 00BF     		.align	2
 2133              	.L138:
 2134 001c 00000000 		.word	.LANCHOR1
 2135              		.cfi_endproc
 2136              	.LFE19:
 2138              		.section	.text.SEGGER_RTT_AllocDownBuffer,"ax",%progbits
 2139              		.align	1
 2140              		.global	SEGGER_RTT_AllocDownBuffer
 2141              		.syntax unified
 2142              		.thumb
 2143              		.thumb_func
 2144              		.fpu fpv4-sp-d16
 2146              	SEGGER_RTT_AllocDownBuffer:
 2147              	.LVL220:
 2148              	.LFB20:
1303:RTT/SEGGER_RTT.c **** 
1304:RTT/SEGGER_RTT.c **** /*********************************************************************
1305:RTT/SEGGER_RTT.c **** *
1306:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_AllocDownBuffer
1307:RTT/SEGGER_RTT.c **** *
1308:RTT/SEGGER_RTT.c **** *  Function description
1309:RTT/SEGGER_RTT.c **** *    Run-time configuration of the next down-buffer (H->T).
1310:RTT/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1311:RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1312:RTT/SEGGER_RTT.c **** *
1313:RTT/SEGGER_RTT.c **** *  Parameters
1314:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1315:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1316:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1317:RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1318:RTT/SEGGER_RTT.c **** *
1319:RTT/SEGGER_RTT.c **** *  Return value
1320:RTT/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1321:RTT/SEGGER_RTT.c **** *     < 0 - Error
1322:RTT/SEGGER_RTT.c **** */
1323:RTT/SEGGER_RTT.c **** int SEGGER_RTT_AllocDownBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flag
 2149              		.loc 1 1323 103 is_stmt 1 view -0
 2150              		.cfi_startproc
 2151              		@ args = 0, pretend = 0, frame = 0
 2152              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 66


 2153              		.loc 1 1323 103 is_stmt 0 view .LVU607
 2154 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2155              	.LCFI26:
 2156              		.cfi_def_cfa_offset 24
 2157              		.cfi_offset 4, -24
 2158              		.cfi_offset 5, -20
 2159              		.cfi_offset 6, -16
 2160              		.cfi_offset 7, -12
 2161              		.cfi_offset 8, -8
 2162              		.cfi_offset 14, -4
 2163 0004 8046     		mov	r8, r0
 2164 0006 0F46     		mov	r7, r1
 2165 0008 1646     		mov	r6, r2
 2166 000a 1D46     		mov	r5, r3
1324:RTT/SEGGER_RTT.c ****   int BufferIndex;
 2167              		.loc 1 1324 3 is_stmt 1 view .LVU608
1325:RTT/SEGGER_RTT.c **** 
1326:RTT/SEGGER_RTT.c ****   INIT();
 2168              		.loc 1 1326 3 view .LVU609
 2169              		.loc 1 1326 3 view .LVU610
 2170 000c 184B     		ldr	r3, .L148
 2171              	.LVL221:
 2172              		.loc 1 1326 3 is_stmt 0 view .LVU611
 2173 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2174 0010 3BB3     		cbz	r3, .L147
 2175              	.LVL222:
 2176              	.L141:
 2177              		.loc 1 1326 3 is_stmt 1 discriminator 3 view .LVU612
 2178              	.LBB8:
1327:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2179              		.loc 1 1327 3 discriminator 3 view .LVU613
 2180              		.loc 1 1327 3 discriminator 3 view .LVU614
 2181              		.syntax unified
 2182              	@ 1327 "RTT/SEGGER_RTT.c" 1
 2183 0012 EFF31182 		mrs   r2, basepri  
 2184 0016 4FF02001 		mov   r1, #32       
 2185 001a 81F31188 		msr   basepri, r1  
 2186              		
 2187              	@ 0 "" 2
 2188              	.LVL223:
 2189              		.loc 1 1327 20 discriminator 3 view .LVU615
1328:RTT/SEGGER_RTT.c ****   BufferIndex = 0;
 2190              		.loc 1 1328 3 discriminator 3 view .LVU616
 2191              		.loc 1 1328 15 is_stmt 0 discriminator 3 view .LVU617
 2192              		.thumb
 2193              		.syntax unified
 2194 001e 0020     		movs	r0, #0
 2195              	.LVL224:
 2196              	.L143:
1329:RTT/SEGGER_RTT.c ****   do {
 2197              		.loc 1 1329 3 is_stmt 1 view .LVU618
1330:RTT/SEGGER_RTT.c ****     if (_SEGGER_RTT.aDown[BufferIndex].pBuffer == NULL) {
 2198              		.loc 1 1330 5 view .LVU619
 2199              		.loc 1 1330 39 is_stmt 0 view .LVU620
 2200 0020 00EB400C 		add	ip, r0, r0, lsl #1
 2201 0024 124C     		ldr	r4, .L148
 2202 0026 04EBCC0C 		add	ip, r4, ip, lsl #3
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 67


 2203 002a DCF86430 		ldr	r3, [ip, #100]
 2204              		.loc 1 1330 8 view .LVU621
 2205 002e 1BB1     		cbz	r3, .L142
1331:RTT/SEGGER_RTT.c ****       break;
1332:RTT/SEGGER_RTT.c ****     }
1333:RTT/SEGGER_RTT.c ****     BufferIndex++;
 2206              		.loc 1 1333 5 is_stmt 1 view .LVU622
 2207              		.loc 1 1333 16 is_stmt 0 view .LVU623
 2208 0030 0130     		adds	r0, r0, #1
 2209              	.LVL225:
1334:RTT/SEGGER_RTT.c ****   } while (BufferIndex < _SEGGER_RTT.MaxNumDownBuffers);
 2210              		.loc 1 1334 11 is_stmt 1 view .LVU624
 2211              		.loc 1 1334 37 is_stmt 0 view .LVU625
 2212 0032 6369     		ldr	r3, [r4, #20]
 2213              		.loc 1 1334 3 view .LVU626
 2214 0034 8342     		cmp	r3, r0
 2215 0036 F3DC     		bgt	.L143
 2216              	.L142:
1335:RTT/SEGGER_RTT.c ****   if (BufferIndex < _SEGGER_RTT.MaxNumDownBuffers) {
 2217              		.loc 1 1335 3 is_stmt 1 view .LVU627
 2218              		.loc 1 1335 32 is_stmt 0 view .LVU628
 2219 0038 0D4B     		ldr	r3, .L148
 2220 003a 5B69     		ldr	r3, [r3, #20]
 2221              		.loc 1 1335 6 view .LVU629
 2222 003c 8342     		cmp	r3, r0
 2223 003e 13DD     		ble	.L145
1336:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 2224              		.loc 1 1336 5 is_stmt 1 view .LVU630
 2225              		.loc 1 1336 49 is_stmt 0 view .LVU631
 2226 0040 00EB4003 		add	r3, r0, r0, lsl #1
 2227 0044 0A49     		ldr	r1, .L148
 2228 0046 01EBC303 		add	r3, r1, r3, lsl #3
 2229 004a C3F86080 		str	r8, [r3, #96]
1337:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 2230              		.loc 1 1337 5 is_stmt 1 view .LVU632
 2231              		.loc 1 1337 49 is_stmt 0 view .LVU633
 2232 004e 5F66     		str	r7, [r3, #100]
1338:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 2233              		.loc 1 1338 5 is_stmt 1 view .LVU634
 2234              		.loc 1 1338 49 is_stmt 0 view .LVU635
 2235 0050 9E66     		str	r6, [r3, #104]
1339:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 2236              		.loc 1 1339 5 is_stmt 1 view .LVU636
 2237              		.loc 1 1339 49 is_stmt 0 view .LVU637
 2238 0052 0021     		movs	r1, #0
 2239 0054 1967     		str	r1, [r3, #112]
1340:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 2240              		.loc 1 1340 5 is_stmt 1 view .LVU638
 2241              		.loc 1 1340 49 is_stmt 0 view .LVU639
 2242 0056 D966     		str	r1, [r3, #108]
1341:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].Flags        = Flags;
 2243              		.loc 1 1341 5 is_stmt 1 view .LVU640
 2244              		.loc 1 1341 49 is_stmt 0 view .LVU641
 2245 0058 5D67     		str	r5, [r3, #116]
 2246              	.LVL226:
 2247              	.L144:
1342:RTT/SEGGER_RTT.c ****   } else {
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 68


1343:RTT/SEGGER_RTT.c ****     BufferIndex = -1;
1344:RTT/SEGGER_RTT.c ****   }
1345:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2248              		.loc 1 1345 3 is_stmt 1 view .LVU642
 2249              		.syntax unified
 2250              	@ 1345 "RTT/SEGGER_RTT.c" 1
 2251 005a 82F31188 		msr   basepri, r2  
 2252              		
 2253              	@ 0 "" 2
 2254              		.thumb
 2255              		.syntax unified
 2256              	.LBE8:
 2257              		.loc 1 1345 22 view .LVU643
1346:RTT/SEGGER_RTT.c ****   return BufferIndex;
 2258              		.loc 1 1346 3 view .LVU644
1347:RTT/SEGGER_RTT.c **** }
 2259              		.loc 1 1347 1 is_stmt 0 view .LVU645
 2260 005e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2261              	.LVL227:
 2262              	.L147:
1326:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2263              		.loc 1 1326 3 is_stmt 1 discriminator 1 view .LVU646
 2264 0062 FFF7FEFF 		bl	_DoInit
 2265              	.LVL228:
1326:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2266              		.loc 1 1326 3 is_stmt 0 discriminator 1 view .LVU647
 2267 0066 D4E7     		b	.L141
 2268              	.LVL229:
 2269              	.L145:
 2270              	.LBB9:
1343:RTT/SEGGER_RTT.c ****   }
 2271              		.loc 1 1343 17 view .LVU648
 2272 0068 4FF0FF30 		mov	r0, #-1
 2273              	.LVL230:
1343:RTT/SEGGER_RTT.c ****   }
 2274              		.loc 1 1343 17 view .LVU649
 2275 006c F5E7     		b	.L144
 2276              	.L149:
 2277 006e 00BF     		.align	2
 2278              	.L148:
 2279 0070 00000000 		.word	.LANCHOR1
 2280              	.LBE9:
 2281              		.cfi_endproc
 2282              	.LFE20:
 2284              		.section	.text.SEGGER_RTT_AllocUpBuffer,"ax",%progbits
 2285              		.align	1
 2286              		.global	SEGGER_RTT_AllocUpBuffer
 2287              		.syntax unified
 2288              		.thumb
 2289              		.thumb_func
 2290              		.fpu fpv4-sp-d16
 2292              	SEGGER_RTT_AllocUpBuffer:
 2293              	.LVL231:
 2294              	.LFB21:
1348:RTT/SEGGER_RTT.c **** 
1349:RTT/SEGGER_RTT.c **** /*********************************************************************
1350:RTT/SEGGER_RTT.c **** *
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 69


1351:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_AllocUpBuffer
1352:RTT/SEGGER_RTT.c **** *
1353:RTT/SEGGER_RTT.c **** *  Function description
1354:RTT/SEGGER_RTT.c **** *    Run-time configuration of the next up-buffer (T->H).
1355:RTT/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1356:RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1357:RTT/SEGGER_RTT.c **** *
1358:RTT/SEGGER_RTT.c **** *  Parameters
1359:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1360:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1361:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1362:RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1363:RTT/SEGGER_RTT.c **** *
1364:RTT/SEGGER_RTT.c **** *  Return value
1365:RTT/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1366:RTT/SEGGER_RTT.c **** *     < 0 - Error
1367:RTT/SEGGER_RTT.c **** */
1368:RTT/SEGGER_RTT.c **** int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags)
 2295              		.loc 1 1368 101 is_stmt 1 view -0
 2296              		.cfi_startproc
 2297              		@ args = 0, pretend = 0, frame = 0
 2298              		@ frame_needed = 0, uses_anonymous_args = 0
 2299              		.loc 1 1368 101 is_stmt 0 view .LVU651
 2300 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2301              	.LCFI27:
 2302              		.cfi_def_cfa_offset 24
 2303              		.cfi_offset 3, -24
 2304              		.cfi_offset 4, -20
 2305              		.cfi_offset 5, -16
 2306              		.cfi_offset 6, -12
 2307              		.cfi_offset 7, -8
 2308              		.cfi_offset 14, -4
 2309 0002 0746     		mov	r7, r0
 2310 0004 0E46     		mov	r6, r1
 2311 0006 1546     		mov	r5, r2
 2312 0008 1C46     		mov	r4, r3
1369:RTT/SEGGER_RTT.c ****   int BufferIndex;
 2313              		.loc 1 1369 3 is_stmt 1 view .LVU652
1370:RTT/SEGGER_RTT.c **** 
1371:RTT/SEGGER_RTT.c ****   INIT();
 2314              		.loc 1 1371 3 view .LVU653
 2315              		.loc 1 1371 3 view .LVU654
 2316 000a 1C4B     		ldr	r3, .L158
 2317              	.LVL232:
 2318              		.loc 1 1371 3 is_stmt 0 view .LVU655
 2319 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2320 000e 73B3     		cbz	r3, .L157
 2321              	.LVL233:
 2322              	.L151:
 2323              		.loc 1 1371 3 is_stmt 1 discriminator 3 view .LVU656
 2324              	.LBB10:
1372:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2325              		.loc 1 1372 3 discriminator 3 view .LVU657
 2326              		.loc 1 1372 3 discriminator 3 view .LVU658
 2327              		.syntax unified
 2328              	@ 1372 "RTT/SEGGER_RTT.c" 1
 2329 0010 EFF31182 		mrs   r2, basepri  
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 70


 2330 0014 4FF02001 		mov   r1, #32       
 2331 0018 81F31188 		msr   basepri, r1  
 2332              		
 2333              	@ 0 "" 2
 2334              	.LVL234:
 2335              		.loc 1 1372 20 discriminator 3 view .LVU659
1373:RTT/SEGGER_RTT.c ****   BufferIndex = 0;
 2336              		.loc 1 1373 3 discriminator 3 view .LVU660
 2337              		.loc 1 1373 15 is_stmt 0 discriminator 3 view .LVU661
 2338              		.thumb
 2339              		.syntax unified
 2340 001c 0020     		movs	r0, #0
 2341              	.LVL235:
 2342              	.L153:
1374:RTT/SEGGER_RTT.c ****   do {
 2343              		.loc 1 1374 3 is_stmt 1 view .LVU662
1375:RTT/SEGGER_RTT.c ****     if (_SEGGER_RTT.aUp[BufferIndex].pBuffer == NULL) {
 2344              		.loc 1 1375 5 view .LVU663
 2345              		.loc 1 1375 37 is_stmt 0 view .LVU664
 2346 001e 00F1010C 		add	ip, r0, #1
 2347 0022 0CEB4C0C 		add	ip, ip, ip, lsl #1
 2348 0026 154B     		ldr	r3, .L158
 2349 0028 03EBCC0C 		add	ip, r3, ip, lsl #3
 2350 002c DCF80430 		ldr	r3, [ip, #4]
 2351              		.loc 1 1375 8 view .LVU665
 2352 0030 23B1     		cbz	r3, .L152
1376:RTT/SEGGER_RTT.c ****       break;
1377:RTT/SEGGER_RTT.c ****     }
1378:RTT/SEGGER_RTT.c ****     BufferIndex++;
 2353              		.loc 1 1378 5 is_stmt 1 view .LVU666
 2354              		.loc 1 1378 16 is_stmt 0 view .LVU667
 2355 0032 0130     		adds	r0, r0, #1
 2356              	.LVL236:
1379:RTT/SEGGER_RTT.c ****   } while (BufferIndex < _SEGGER_RTT.MaxNumUpBuffers);
 2357              		.loc 1 1379 11 is_stmt 1 view .LVU668
 2358              		.loc 1 1379 37 is_stmt 0 view .LVU669
 2359 0034 114B     		ldr	r3, .L158
 2360 0036 1B69     		ldr	r3, [r3, #16]
 2361              		.loc 1 1379 3 view .LVU670
 2362 0038 8342     		cmp	r3, r0
 2363 003a F0DC     		bgt	.L153
 2364              	.L152:
1380:RTT/SEGGER_RTT.c ****   if (BufferIndex < _SEGGER_RTT.MaxNumUpBuffers) {
 2365              		.loc 1 1380 3 is_stmt 1 view .LVU671
 2366              		.loc 1 1380 32 is_stmt 0 view .LVU672
 2367 003c 0F4B     		ldr	r3, .L158
 2368 003e 1B69     		ldr	r3, [r3, #16]
 2369              		.loc 1 1380 6 view .LVU673
 2370 0040 8342     		cmp	r3, r0
 2371 0042 17DD     		ble	.L155
1381:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 2372              		.loc 1 1381 5 is_stmt 1 view .LVU674
 2373              		.loc 1 1381 47 is_stmt 0 view .LVU675
 2374 0044 0D4B     		ldr	r3, .L158
 2375 0046 411C     		adds	r1, r0, #1
 2376 0048 01EB410C 		add	ip, r1, r1, lsl #1
 2377 004c 43F83C70 		str	r7, [r3, ip, lsl #3]
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 71


1382:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 2378              		.loc 1 1382 5 is_stmt 1 view .LVU676
 2379              		.loc 1 1382 47 is_stmt 0 view .LVU677
 2380 0050 03EBCC01 		add	r1, r3, ip, lsl #3
 2381 0054 4E60     		str	r6, [r1, #4]
1383:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 2382              		.loc 1 1383 5 is_stmt 1 view .LVU678
 2383              		.loc 1 1383 47 is_stmt 0 view .LVU679
 2384 0056 00EB4001 		add	r1, r0, r0, lsl #1
 2385 005a 03EBC103 		add	r3, r3, r1, lsl #3
 2386 005e 1D62     		str	r5, [r3, #32]
1384:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 2387              		.loc 1 1384 5 is_stmt 1 view .LVU680
 2388              		.loc 1 1384 47 is_stmt 0 view .LVU681
 2389 0060 0021     		movs	r1, #0
 2390 0062 9962     		str	r1, [r3, #40]
1385:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 2391              		.loc 1 1385 5 is_stmt 1 view .LVU682
 2392              		.loc 1 1385 47 is_stmt 0 view .LVU683
 2393 0064 5962     		str	r1, [r3, #36]
1386:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].Flags        = Flags;
 2394              		.loc 1 1386 5 is_stmt 1 view .LVU684
 2395              		.loc 1 1386 47 is_stmt 0 view .LVU685
 2396 0066 DC62     		str	r4, [r3, #44]
 2397              	.LVL237:
 2398              	.L154:
1387:RTT/SEGGER_RTT.c ****   } else {
1388:RTT/SEGGER_RTT.c ****     BufferIndex = -1;
1389:RTT/SEGGER_RTT.c ****   }
1390:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2399              		.loc 1 1390 3 is_stmt 1 view .LVU686
 2400              		.syntax unified
 2401              	@ 1390 "RTT/SEGGER_RTT.c" 1
 2402 0068 82F31188 		msr   basepri, r2  
 2403              		
 2404              	@ 0 "" 2
 2405              		.thumb
 2406              		.syntax unified
 2407              	.LBE10:
 2408              		.loc 1 1390 22 view .LVU687
1391:RTT/SEGGER_RTT.c ****   return BufferIndex;
 2409              		.loc 1 1391 3 view .LVU688
1392:RTT/SEGGER_RTT.c **** }
 2410              		.loc 1 1392 1 is_stmt 0 view .LVU689
 2411 006c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2412              	.LVL238:
 2413              	.L157:
1371:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2414              		.loc 1 1371 3 is_stmt 1 discriminator 1 view .LVU690
 2415 006e FFF7FEFF 		bl	_DoInit
 2416              	.LVL239:
1371:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2417              		.loc 1 1371 3 is_stmt 0 discriminator 1 view .LVU691
 2418 0072 CDE7     		b	.L151
 2419              	.LVL240:
 2420              	.L155:
 2421              	.LBB11:
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 72


1388:RTT/SEGGER_RTT.c ****   }
 2422              		.loc 1 1388 17 view .LVU692
 2423 0074 4FF0FF30 		mov	r0, #-1
 2424              	.LVL241:
1388:RTT/SEGGER_RTT.c ****   }
 2425              		.loc 1 1388 17 view .LVU693
 2426 0078 F6E7     		b	.L154
 2427              	.L159:
 2428 007a 00BF     		.align	2
 2429              	.L158:
 2430 007c 00000000 		.word	.LANCHOR1
 2431              	.LBE11:
 2432              		.cfi_endproc
 2433              	.LFE21:
 2435              		.section	.text.SEGGER_RTT_ConfigUpBuffer,"ax",%progbits
 2436              		.align	1
 2437              		.global	SEGGER_RTT_ConfigUpBuffer
 2438              		.syntax unified
 2439              		.thumb
 2440              		.thumb_func
 2441              		.fpu fpv4-sp-d16
 2443              	SEGGER_RTT_ConfigUpBuffer:
 2444              	.LVL242:
 2445              	.LFB22:
1393:RTT/SEGGER_RTT.c **** 
1394:RTT/SEGGER_RTT.c **** /*********************************************************************
1395:RTT/SEGGER_RTT.c **** *
1396:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigUpBuffer
1397:RTT/SEGGER_RTT.c **** *
1398:RTT/SEGGER_RTT.c **** *  Function description
1399:RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer (T->H).
1400:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1401:RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1402:RTT/SEGGER_RTT.c **** *
1403:RTT/SEGGER_RTT.c **** *  Parameters
1404:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1405:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1406:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1407:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1408:RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1409:RTT/SEGGER_RTT.c **** *
1410:RTT/SEGGER_RTT.c **** *  Return value
1411:RTT/SEGGER_RTT.c **** *    >= 0 - O.K.
1412:RTT/SEGGER_RTT.c **** *     < 0 - Error
1413:RTT/SEGGER_RTT.c **** *
1414:RTT/SEGGER_RTT.c **** *  Additional information
1415:RTT/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1416:RTT/SEGGER_RTT.c **** *    May only be called once per buffer.
1417:RTT/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1418:RTT/SEGGER_RTT.c **** */
1419:RTT/SEGGER_RTT.c **** int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Buff
 2446              		.loc 1 1419 124 is_stmt 1 view -0
 2447              		.cfi_startproc
 2448              		@ args = 4, pretend = 0, frame = 0
 2449              		@ frame_needed = 0, uses_anonymous_args = 0
 2450              		.loc 1 1419 124 is_stmt 0 view .LVU695
 2451 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 73


 2452              	.LCFI28:
 2453              		.cfi_def_cfa_offset 24
 2454              		.cfi_offset 4, -24
 2455              		.cfi_offset 5, -20
 2456              		.cfi_offset 6, -16
 2457              		.cfi_offset 7, -12
 2458              		.cfi_offset 8, -8
 2459              		.cfi_offset 14, -4
 2460 0004 0446     		mov	r4, r0
 2461 0006 8846     		mov	r8, r1
 2462 0008 1746     		mov	r7, r2
 2463 000a 1E46     		mov	r6, r3
1420:RTT/SEGGER_RTT.c ****   int r;
 2464              		.loc 1 1420 3 is_stmt 1 view .LVU696
1421:RTT/SEGGER_RTT.c **** 
1422:RTT/SEGGER_RTT.c ****   INIT();
 2465              		.loc 1 1422 3 view .LVU697
 2466              		.loc 1 1422 3 view .LVU698
 2467 000c 184B     		ldr	r3, .L167
 2468              	.LVL243:
 2469              		.loc 1 1422 3 is_stmt 0 view .LVU699
 2470 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2471 0010 3BB3     		cbz	r3, .L166
 2472              	.LVL244:
 2473              	.L161:
 2474              		.loc 1 1422 3 is_stmt 1 discriminator 3 view .LVU700
1423:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2475              		.loc 1 1423 3 discriminator 3 view .LVU701
 2476              		.loc 1 1423 42 is_stmt 0 discriminator 3 view .LVU702
 2477 0012 174B     		ldr	r3, .L167
 2478 0014 1B69     		ldr	r3, [r3, #16]
 2479              		.loc 1 1423 6 discriminator 3 view .LVU703
 2480 0016 A342     		cmp	r3, r4
 2481 0018 26D9     		bls	.L164
 2482              	.LBB12:
1424:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2483              		.loc 1 1424 5 is_stmt 1 view .LVU704
 2484              		.loc 1 1424 5 view .LVU705
 2485              		.syntax unified
 2486              	@ 1424 "RTT/SEGGER_RTT.c" 1
 2487 001a EFF31183 		mrs   r3, basepri  
 2488 001e 4FF02001 		mov   r1, #32       
 2489 0022 81F31188 		msr   basepri, r1  
 2490              		
 2491              	@ 0 "" 2
 2492              	.LVL245:
 2493              		.loc 1 1424 22 view .LVU706
1425:RTT/SEGGER_RTT.c ****     if (BufferIndex > 0u) {
 2494              		.loc 1 1425 5 view .LVU707
 2495              		.loc 1 1425 8 is_stmt 0 view .LVU708
 2496              		.thumb
 2497              		.syntax unified
 2498 0026 84B1     		cbz	r4, .L163
1426:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 2499              		.loc 1 1426 7 is_stmt 1 view .LVU709
 2500              		.loc 1 1426 49 is_stmt 0 view .LVU710
 2501 0028 114D     		ldr	r5, .L167
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 74


 2502 002a 601C     		adds	r0, r4, #1
 2503 002c 00EB4002 		add	r2, r0, r0, lsl #1
 2504 0030 45F83280 		str	r8, [r5, r2, lsl #3]
1427:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 2505              		.loc 1 1427 7 is_stmt 1 view .LVU711
 2506              		.loc 1 1427 49 is_stmt 0 view .LVU712
 2507 0034 05EBC200 		add	r0, r5, r2, lsl #3
 2508 0038 4760     		str	r7, [r0, #4]
1428:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 2509              		.loc 1 1428 7 is_stmt 1 view .LVU713
 2510              		.loc 1 1428 49 is_stmt 0 view .LVU714
 2511 003a 04EB4402 		add	r2, r4, r4, lsl #1
 2512 003e 05EBC202 		add	r2, r5, r2, lsl #3
 2513 0042 1662     		str	r6, [r2, #32]
1429:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 2514              		.loc 1 1429 7 is_stmt 1 view .LVU715
 2515              		.loc 1 1429 49 is_stmt 0 view .LVU716
 2516 0044 0021     		movs	r1, #0
 2517 0046 9162     		str	r1, [r2, #40]
1430:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 2518              		.loc 1 1430 7 is_stmt 1 view .LVU717
 2519              		.loc 1 1430 49 is_stmt 0 view .LVU718
 2520 0048 5162     		str	r1, [r2, #36]
 2521              	.L163:
1431:RTT/SEGGER_RTT.c ****     }
1432:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 2522              		.loc 1 1432 5 is_stmt 1 view .LVU719
 2523              		.loc 1 1432 49 is_stmt 0 view .LVU720
 2524 004a 04EB4404 		add	r4, r4, r4, lsl #1
 2525              	.LVL246:
 2526              		.loc 1 1432 49 view .LVU721
 2527 004e 0848     		ldr	r0, .L167
 2528 0050 00EBC404 		add	r4, r0, r4, lsl #3
 2529 0054 069A     		ldr	r2, [sp, #24]
 2530 0056 E262     		str	r2, [r4, #44]
1433:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2531              		.loc 1 1433 5 is_stmt 1 view .LVU722
 2532              		.syntax unified
 2533              	@ 1433 "RTT/SEGGER_RTT.c" 1
 2534 0058 83F31188 		msr   basepri, r3  
 2535              		
 2536              	@ 0 "" 2
 2537              		.thumb
 2538              		.syntax unified
 2539              	.LBE12:
 2540              		.loc 1 1433 24 view .LVU723
1434:RTT/SEGGER_RTT.c ****     r =  0;
 2541              		.loc 1 1434 5 view .LVU724
 2542              	.LVL247:
 2543              		.loc 1 1434 7 is_stmt 0 view .LVU725
 2544 005c 0020     		movs	r0, #0
 2545              	.LVL248:
 2546              	.L160:
1435:RTT/SEGGER_RTT.c ****   } else {
1436:RTT/SEGGER_RTT.c ****     r = -1;
1437:RTT/SEGGER_RTT.c ****   }
1438:RTT/SEGGER_RTT.c ****   return r;
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 75


1439:RTT/SEGGER_RTT.c **** }
 2547              		.loc 1 1439 1 view .LVU726
 2548 005e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2549              	.LVL249:
 2550              	.L166:
1422:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2551              		.loc 1 1422 3 is_stmt 1 discriminator 1 view .LVU727
 2552 0062 FFF7FEFF 		bl	_DoInit
 2553              	.LVL250:
1422:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2554              		.loc 1 1422 3 is_stmt 0 discriminator 1 view .LVU728
 2555 0066 D4E7     		b	.L161
 2556              	.L164:
1436:RTT/SEGGER_RTT.c ****   }
 2557              		.loc 1 1436 7 view .LVU729
 2558 0068 4FF0FF30 		mov	r0, #-1
 2559              	.LVL251:
1438:RTT/SEGGER_RTT.c **** }
 2560              		.loc 1 1438 3 is_stmt 1 view .LVU730
1438:RTT/SEGGER_RTT.c **** }
 2561              		.loc 1 1438 10 is_stmt 0 view .LVU731
 2562 006c F7E7     		b	.L160
 2563              	.L168:
 2564 006e 00BF     		.align	2
 2565              	.L167:
 2566 0070 00000000 		.word	.LANCHOR1
 2567              		.cfi_endproc
 2568              	.LFE22:
 2570              		.section	.text.SEGGER_RTT_ConfigDownBuffer,"ax",%progbits
 2571              		.align	1
 2572              		.global	SEGGER_RTT_ConfigDownBuffer
 2573              		.syntax unified
 2574              		.thumb
 2575              		.thumb_func
 2576              		.fpu fpv4-sp-d16
 2578              	SEGGER_RTT_ConfigDownBuffer:
 2579              	.LVL252:
 2580              	.LFB23:
1440:RTT/SEGGER_RTT.c **** 
1441:RTT/SEGGER_RTT.c **** /*********************************************************************
1442:RTT/SEGGER_RTT.c **** *
1443:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigDownBuffer
1444:RTT/SEGGER_RTT.c **** *
1445:RTT/SEGGER_RTT.c **** *  Function description
1446:RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific down-buffer (H->T).
1447:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1448:RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1449:RTT/SEGGER_RTT.c **** *
1450:RTT/SEGGER_RTT.c **** *  Parameters
1451:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1452:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1453:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1454:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1455:RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1456:RTT/SEGGER_RTT.c **** *
1457:RTT/SEGGER_RTT.c **** *  Return value
1458:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 76


1459:RTT/SEGGER_RTT.c **** *     < 0  Error
1460:RTT/SEGGER_RTT.c **** *
1461:RTT/SEGGER_RTT.c **** *  Additional information
1462:RTT/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1463:RTT/SEGGER_RTT.c **** *    May only be called once per buffer.
1464:RTT/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1465:RTT/SEGGER_RTT.c **** */
1466:RTT/SEGGER_RTT.c **** int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Bu
 2581              		.loc 1 1466 126 is_stmt 1 view -0
 2582              		.cfi_startproc
 2583              		@ args = 4, pretend = 0, frame = 0
 2584              		@ frame_needed = 0, uses_anonymous_args = 0
 2585              		.loc 1 1466 126 is_stmt 0 view .LVU733
 2586 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2587              	.LCFI29:
 2588              		.cfi_def_cfa_offset 24
 2589              		.cfi_offset 4, -24
 2590              		.cfi_offset 5, -20
 2591              		.cfi_offset 6, -16
 2592              		.cfi_offset 7, -12
 2593              		.cfi_offset 8, -8
 2594              		.cfi_offset 14, -4
 2595 0004 0446     		mov	r4, r0
 2596 0006 8846     		mov	r8, r1
 2597 0008 1746     		mov	r7, r2
 2598 000a 1E46     		mov	r6, r3
1467:RTT/SEGGER_RTT.c ****   int r;
 2599              		.loc 1 1467 3 is_stmt 1 view .LVU734
1468:RTT/SEGGER_RTT.c **** 
1469:RTT/SEGGER_RTT.c ****   INIT();
 2600              		.loc 1 1469 3 view .LVU735
 2601              		.loc 1 1469 3 view .LVU736
 2602 000c 154B     		ldr	r3, .L176
 2603              	.LVL253:
 2604              		.loc 1 1469 3 is_stmt 0 view .LVU737
 2605 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2606 0010 13B3     		cbz	r3, .L175
 2607              	.LVL254:
 2608              	.L170:
 2609              		.loc 1 1469 3 is_stmt 1 discriminator 3 view .LVU738
1470:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2610              		.loc 1 1470 3 discriminator 3 view .LVU739
 2611              		.loc 1 1470 42 is_stmt 0 discriminator 3 view .LVU740
 2612 0012 144B     		ldr	r3, .L176
 2613 0014 5B69     		ldr	r3, [r3, #20]
 2614              		.loc 1 1470 6 discriminator 3 view .LVU741
 2615 0016 A342     		cmp	r3, r4
 2616 0018 21D9     		bls	.L173
 2617              	.LBB13:
1471:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2618              		.loc 1 1471 5 is_stmt 1 view .LVU742
 2619              		.loc 1 1471 5 view .LVU743
 2620              		.syntax unified
 2621              	@ 1471 "RTT/SEGGER_RTT.c" 1
 2622 001a EFF31183 		mrs   r3, basepri  
 2623 001e 4FF02001 		mov   r1, #32       
 2624 0022 81F31188 		msr   basepri, r1  
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 77


 2625              		
 2626              	@ 0 "" 2
 2627              	.LVL255:
 2628              		.loc 1 1471 22 view .LVU744
1472:RTT/SEGGER_RTT.c ****     if (BufferIndex > 0u) {
 2629              		.loc 1 1472 5 view .LVU745
 2630              		.loc 1 1472 8 is_stmt 0 view .LVU746
 2631              		.thumb
 2632              		.syntax unified
 2633 0026 5CB1     		cbz	r4, .L172
1473:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 2634              		.loc 1 1473 7 is_stmt 1 view .LVU747
 2635              		.loc 1 1473 51 is_stmt 0 view .LVU748
 2636 0028 04EB4400 		add	r0, r4, r4, lsl #1
 2637 002c 0D4D     		ldr	r5, .L176
 2638 002e 05EBC000 		add	r0, r5, r0, lsl #3
 2639 0032 C0F86080 		str	r8, [r0, #96]
1474:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 2640              		.loc 1 1474 7 is_stmt 1 view .LVU749
 2641              		.loc 1 1474 51 is_stmt 0 view .LVU750
 2642 0036 4766     		str	r7, [r0, #100]
1475:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 2643              		.loc 1 1475 7 is_stmt 1 view .LVU751
 2644              		.loc 1 1475 51 is_stmt 0 view .LVU752
 2645 0038 8666     		str	r6, [r0, #104]
1476:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 2646              		.loc 1 1476 7 is_stmt 1 view .LVU753
 2647              		.loc 1 1476 51 is_stmt 0 view .LVU754
 2648 003a 0022     		movs	r2, #0
 2649 003c 0267     		str	r2, [r0, #112]
1477:RTT/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 2650              		.loc 1 1477 7 is_stmt 1 view .LVU755
 2651              		.loc 1 1477 51 is_stmt 0 view .LVU756
 2652 003e C266     		str	r2, [r0, #108]
 2653              	.L172:
1478:RTT/SEGGER_RTT.c ****     }
1479:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 2654              		.loc 1 1479 5 is_stmt 1 view .LVU757
 2655              		.loc 1 1479 51 is_stmt 0 view .LVU758
 2656 0040 04EB4404 		add	r4, r4, r4, lsl #1
 2657              	.LVL256:
 2658              		.loc 1 1479 51 view .LVU759
 2659 0044 0748     		ldr	r0, .L176
 2660 0046 00EBC404 		add	r4, r0, r4, lsl #3
 2661 004a 069A     		ldr	r2, [sp, #24]
 2662 004c 6267     		str	r2, [r4, #116]
1480:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2663              		.loc 1 1480 5 is_stmt 1 view .LVU760
 2664              		.syntax unified
 2665              	@ 1480 "RTT/SEGGER_RTT.c" 1
 2666 004e 83F31188 		msr   basepri, r3  
 2667              		
 2668              	@ 0 "" 2
 2669              		.thumb
 2670              		.syntax unified
 2671              	.LBE13:
 2672              		.loc 1 1480 24 view .LVU761
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 78


1481:RTT/SEGGER_RTT.c ****     r =  0;
 2673              		.loc 1 1481 5 view .LVU762
 2674              	.LVL257:
 2675              		.loc 1 1481 7 is_stmt 0 view .LVU763
 2676 0052 0020     		movs	r0, #0
 2677              	.LVL258:
 2678              	.L169:
1482:RTT/SEGGER_RTT.c ****   } else {
1483:RTT/SEGGER_RTT.c ****     r = -1;
1484:RTT/SEGGER_RTT.c ****   }
1485:RTT/SEGGER_RTT.c ****   return r;
1486:RTT/SEGGER_RTT.c **** }
 2679              		.loc 1 1486 1 view .LVU764
 2680 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2681              	.LVL259:
 2682              	.L175:
1469:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2683              		.loc 1 1469 3 is_stmt 1 discriminator 1 view .LVU765
 2684 0058 FFF7FEFF 		bl	_DoInit
 2685              	.LVL260:
1469:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2686              		.loc 1 1469 3 is_stmt 0 discriminator 1 view .LVU766
 2687 005c D9E7     		b	.L170
 2688              	.L173:
1483:RTT/SEGGER_RTT.c ****   }
 2689              		.loc 1 1483 7 view .LVU767
 2690 005e 4FF0FF30 		mov	r0, #-1
 2691              	.LVL261:
1485:RTT/SEGGER_RTT.c **** }
 2692              		.loc 1 1485 3 is_stmt 1 view .LVU768
1485:RTT/SEGGER_RTT.c **** }
 2693              		.loc 1 1485 10 is_stmt 0 view .LVU769
 2694 0062 F7E7     		b	.L169
 2695              	.L177:
 2696              		.align	2
 2697              	.L176:
 2698 0064 00000000 		.word	.LANCHOR1
 2699              		.cfi_endproc
 2700              	.LFE23:
 2702              		.section	.text.SEGGER_RTT_SetNameUpBuffer,"ax",%progbits
 2703              		.align	1
 2704              		.global	SEGGER_RTT_SetNameUpBuffer
 2705              		.syntax unified
 2706              		.thumb
 2707              		.thumb_func
 2708              		.fpu fpv4-sp-d16
 2710              	SEGGER_RTT_SetNameUpBuffer:
 2711              	.LVL262:
 2712              	.LFB24:
1487:RTT/SEGGER_RTT.c **** 
1488:RTT/SEGGER_RTT.c **** /*********************************************************************
1489:RTT/SEGGER_RTT.c **** *
1490:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameUpBuffer
1491:RTT/SEGGER_RTT.c **** *
1492:RTT/SEGGER_RTT.c **** *  Function description
1493:RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer name (T->H).
1494:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 79


1495:RTT/SEGGER_RTT.c **** *
1496:RTT/SEGGER_RTT.c **** *  Parameters
1497:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1498:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1499:RTT/SEGGER_RTT.c **** *
1500:RTT/SEGGER_RTT.c **** *  Return value
1501:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1502:RTT/SEGGER_RTT.c **** *     < 0  Error
1503:RTT/SEGGER_RTT.c **** */
1504:RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetNameUpBuffer(unsigned BufferIndex, const char* sName) {
 2713              		.loc 1 1504 73 is_stmt 1 view -0
 2714              		.cfi_startproc
 2715              		@ args = 0, pretend = 0, frame = 0
 2716              		@ frame_needed = 0, uses_anonymous_args = 0
 2717              		.loc 1 1504 73 is_stmt 0 view .LVU771
 2718 0000 38B5     		push	{r3, r4, r5, lr}
 2719              	.LCFI30:
 2720              		.cfi_def_cfa_offset 16
 2721              		.cfi_offset 3, -16
 2722              		.cfi_offset 4, -12
 2723              		.cfi_offset 5, -8
 2724              		.cfi_offset 14, -4
 2725 0002 0446     		mov	r4, r0
 2726 0004 0D46     		mov	r5, r1
1505:RTT/SEGGER_RTT.c ****   int r;
 2727              		.loc 1 1505 3 is_stmt 1 view .LVU772
1506:RTT/SEGGER_RTT.c **** 
1507:RTT/SEGGER_RTT.c ****   INIT();
 2728              		.loc 1 1507 3 view .LVU773
 2729              		.loc 1 1507 3 view .LVU774
 2730 0006 0E4B     		ldr	r3, .L184
 2731 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2732 000a 9BB1     		cbz	r3, .L183
 2733              	.LVL263:
 2734              	.L179:
 2735              		.loc 1 1507 3 discriminator 3 view .LVU775
1508:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2736              		.loc 1 1508 3 discriminator 3 view .LVU776
 2737              		.loc 1 1508 42 is_stmt 0 discriminator 3 view .LVU777
 2738 000c 0C4B     		ldr	r3, .L184
 2739 000e 1B69     		ldr	r3, [r3, #16]
 2740              		.loc 1 1508 6 discriminator 3 view .LVU778
 2741 0010 A342     		cmp	r3, r4
 2742 0012 12D9     		bls	.L181
 2743              	.LBB14:
1509:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2744              		.loc 1 1509 5 is_stmt 1 view .LVU779
 2745              		.loc 1 1509 5 view .LVU780
 2746              		.syntax unified
 2747              	@ 1509 "RTT/SEGGER_RTT.c" 1
 2748 0014 EFF31183 		mrs   r3, basepri  
 2749 0018 4FF02001 		mov   r1, #32       
 2750 001c 81F31188 		msr   basepri, r1  
 2751              		
 2752              	@ 0 "" 2
 2753              	.LVL264:
 2754              		.loc 1 1509 22 view .LVU781
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 80


1510:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].sName = sName;
 2755              		.loc 1 1510 5 view .LVU782
 2756              		.loc 1 1510 40 is_stmt 0 view .LVU783
 2757              		.thumb
 2758              		.syntax unified
 2759 0020 0134     		adds	r4, r4, #1
 2760              	.LVL265:
 2761              		.loc 1 1510 40 view .LVU784
 2762 0022 04EB4404 		add	r4, r4, r4, lsl #1
 2763              	.LVL266:
 2764              		.loc 1 1510 40 view .LVU785
 2765 0026 064A     		ldr	r2, .L184
 2766 0028 42F83450 		str	r5, [r2, r4, lsl #3]
1511:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2767              		.loc 1 1511 5 is_stmt 1 view .LVU786
 2768              		.syntax unified
 2769              	@ 1511 "RTT/SEGGER_RTT.c" 1
 2770 002c 83F31188 		msr   basepri, r3  
 2771              		
 2772              	@ 0 "" 2
 2773              		.thumb
 2774              		.syntax unified
 2775              	.LBE14:
 2776              		.loc 1 1511 24 view .LVU787
1512:RTT/SEGGER_RTT.c ****     r =  0;
 2777              		.loc 1 1512 5 view .LVU788
 2778              	.LVL267:
 2779              		.loc 1 1512 7 is_stmt 0 view .LVU789
 2780 0030 0020     		movs	r0, #0
 2781              	.LVL268:
 2782              	.L178:
1513:RTT/SEGGER_RTT.c ****   } else {
1514:RTT/SEGGER_RTT.c ****     r = -1;
1515:RTT/SEGGER_RTT.c ****   }
1516:RTT/SEGGER_RTT.c ****   return r;
1517:RTT/SEGGER_RTT.c **** }
 2783              		.loc 1 1517 1 view .LVU790
 2784 0032 38BD     		pop	{r3, r4, r5, pc}
 2785              	.LVL269:
 2786              	.L183:
1507:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2787              		.loc 1 1507 3 is_stmt 1 discriminator 1 view .LVU791
 2788 0034 FFF7FEFF 		bl	_DoInit
 2789              	.LVL270:
1507:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2790              		.loc 1 1507 3 is_stmt 0 discriminator 1 view .LVU792
 2791 0038 E8E7     		b	.L179
 2792              	.L181:
1514:RTT/SEGGER_RTT.c ****   }
 2793              		.loc 1 1514 7 view .LVU793
 2794 003a 4FF0FF30 		mov	r0, #-1
 2795              	.LVL271:
1516:RTT/SEGGER_RTT.c **** }
 2796              		.loc 1 1516 3 is_stmt 1 view .LVU794
1516:RTT/SEGGER_RTT.c **** }
 2797              		.loc 1 1516 10 is_stmt 0 view .LVU795
 2798 003e F8E7     		b	.L178
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 81


 2799              	.L185:
 2800              		.align	2
 2801              	.L184:
 2802 0040 00000000 		.word	.LANCHOR1
 2803              		.cfi_endproc
 2804              	.LFE24:
 2806              		.section	.text.SEGGER_RTT_SetNameDownBuffer,"ax",%progbits
 2807              		.align	1
 2808              		.global	SEGGER_RTT_SetNameDownBuffer
 2809              		.syntax unified
 2810              		.thumb
 2811              		.thumb_func
 2812              		.fpu fpv4-sp-d16
 2814              	SEGGER_RTT_SetNameDownBuffer:
 2815              	.LVL272:
 2816              	.LFB25:
1518:RTT/SEGGER_RTT.c **** 
1519:RTT/SEGGER_RTT.c **** /*********************************************************************
1520:RTT/SEGGER_RTT.c **** *
1521:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameDownBuffer
1522:RTT/SEGGER_RTT.c **** *
1523:RTT/SEGGER_RTT.c **** *  Function description
1524:RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific Down-buffer name (T->H).
1525:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1526:RTT/SEGGER_RTT.c **** *
1527:RTT/SEGGER_RTT.c **** *  Parameters
1528:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1529:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1530:RTT/SEGGER_RTT.c **** *
1531:RTT/SEGGER_RTT.c **** *  Return value
1532:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1533:RTT/SEGGER_RTT.c **** *     < 0  Error
1534:RTT/SEGGER_RTT.c **** */
1535:RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetNameDownBuffer(unsigned BufferIndex, const char* sName) {
 2817              		.loc 1 1535 75 is_stmt 1 view -0
 2818              		.cfi_startproc
 2819              		@ args = 0, pretend = 0, frame = 0
 2820              		@ frame_needed = 0, uses_anonymous_args = 0
 2821              		.loc 1 1535 75 is_stmt 0 view .LVU797
 2822 0000 38B5     		push	{r3, r4, r5, lr}
 2823              	.LCFI31:
 2824              		.cfi_def_cfa_offset 16
 2825              		.cfi_offset 3, -16
 2826              		.cfi_offset 4, -12
 2827              		.cfi_offset 5, -8
 2828              		.cfi_offset 14, -4
 2829 0002 0446     		mov	r4, r0
 2830 0004 0D46     		mov	r5, r1
1536:RTT/SEGGER_RTT.c ****   int r;
 2831              		.loc 1 1536 3 is_stmt 1 view .LVU798
1537:RTT/SEGGER_RTT.c **** 
1538:RTT/SEGGER_RTT.c ****   INIT();
 2832              		.loc 1 1538 3 view .LVU799
 2833              		.loc 1 1538 3 view .LVU800
 2834 0006 0E4B     		ldr	r3, .L192
 2835 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2836 000a 9BB1     		cbz	r3, .L191
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 82


 2837              	.LVL273:
 2838              	.L187:
 2839              		.loc 1 1538 3 discriminator 3 view .LVU801
1539:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2840              		.loc 1 1539 3 discriminator 3 view .LVU802
 2841              		.loc 1 1539 42 is_stmt 0 discriminator 3 view .LVU803
 2842 000c 0C4B     		ldr	r3, .L192
 2843 000e 5B69     		ldr	r3, [r3, #20]
 2844              		.loc 1 1539 6 discriminator 3 view .LVU804
 2845 0010 A342     		cmp	r3, r4
 2846 0012 12D9     		bls	.L189
 2847              	.LBB15:
1540:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2848              		.loc 1 1540 5 is_stmt 1 view .LVU805
 2849              		.loc 1 1540 5 view .LVU806
 2850              		.syntax unified
 2851              	@ 1540 "RTT/SEGGER_RTT.c" 1
 2852 0014 EFF31183 		mrs   r3, basepri  
 2853 0018 4FF02001 		mov   r1, #32       
 2854 001c 81F31188 		msr   basepri, r1  
 2855              		
 2856              	@ 0 "" 2
 2857              	.LVL274:
 2858              		.loc 1 1540 22 view .LVU807
1541:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].sName = sName;
 2859              		.loc 1 1541 5 view .LVU808
 2860              		.loc 1 1541 42 is_stmt 0 view .LVU809
 2861              		.thumb
 2862              		.syntax unified
 2863 0020 04EB4404 		add	r4, r4, r4, lsl #1
 2864              	.LVL275:
 2865              		.loc 1 1541 42 view .LVU810
 2866 0024 0648     		ldr	r0, .L192
 2867 0026 00EBC404 		add	r4, r0, r4, lsl #3
 2868 002a 2566     		str	r5, [r4, #96]
1542:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2869              		.loc 1 1542 5 is_stmt 1 view .LVU811
 2870              		.syntax unified
 2871              	@ 1542 "RTT/SEGGER_RTT.c" 1
 2872 002c 83F31188 		msr   basepri, r3  
 2873              		
 2874              	@ 0 "" 2
 2875              		.thumb
 2876              		.syntax unified
 2877              	.LBE15:
 2878              		.loc 1 1542 24 view .LVU812
1543:RTT/SEGGER_RTT.c ****     r =  0;
 2879              		.loc 1 1543 5 view .LVU813
 2880              	.LVL276:
 2881              		.loc 1 1543 7 is_stmt 0 view .LVU814
 2882 0030 0020     		movs	r0, #0
 2883              	.LVL277:
 2884              	.L186:
1544:RTT/SEGGER_RTT.c ****   } else {
1545:RTT/SEGGER_RTT.c ****     r = -1;
1546:RTT/SEGGER_RTT.c ****   }
1547:RTT/SEGGER_RTT.c ****   return r;
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 83


1548:RTT/SEGGER_RTT.c **** }
 2885              		.loc 1 1548 1 view .LVU815
 2886 0032 38BD     		pop	{r3, r4, r5, pc}
 2887              	.LVL278:
 2888              	.L191:
1538:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2889              		.loc 1 1538 3 is_stmt 1 discriminator 1 view .LVU816
 2890 0034 FFF7FEFF 		bl	_DoInit
 2891              	.LVL279:
1538:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2892              		.loc 1 1538 3 is_stmt 0 discriminator 1 view .LVU817
 2893 0038 E8E7     		b	.L187
 2894              	.L189:
1545:RTT/SEGGER_RTT.c ****   }
 2895              		.loc 1 1545 7 view .LVU818
 2896 003a 4FF0FF30 		mov	r0, #-1
 2897              	.LVL280:
1547:RTT/SEGGER_RTT.c **** }
 2898              		.loc 1 1547 3 is_stmt 1 view .LVU819
1547:RTT/SEGGER_RTT.c **** }
 2899              		.loc 1 1547 10 is_stmt 0 view .LVU820
 2900 003e F8E7     		b	.L186
 2901              	.L193:
 2902              		.align	2
 2903              	.L192:
 2904 0040 00000000 		.word	.LANCHOR1
 2905              		.cfi_endproc
 2906              	.LFE25:
 2908              		.section	.text.SEGGER_RTT_SetFlagsUpBuffer,"ax",%progbits
 2909              		.align	1
 2910              		.global	SEGGER_RTT_SetFlagsUpBuffer
 2911              		.syntax unified
 2912              		.thumb
 2913              		.thumb_func
 2914              		.fpu fpv4-sp-d16
 2916              	SEGGER_RTT_SetFlagsUpBuffer:
 2917              	.LVL281:
 2918              	.LFB26:
1549:RTT/SEGGER_RTT.c **** 
1550:RTT/SEGGER_RTT.c **** /*********************************************************************
1551:RTT/SEGGER_RTT.c **** *
1552:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsUpBuffer
1553:RTT/SEGGER_RTT.c **** *
1554:RTT/SEGGER_RTT.c **** *  Function description
1555:RTT/SEGGER_RTT.c **** *    Run-time configuration of specific up-buffer flags (T->H).
1556:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1557:RTT/SEGGER_RTT.c **** *
1558:RTT/SEGGER_RTT.c **** *  Parameters
1559:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer.
1560:RTT/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1561:RTT/SEGGER_RTT.c **** *
1562:RTT/SEGGER_RTT.c **** *  Return value
1563:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1564:RTT/SEGGER_RTT.c **** *     < 0  Error
1565:RTT/SEGGER_RTT.c **** */
1566:RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsUpBuffer(unsigned BufferIndex, unsigned Flags) {
 2919              		.loc 1 1566 71 is_stmt 1 view -0
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 84


 2920              		.cfi_startproc
 2921              		@ args = 0, pretend = 0, frame = 0
 2922              		@ frame_needed = 0, uses_anonymous_args = 0
 2923              		.loc 1 1566 71 is_stmt 0 view .LVU822
 2924 0000 38B5     		push	{r3, r4, r5, lr}
 2925              	.LCFI32:
 2926              		.cfi_def_cfa_offset 16
 2927              		.cfi_offset 3, -16
 2928              		.cfi_offset 4, -12
 2929              		.cfi_offset 5, -8
 2930              		.cfi_offset 14, -4
 2931 0002 0446     		mov	r4, r0
 2932 0004 0D46     		mov	r5, r1
1567:RTT/SEGGER_RTT.c ****   int r;
 2933              		.loc 1 1567 3 is_stmt 1 view .LVU823
1568:RTT/SEGGER_RTT.c **** 
1569:RTT/SEGGER_RTT.c ****   INIT();
 2934              		.loc 1 1569 3 view .LVU824
 2935              		.loc 1 1569 3 view .LVU825
 2936 0006 0E4B     		ldr	r3, .L200
 2937 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2938 000a 9BB1     		cbz	r3, .L199
 2939              	.LVL282:
 2940              	.L195:
 2941              		.loc 1 1569 3 discriminator 3 view .LVU826
1570:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2942              		.loc 1 1570 3 discriminator 3 view .LVU827
 2943              		.loc 1 1570 42 is_stmt 0 discriminator 3 view .LVU828
 2944 000c 0C4B     		ldr	r3, .L200
 2945 000e 1B69     		ldr	r3, [r3, #16]
 2946              		.loc 1 1570 6 discriminator 3 view .LVU829
 2947 0010 A342     		cmp	r3, r4
 2948 0012 12D9     		bls	.L197
 2949              	.LBB16:
1571:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2950              		.loc 1 1571 5 is_stmt 1 view .LVU830
 2951              		.loc 1 1571 5 view .LVU831
 2952              		.syntax unified
 2953              	@ 1571 "RTT/SEGGER_RTT.c" 1
 2954 0014 EFF31183 		mrs   r3, basepri  
 2955 0018 4FF02001 		mov   r1, #32       
 2956 001c 81F31188 		msr   basepri, r1  
 2957              		
 2958              	@ 0 "" 2
 2959              	.LVL283:
 2960              		.loc 1 1571 22 view .LVU832
1572:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].Flags = Flags;
 2961              		.loc 1 1572 5 view .LVU833
 2962              		.loc 1 1572 40 is_stmt 0 view .LVU834
 2963              		.thumb
 2964              		.syntax unified
 2965 0020 04EB4404 		add	r4, r4, r4, lsl #1
 2966              	.LVL284:
 2967              		.loc 1 1572 40 view .LVU835
 2968 0024 0648     		ldr	r0, .L200
 2969 0026 00EBC404 		add	r4, r0, r4, lsl #3
 2970 002a E562     		str	r5, [r4, #44]
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 85


1573:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2971              		.loc 1 1573 5 is_stmt 1 view .LVU836
 2972              		.syntax unified
 2973              	@ 1573 "RTT/SEGGER_RTT.c" 1
 2974 002c 83F31188 		msr   basepri, r3  
 2975              		
 2976              	@ 0 "" 2
 2977              		.thumb
 2978              		.syntax unified
 2979              	.LBE16:
 2980              		.loc 1 1573 24 view .LVU837
1574:RTT/SEGGER_RTT.c ****     r =  0;
 2981              		.loc 1 1574 5 view .LVU838
 2982              	.LVL285:
 2983              		.loc 1 1574 7 is_stmt 0 view .LVU839
 2984 0030 0020     		movs	r0, #0
 2985              	.LVL286:
 2986              	.L194:
1575:RTT/SEGGER_RTT.c ****   } else {
1576:RTT/SEGGER_RTT.c ****     r = -1;
1577:RTT/SEGGER_RTT.c ****   }
1578:RTT/SEGGER_RTT.c ****   return r;
1579:RTT/SEGGER_RTT.c **** }
 2987              		.loc 1 1579 1 view .LVU840
 2988 0032 38BD     		pop	{r3, r4, r5, pc}
 2989              	.LVL287:
 2990              	.L199:
1569:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2991              		.loc 1 1569 3 is_stmt 1 discriminator 1 view .LVU841
 2992 0034 FFF7FEFF 		bl	_DoInit
 2993              	.LVL288:
1569:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2994              		.loc 1 1569 3 is_stmt 0 discriminator 1 view .LVU842
 2995 0038 E8E7     		b	.L195
 2996              	.L197:
1576:RTT/SEGGER_RTT.c ****   }
 2997              		.loc 1 1576 7 view .LVU843
 2998 003a 4FF0FF30 		mov	r0, #-1
 2999              	.LVL289:
1578:RTT/SEGGER_RTT.c **** }
 3000              		.loc 1 1578 3 is_stmt 1 view .LVU844
1578:RTT/SEGGER_RTT.c **** }
 3001              		.loc 1 1578 10 is_stmt 0 view .LVU845
 3002 003e F8E7     		b	.L194
 3003              	.L201:
 3004              		.align	2
 3005              	.L200:
 3006 0040 00000000 		.word	.LANCHOR1
 3007              		.cfi_endproc
 3008              	.LFE26:
 3010              		.section	.text.SEGGER_RTT_SetFlagsDownBuffer,"ax",%progbits
 3011              		.align	1
 3012              		.global	SEGGER_RTT_SetFlagsDownBuffer
 3013              		.syntax unified
 3014              		.thumb
 3015              		.thumb_func
 3016              		.fpu fpv4-sp-d16
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 86


 3018              	SEGGER_RTT_SetFlagsDownBuffer:
 3019              	.LVL290:
 3020              	.LFB27:
1580:RTT/SEGGER_RTT.c **** 
1581:RTT/SEGGER_RTT.c **** /*********************************************************************
1582:RTT/SEGGER_RTT.c **** *
1583:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsDownBuffer
1584:RTT/SEGGER_RTT.c **** *
1585:RTT/SEGGER_RTT.c **** *  Function description
1586:RTT/SEGGER_RTT.c **** *    Run-time configuration of specific Down-buffer flags (T->H).
1587:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1588:RTT/SEGGER_RTT.c **** *
1589:RTT/SEGGER_RTT.c **** *  Parameters
1590:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1591:RTT/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1592:RTT/SEGGER_RTT.c **** *
1593:RTT/SEGGER_RTT.c **** *  Return value
1594:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1595:RTT/SEGGER_RTT.c **** *     < 0  Error
1596:RTT/SEGGER_RTT.c **** */
1597:RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsDownBuffer(unsigned BufferIndex, unsigned Flags) {
 3021              		.loc 1 1597 73 is_stmt 1 view -0
 3022              		.cfi_startproc
 3023              		@ args = 0, pretend = 0, frame = 0
 3024              		@ frame_needed = 0, uses_anonymous_args = 0
 3025              		.loc 1 1597 73 is_stmt 0 view .LVU847
 3026 0000 38B5     		push	{r3, r4, r5, lr}
 3027              	.LCFI33:
 3028              		.cfi_def_cfa_offset 16
 3029              		.cfi_offset 3, -16
 3030              		.cfi_offset 4, -12
 3031              		.cfi_offset 5, -8
 3032              		.cfi_offset 14, -4
 3033 0002 0446     		mov	r4, r0
 3034 0004 0D46     		mov	r5, r1
1598:RTT/SEGGER_RTT.c ****   int r;
 3035              		.loc 1 1598 3 is_stmt 1 view .LVU848
1599:RTT/SEGGER_RTT.c **** 
1600:RTT/SEGGER_RTT.c ****   INIT();
 3036              		.loc 1 1600 3 view .LVU849
 3037              		.loc 1 1600 3 view .LVU850
 3038 0006 0E4B     		ldr	r3, .L208
 3039 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3040 000a 9BB1     		cbz	r3, .L207
 3041              	.LVL291:
 3042              	.L203:
 3043              		.loc 1 1600 3 discriminator 3 view .LVU851
1601:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 3044              		.loc 1 1601 3 discriminator 3 view .LVU852
 3045              		.loc 1 1601 42 is_stmt 0 discriminator 3 view .LVU853
 3046 000c 0C4B     		ldr	r3, .L208
 3047 000e 5B69     		ldr	r3, [r3, #20]
 3048              		.loc 1 1601 6 discriminator 3 view .LVU854
 3049 0010 A342     		cmp	r3, r4
 3050 0012 12D9     		bls	.L205
 3051              	.LBB17:
1602:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 87


 3052              		.loc 1 1602 5 is_stmt 1 view .LVU855
 3053              		.loc 1 1602 5 view .LVU856
 3054              		.syntax unified
 3055              	@ 1602 "RTT/SEGGER_RTT.c" 1
 3056 0014 EFF31183 		mrs   r3, basepri  
 3057 0018 4FF02001 		mov   r1, #32       
 3058 001c 81F31188 		msr   basepri, r1  
 3059              		
 3060              	@ 0 "" 2
 3061              	.LVL292:
 3062              		.loc 1 1602 22 view .LVU857
1603:RTT/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].Flags = Flags;
 3063              		.loc 1 1603 5 view .LVU858
 3064              		.loc 1 1603 42 is_stmt 0 view .LVU859
 3065              		.thumb
 3066              		.syntax unified
 3067 0020 04EB4404 		add	r4, r4, r4, lsl #1
 3068              	.LVL293:
 3069              		.loc 1 1603 42 view .LVU860
 3070 0024 0648     		ldr	r0, .L208
 3071 0026 00EBC404 		add	r4, r0, r4, lsl #3
 3072 002a 6567     		str	r5, [r4, #116]
1604:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3073              		.loc 1 1604 5 is_stmt 1 view .LVU861
 3074              		.syntax unified
 3075              	@ 1604 "RTT/SEGGER_RTT.c" 1
 3076 002c 83F31188 		msr   basepri, r3  
 3077              		
 3078              	@ 0 "" 2
 3079              		.thumb
 3080              		.syntax unified
 3081              	.LBE17:
 3082              		.loc 1 1604 24 view .LVU862
1605:RTT/SEGGER_RTT.c ****     r =  0;
 3083              		.loc 1 1605 5 view .LVU863
 3084              	.LVL294:
 3085              		.loc 1 1605 7 is_stmt 0 view .LVU864
 3086 0030 0020     		movs	r0, #0
 3087              	.LVL295:
 3088              	.L202:
1606:RTT/SEGGER_RTT.c ****   } else {
1607:RTT/SEGGER_RTT.c ****     r = -1;
1608:RTT/SEGGER_RTT.c ****   }
1609:RTT/SEGGER_RTT.c ****   return r;
1610:RTT/SEGGER_RTT.c **** }
 3089              		.loc 1 1610 1 view .LVU865
 3090 0032 38BD     		pop	{r3, r4, r5, pc}
 3091              	.LVL296:
 3092              	.L207:
1600:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 3093              		.loc 1 1600 3 is_stmt 1 discriminator 1 view .LVU866
 3094 0034 FFF7FEFF 		bl	_DoInit
 3095              	.LVL297:
1600:RTT/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 3096              		.loc 1 1600 3 is_stmt 0 discriminator 1 view .LVU867
 3097 0038 E8E7     		b	.L203
 3098              	.L205:
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 88


1607:RTT/SEGGER_RTT.c ****   }
 3099              		.loc 1 1607 7 view .LVU868
 3100 003a 4FF0FF30 		mov	r0, #-1
 3101              	.LVL298:
1609:RTT/SEGGER_RTT.c **** }
 3102              		.loc 1 1609 3 is_stmt 1 view .LVU869
1609:RTT/SEGGER_RTT.c **** }
 3103              		.loc 1 1609 10 is_stmt 0 view .LVU870
 3104 003e F8E7     		b	.L202
 3105              	.L209:
 3106              		.align	2
 3107              	.L208:
 3108 0040 00000000 		.word	.LANCHOR1
 3109              		.cfi_endproc
 3110              	.LFE27:
 3112              		.section	.text.SEGGER_RTT_Init,"ax",%progbits
 3113              		.align	1
 3114              		.global	SEGGER_RTT_Init
 3115              		.syntax unified
 3116              		.thumb
 3117              		.thumb_func
 3118              		.fpu fpv4-sp-d16
 3120              	SEGGER_RTT_Init:
 3121              	.LFB28:
1611:RTT/SEGGER_RTT.c **** 
1612:RTT/SEGGER_RTT.c **** /*********************************************************************
1613:RTT/SEGGER_RTT.c **** *
1614:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_Init
1615:RTT/SEGGER_RTT.c **** *
1616:RTT/SEGGER_RTT.c **** *  Function description
1617:RTT/SEGGER_RTT.c **** *    Initializes the RTT Control Block.
1618:RTT/SEGGER_RTT.c **** *    Should be used in RAM targets, at start of the application.
1619:RTT/SEGGER_RTT.c **** *
1620:RTT/SEGGER_RTT.c **** */
1621:RTT/SEGGER_RTT.c **** void SEGGER_RTT_Init (void) {
 3122              		.loc 1 1621 29 is_stmt 1 view -0
 3123              		.cfi_startproc
 3124              		@ args = 0, pretend = 0, frame = 0
 3125              		@ frame_needed = 0, uses_anonymous_args = 0
 3126 0000 08B5     		push	{r3, lr}
 3127              	.LCFI34:
 3128              		.cfi_def_cfa_offset 8
 3129              		.cfi_offset 3, -8
 3130              		.cfi_offset 14, -4
1622:RTT/SEGGER_RTT.c ****   _DoInit();
 3131              		.loc 1 1622 3 view .LVU872
 3132 0002 FFF7FEFF 		bl	_DoInit
 3133              	.LVL299:
1623:RTT/SEGGER_RTT.c **** }
 3134              		.loc 1 1623 1 is_stmt 0 view .LVU873
 3135 0006 08BD     		pop	{r3, pc}
 3136              		.cfi_endproc
 3137              	.LFE28:
 3139              		.section	.text.SEGGER_RTT_SetTerminal,"ax",%progbits
 3140              		.align	1
 3141              		.global	SEGGER_RTT_SetTerminal
 3142              		.syntax unified
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 89


 3143              		.thumb
 3144              		.thumb_func
 3145              		.fpu fpv4-sp-d16
 3147              	SEGGER_RTT_SetTerminal:
 3148              	.LVL300:
 3149              	.LFB29:
1624:RTT/SEGGER_RTT.c **** 
1625:RTT/SEGGER_RTT.c **** /*********************************************************************
1626:RTT/SEGGER_RTT.c **** *
1627:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetTerminal
1628:RTT/SEGGER_RTT.c **** *
1629:RTT/SEGGER_RTT.c **** *  Function description
1630:RTT/SEGGER_RTT.c **** *    Sets the terminal to be used for output on channel 0.
1631:RTT/SEGGER_RTT.c **** *
1632:RTT/SEGGER_RTT.c **** *  Parameters
1633:RTT/SEGGER_RTT.c **** *    TerminalId  Index of the terminal.
1634:RTT/SEGGER_RTT.c **** *
1635:RTT/SEGGER_RTT.c **** *  Return value
1636:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1637:RTT/SEGGER_RTT.c **** *     < 0  Error (e.g. if RTT is configured for non-blocking mode and there was no space in the buf
1638:RTT/SEGGER_RTT.c **** */
1639:RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetTerminal (char TerminalId) {
 3150              		.loc 1 1639 46 is_stmt 1 view -0
 3151              		.cfi_startproc
 3152              		@ args = 0, pretend = 0, frame = 8
 3153              		@ frame_needed = 0, uses_anonymous_args = 0
 3154              		.loc 1 1639 46 is_stmt 0 view .LVU875
 3155 0000 30B5     		push	{r4, r5, lr}
 3156              	.LCFI35:
 3157              		.cfi_def_cfa_offset 12
 3158              		.cfi_offset 4, -12
 3159              		.cfi_offset 5, -8
 3160              		.cfi_offset 14, -4
 3161 0002 83B0     		sub	sp, sp, #12
 3162              	.LCFI36:
 3163              		.cfi_def_cfa_offset 24
 3164 0004 0446     		mov	r4, r0
1640:RTT/SEGGER_RTT.c ****   unsigned char         ac[2];
 3165              		.loc 1 1640 3 is_stmt 1 view .LVU876
1641:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 3166              		.loc 1 1641 3 view .LVU877
1642:RTT/SEGGER_RTT.c ****   unsigned Avail;
 3167              		.loc 1 1642 3 view .LVU878
1643:RTT/SEGGER_RTT.c ****   int r;
 3168              		.loc 1 1643 3 view .LVU879
1644:RTT/SEGGER_RTT.c ****   //
1645:RTT/SEGGER_RTT.c ****   INIT();
 3169              		.loc 1 1645 3 view .LVU880
 3170              		.loc 1 1645 3 view .LVU881
 3171 0006 1D4B     		ldr	r3, .L223
 3172 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3173 000a FBB1     		cbz	r3, .L220
 3174              	.LVL301:
 3175              	.L213:
 3176              		.loc 1 1645 3 discriminator 3 view .LVU882
1646:RTT/SEGGER_RTT.c ****   //
1647:RTT/SEGGER_RTT.c ****   r = 0;
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 90


 3177              		.loc 1 1647 3 discriminator 3 view .LVU883
1648:RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3178              		.loc 1 1648 3 discriminator 3 view .LVU884
 3179              		.loc 1 1648 9 is_stmt 0 discriminator 3 view .LVU885
 3180 000c FF23     		movs	r3, #255
 3181 000e 8DF80430 		strb	r3, [sp, #4]
1649:RTT/SEGGER_RTT.c ****   if ((unsigned char)TerminalId < (unsigned char)sizeof(_aTerminalId)) { // We only support a certa
 3182              		.loc 1 1649 3 is_stmt 1 discriminator 3 view .LVU886
 3183              		.loc 1 1649 6 is_stmt 0 discriminator 3 view .LVU887
 3184 0012 0F2C     		cmp	r4, #15
 3185 0014 2FD8     		bhi	.L217
1650:RTT/SEGGER_RTT.c ****     ac[1] = _aTerminalId[(unsigned char)TerminalId];
 3186              		.loc 1 1650 5 is_stmt 1 view .LVU888
 3187              		.loc 1 1650 25 is_stmt 0 view .LVU889
 3188 0016 1A4B     		ldr	r3, .L223+4
 3189 0018 1B5D     		ldrb	r3, [r3, r4]	@ zero_extendqisi2
 3190              		.loc 1 1650 11 view .LVU890
 3191 001a 8DF80530 		strb	r3, [sp, #5]
1651:RTT/SEGGER_RTT.c ****     pRing = &_SEGGER_RTT.aUp[0];    // Buffer 0 is always reserved for terminal I/O, so we can use 
 3192              		.loc 1 1651 5 is_stmt 1 view .LVU891
 3193              	.LVL302:
 3194              	.LBB18:
1652:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();    // Lock to make sure that no other task is writing into buffer, while we 
 3195              		.loc 1 1652 5 view .LVU892
 3196              		.loc 1 1652 5 view .LVU893
 3197              		.syntax unified
 3198              	@ 1652 "RTT/SEGGER_RTT.c" 1
 3199 001e EFF31185 		mrs   r5, basepri  
 3200 0022 4FF02001 		mov   r1, #32       
 3201 0026 81F31188 		msr   basepri, r1  
 3202              		
 3203              	@ 0 "" 2
 3204              	.LVL303:
 3205              		.loc 1 1652 22 view .LVU894
1653:RTT/SEGGER_RTT.c ****     if ((pRing->Flags & SEGGER_RTT_MODE_MASK) == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 3206              		.loc 1 1653 5 view .LVU895
 3207              		.loc 1 1653 15 is_stmt 0 view .LVU896
 3208              		.thumb
 3209              		.syntax unified
 3210 002a 144B     		ldr	r3, .L223
 3211 002c DB6A     		ldr	r3, [r3, #44]
 3212              		.loc 1 1653 23 view .LVU897
 3213 002e 03F00303 		and	r3, r3, #3
 3214              		.loc 1 1653 8 view .LVU898
 3215 0032 022B     		cmp	r3, #2
 3216 0034 0DD0     		beq	.L221
1654:RTT/SEGGER_RTT.c ****       _ActiveTerminal = TerminalId;
1655:RTT/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
1656:RTT/SEGGER_RTT.c ****     } else {                                                                            // Skipping
1657:RTT/SEGGER_RTT.c ****       Avail = _GetAvailWriteSpace(pRing);
 3217              		.loc 1 1657 7 is_stmt 1 view .LVU899
 3218              		.loc 1 1657 15 is_stmt 0 view .LVU900
 3219 0036 1348     		ldr	r0, .L223+8
 3220 0038 FFF7FEFF 		bl	_GetAvailWriteSpace
 3221              	.LVL304:
1658:RTT/SEGGER_RTT.c ****       if (Avail >= 2) {
 3222              		.loc 1 1658 7 is_stmt 1 view .LVU901
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 91


 3223              		.loc 1 1658 10 is_stmt 0 view .LVU902
 3224 003c 0128     		cmp	r0, #1
 3225 003e 11D8     		bhi	.L222
1659:RTT/SEGGER_RTT.c ****         _ActiveTerminal = TerminalId;    // Only change active terminal in case of success
1660:RTT/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
1661:RTT/SEGGER_RTT.c ****       } else {
1662:RTT/SEGGER_RTT.c ****         r = -1;
 3226              		.loc 1 1662 11 view .LVU903
 3227 0040 4FF0FF30 		mov	r0, #-1
 3228              	.LVL305:
 3229              	.L216:
1663:RTT/SEGGER_RTT.c ****       }
1664:RTT/SEGGER_RTT.c ****     }
1665:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3230              		.loc 1 1665 5 is_stmt 1 view .LVU904
 3231              		.syntax unified
 3232              	@ 1665 "RTT/SEGGER_RTT.c" 1
 3233 0044 85F31188 		msr   basepri, r5  
 3234              		
 3235              	@ 0 "" 2
 3236              		.thumb
 3237              		.syntax unified
 3238              	.LBE18:
 3239              		.loc 1 1665 24 view .LVU905
 3240              	.LVL306:
 3241              	.L212:
1666:RTT/SEGGER_RTT.c ****   } else {
1667:RTT/SEGGER_RTT.c ****     r = -1;
1668:RTT/SEGGER_RTT.c ****   }
1669:RTT/SEGGER_RTT.c ****   return r;
1670:RTT/SEGGER_RTT.c **** }
 3242              		.loc 1 1670 1 is_stmt 0 view .LVU906
 3243 0048 03B0     		add	sp, sp, #12
 3244              	.LCFI37:
 3245              		.cfi_remember_state
 3246              		.cfi_def_cfa_offset 12
 3247              		@ sp needed
 3248 004a 30BD     		pop	{r4, r5, pc}
 3249              	.LVL307:
 3250              	.L220:
 3251              	.LCFI38:
 3252              		.cfi_restore_state
1645:RTT/SEGGER_RTT.c ****   //
 3253              		.loc 1 1645 3 is_stmt 1 discriminator 1 view .LVU907
 3254 004c FFF7FEFF 		bl	_DoInit
 3255              	.LVL308:
1645:RTT/SEGGER_RTT.c ****   //
 3256              		.loc 1 1645 3 is_stmt 0 discriminator 1 view .LVU908
 3257 0050 DCE7     		b	.L213
 3258              	.LVL309:
 3259              	.L221:
 3260              	.LBB19:
1654:RTT/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 3261              		.loc 1 1654 7 is_stmt 1 view .LVU909
1654:RTT/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 3262              		.loc 1 1654 23 is_stmt 0 view .LVU910
 3263 0052 0D4B     		ldr	r3, .L223+12
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 92


 3264 0054 1C70     		strb	r4, [r3]
1655:RTT/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 3265              		.loc 1 1655 7 is_stmt 1 view .LVU911
 3266 0056 0222     		movs	r2, #2
 3267 0058 01A9     		add	r1, sp, #4
 3268 005a 0A48     		ldr	r0, .L223+8
 3269 005c FFF7FEFF 		bl	_WriteBlocking
 3270              	.LVL310:
 3271              	.LBE19:
1647:RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3272              		.loc 1 1647 5 is_stmt 0 view .LVU912
 3273 0060 0020     		movs	r0, #0
 3274              	.LBB20:
 3275 0062 EFE7     		b	.L216
 3276              	.LVL311:
 3277              	.L222:
1659:RTT/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 3278              		.loc 1 1659 9 is_stmt 1 view .LVU913
1659:RTT/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 3279              		.loc 1 1659 25 is_stmt 0 view .LVU914
 3280 0064 084B     		ldr	r3, .L223+12
 3281 0066 1C70     		strb	r4, [r3]
1660:RTT/SEGGER_RTT.c ****       } else {
 3282              		.loc 1 1660 9 is_stmt 1 view .LVU915
 3283 0068 0222     		movs	r2, #2
 3284 006a 01A9     		add	r1, sp, #4
 3285 006c 0548     		ldr	r0, .L223+8
 3286              	.LVL312:
1660:RTT/SEGGER_RTT.c ****       } else {
 3287              		.loc 1 1660 9 is_stmt 0 view .LVU916
 3288 006e FFF7FEFF 		bl	_WriteNoCheck
 3289              	.LVL313:
 3290              	.LBE20:
1647:RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3291              		.loc 1 1647 5 view .LVU917
 3292 0072 0020     		movs	r0, #0
 3293              	.LBB21:
 3294 0074 E6E7     		b	.L216
 3295              	.LVL314:
 3296              	.L217:
1647:RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3297              		.loc 1 1647 5 view .LVU918
 3298              	.LBE21:
1667:RTT/SEGGER_RTT.c ****   }
 3299              		.loc 1 1667 7 view .LVU919
 3300 0076 4FF0FF30 		mov	r0, #-1
 3301              	.LVL315:
1669:RTT/SEGGER_RTT.c **** }
 3302              		.loc 1 1669 3 is_stmt 1 view .LVU920
1669:RTT/SEGGER_RTT.c **** }
 3303              		.loc 1 1669 10 is_stmt 0 view .LVU921
 3304 007a E5E7     		b	.L212
 3305              	.L224:
 3306              		.align	2
 3307              	.L223:
 3308 007c 00000000 		.word	.LANCHOR1
 3309 0080 00000000 		.word	.LANCHOR0
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 93


 3310 0084 18000000 		.word	.LANCHOR1+24
 3311 0088 00000000 		.word	.LANCHOR4
 3312              		.cfi_endproc
 3313              	.LFE29:
 3315              		.section	.text.SEGGER_RTT_TerminalOut,"ax",%progbits
 3316              		.align	1
 3317              		.global	SEGGER_RTT_TerminalOut
 3318              		.syntax unified
 3319              		.thumb
 3320              		.thumb_func
 3321              		.fpu fpv4-sp-d16
 3323              	SEGGER_RTT_TerminalOut:
 3324              	.LVL316:
 3325              	.LFB30:
1671:RTT/SEGGER_RTT.c **** 
1672:RTT/SEGGER_RTT.c **** /*********************************************************************
1673:RTT/SEGGER_RTT.c **** *
1674:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_TerminalOut
1675:RTT/SEGGER_RTT.c **** *
1676:RTT/SEGGER_RTT.c **** *  Function description
1677:RTT/SEGGER_RTT.c **** *    Writes a string to the given terminal
1678:RTT/SEGGER_RTT.c **** *     without changing the terminal for channel 0.
1679:RTT/SEGGER_RTT.c **** *
1680:RTT/SEGGER_RTT.c **** *  Parameters
1681:RTT/SEGGER_RTT.c **** *    TerminalId   Index of the terminal.
1682:RTT/SEGGER_RTT.c **** *    s            String to be printed on the terminal.
1683:RTT/SEGGER_RTT.c **** *
1684:RTT/SEGGER_RTT.c **** *  Return value
1685:RTT/SEGGER_RTT.c **** *    >= 0 - Number of bytes written.
1686:RTT/SEGGER_RTT.c **** *     < 0 - Error.
1687:RTT/SEGGER_RTT.c **** *
1688:RTT/SEGGER_RTT.c **** */
1689:RTT/SEGGER_RTT.c **** int SEGGER_RTT_TerminalOut (char TerminalId, const char* s) {
 3326              		.loc 1 1689 61 is_stmt 1 view -0
 3327              		.cfi_startproc
 3328              		@ args = 0, pretend = 0, frame = 0
 3329              		@ frame_needed = 0, uses_anonymous_args = 0
 3330              		.loc 1 1689 61 is_stmt 0 view .LVU923
 3331 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3332              	.LCFI39:
 3333              		.cfi_def_cfa_offset 32
 3334              		.cfi_offset 3, -32
 3335              		.cfi_offset 4, -28
 3336              		.cfi_offset 5, -24
 3337              		.cfi_offset 6, -20
 3338              		.cfi_offset 7, -16
 3339              		.cfi_offset 8, -12
 3340              		.cfi_offset 9, -8
 3341              		.cfi_offset 14, -4
 3342 0004 0446     		mov	r4, r0
 3343 0006 0D46     		mov	r5, r1
1690:RTT/SEGGER_RTT.c ****   int                   Status;
 3344              		.loc 1 1690 3 is_stmt 1 view .LVU924
1691:RTT/SEGGER_RTT.c ****   unsigned              FragLen;
 3345              		.loc 1 1691 3 view .LVU925
1692:RTT/SEGGER_RTT.c ****   unsigned              Avail;
 3346              		.loc 1 1692 3 view .LVU926
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 94


1693:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 3347              		.loc 1 1693 3 view .LVU927
1694:RTT/SEGGER_RTT.c ****   //
1695:RTT/SEGGER_RTT.c ****   INIT();
 3348              		.loc 1 1695 3 view .LVU928
 3349              		.loc 1 1695 3 view .LVU929
 3350 0008 354B     		ldr	r3, .L240
 3351 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3352 000c 03B3     		cbz	r3, .L236
 3353              	.LVL317:
 3354              	.L226:
 3355              		.loc 1 1695 3 discriminator 3 view .LVU930
1696:RTT/SEGGER_RTT.c ****   //
1697:RTT/SEGGER_RTT.c ****   // Validate terminal ID.
1698:RTT/SEGGER_RTT.c ****   //
1699:RTT/SEGGER_RTT.c ****   if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
 3356              		.loc 1 1699 3 discriminator 3 view .LVU931
 3357              		.loc 1 1699 6 is_stmt 0 discriminator 3 view .LVU932
 3358 000e 0F2C     		cmp	r4, #15
 3359 0010 63D8     		bhi	.L231
1700:RTT/SEGGER_RTT.c ****     //
1701:RTT/SEGGER_RTT.c ****     // Get "to-host" ring buffer.
1702:RTT/SEGGER_RTT.c ****     //
1703:RTT/SEGGER_RTT.c ****     pRing = &_SEGGER_RTT.aUp[0];
 3360              		.loc 1 1703 5 is_stmt 1 view .LVU933
 3361              	.LVL318:
1704:RTT/SEGGER_RTT.c ****     //
1705:RTT/SEGGER_RTT.c ****     // Need to be able to change terminal, write data, change back.
1706:RTT/SEGGER_RTT.c ****     // Compute the fixed and variable sizes.
1707:RTT/SEGGER_RTT.c ****     //
1708:RTT/SEGGER_RTT.c ****     FragLen = STRLEN(s);
 3362              		.loc 1 1708 5 view .LVU934
 3363              		.loc 1 1708 15 is_stmt 0 view .LVU935
 3364 0012 2846     		mov	r0, r5
 3365 0014 FFF7FEFF 		bl	strlen
 3366              	.LVL319:
 3367 0018 8046     		mov	r8, r0
 3368              	.LVL320:
 3369              	.LBB22:
1709:RTT/SEGGER_RTT.c ****     //
1710:RTT/SEGGER_RTT.c ****     // How we output depends upon the mode...
1711:RTT/SEGGER_RTT.c ****     //
1712:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3370              		.loc 1 1712 5 is_stmt 1 view .LVU936
 3371              		.loc 1 1712 5 view .LVU937
 3372              		.syntax unified
 3373              	@ 1712 "RTT/SEGGER_RTT.c" 1
 3374 001a EFF31186 		mrs   r6, basepri  
 3375 001e 4FF02001 		mov   r1, #32       
 3376 0022 81F31188 		msr   basepri, r1  
 3377              		
 3378              	@ 0 "" 2
 3379              	.LVL321:
 3380              		.loc 1 1712 22 view .LVU938
1713:RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 3381              		.loc 1 1713 5 view .LVU939
 3382              		.loc 1 1713 13 is_stmt 0 view .LVU940
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 95


 3383              		.thumb
 3384              		.syntax unified
 3385 0026 2E4F     		ldr	r7, .L240
 3386 0028 07F11800 		add	r0, r7, #24
 3387              	.LVL322:
 3388              		.loc 1 1713 13 view .LVU941
 3389 002c FFF7FEFF 		bl	_GetAvailWriteSpace
 3390              	.LVL323:
 3391 0030 8146     		mov	r9, r0
 3392              	.LVL324:
1714:RTT/SEGGER_RTT.c ****     switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
 3393              		.loc 1 1714 5 is_stmt 1 view .LVU942
 3394              		.loc 1 1714 18 is_stmt 0 view .LVU943
 3395 0032 FB6A     		ldr	r3, [r7, #44]
 3396              		.loc 1 1714 26 view .LVU944
 3397 0034 03F00303 		and	r3, r3, #3
 3398              		.loc 1 1714 5 view .LVU945
 3399 0038 012B     		cmp	r3, #1
 3400 003a 23D0     		beq	.L228
 3401 003c 022B     		cmp	r3, #2
 3402 003e 3BD0     		beq	.L229
 3403 0040 4BB1     		cbz	r3, .L237
 3404 0042 4FF0FF34 		mov	r4, #-1
 3405              	.LVL325:
 3406              	.L230:
1715:RTT/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1716:RTT/SEGGER_RTT.c ****       //
1717:RTT/SEGGER_RTT.c ****       // If we are in skip mode and there is no space for the whole
1718:RTT/SEGGER_RTT.c ****       // of this output, don't bother switching terminals at all.
1719:RTT/SEGGER_RTT.c ****       //
1720:RTT/SEGGER_RTT.c ****       if (Avail < (FragLen + 4u)) {
1721:RTT/SEGGER_RTT.c ****         Status = 0;
1722:RTT/SEGGER_RTT.c ****       } else {
1723:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
1724:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
1725:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
1726:RTT/SEGGER_RTT.c ****       }
1727:RTT/SEGGER_RTT.c ****       break;
1728:RTT/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1729:RTT/SEGGER_RTT.c ****       //
1730:RTT/SEGGER_RTT.c ****       // If we are in trim mode and there is not enough space for everything,
1731:RTT/SEGGER_RTT.c ****       // trim the output but always include the terminal switch.  If no room
1732:RTT/SEGGER_RTT.c ****       // for terminal switch, skip that totally.
1733:RTT/SEGGER_RTT.c ****       //
1734:RTT/SEGGER_RTT.c ****       if (Avail < 4u) {
1735:RTT/SEGGER_RTT.c ****         Status = -1;
1736:RTT/SEGGER_RTT.c ****       } else {
1737:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
1738:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
1739:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
1740:RTT/SEGGER_RTT.c ****       }
1741:RTT/SEGGER_RTT.c ****       break;
1742:RTT/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1743:RTT/SEGGER_RTT.c ****       //
1744:RTT/SEGGER_RTT.c ****       // If we are in blocking mode, output everything.
1745:RTT/SEGGER_RTT.c ****       //
1746:RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, TerminalId);
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 96


1747:RTT/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
1748:RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
1749:RTT/SEGGER_RTT.c ****       break;
1750:RTT/SEGGER_RTT.c ****     default:
1751:RTT/SEGGER_RTT.c ****       Status = -1;
1752:RTT/SEGGER_RTT.c ****       break;
1753:RTT/SEGGER_RTT.c ****     }
1754:RTT/SEGGER_RTT.c ****     //
1755:RTT/SEGGER_RTT.c ****     // Finish up.
1756:RTT/SEGGER_RTT.c ****     //
1757:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3407              		.loc 1 1757 5 is_stmt 1 view .LVU946
 3408              		.syntax unified
 3409              	@ 1757 "RTT/SEGGER_RTT.c" 1
 3410 0046 86F31188 		msr   basepri, r6  
 3411              		
 3412              	@ 0 "" 2
 3413              		.thumb
 3414              		.syntax unified
 3415              	.LBE22:
 3416              		.loc 1 1757 24 view .LVU947
 3417              	.LVL326:
 3418              	.L225:
1758:RTT/SEGGER_RTT.c ****   } else {
1759:RTT/SEGGER_RTT.c ****     Status = -1;
1760:RTT/SEGGER_RTT.c ****   }
1761:RTT/SEGGER_RTT.c ****   return Status;
1762:RTT/SEGGER_RTT.c **** }
 3419              		.loc 1 1762 1 is_stmt 0 view .LVU948
 3420 004a 2046     		mov	r0, r4
 3421 004c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3422              	.LVL327:
 3423              	.L236:
1695:RTT/SEGGER_RTT.c ****   //
 3424              		.loc 1 1695 3 is_stmt 1 discriminator 1 view .LVU949
 3425 0050 FFF7FEFF 		bl	_DoInit
 3426              	.LVL328:
1695:RTT/SEGGER_RTT.c ****   //
 3427              		.loc 1 1695 3 is_stmt 0 discriminator 1 view .LVU950
 3428 0054 DBE7     		b	.L226
 3429              	.LVL329:
 3430              	.L237:
 3431              	.LBB23:
1720:RTT/SEGGER_RTT.c ****         Status = 0;
 3432              		.loc 1 1720 7 is_stmt 1 view .LVU951
1720:RTT/SEGGER_RTT.c ****         Status = 0;
 3433              		.loc 1 1720 28 is_stmt 0 view .LVU952
 3434 0056 08F10403 		add	r3, r8, #4
1720:RTT/SEGGER_RTT.c ****         Status = 0;
 3435              		.loc 1 1720 10 view .LVU953
 3436 005a 8342     		cmp	r3, r0
 3437 005c 01D9     		bls	.L238
1721:RTT/SEGGER_RTT.c ****       } else {
 3438              		.loc 1 1721 16 view .LVU954
 3439 005e 0024     		movs	r4, #0
 3440 0060 F1E7     		b	.L230
 3441              	.L238:
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 97


1723:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 3442              		.loc 1 1723 9 is_stmt 1 view .LVU955
 3443 0062 1837     		adds	r7, r7, #24
 3444 0064 2146     		mov	r1, r4
 3445 0066 3846     		mov	r0, r7
 3446              	.LVL330:
1723:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 3447              		.loc 1 1723 9 is_stmt 0 view .LVU956
 3448 0068 FFF7FEFF 		bl	_PostTerminalSwitch
 3449              	.LVL331:
1724:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3450              		.loc 1 1724 9 is_stmt 1 view .LVU957
1724:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3451              		.loc 1 1724 23 is_stmt 0 view .LVU958
 3452 006c 4246     		mov	r2, r8
 3453 006e 2946     		mov	r1, r5
 3454 0070 3846     		mov	r0, r7
 3455 0072 FFF7FEFF 		bl	_WriteBlocking
 3456              	.LVL332:
 3457 0076 0446     		mov	r4, r0
 3458              	.LVL333:
1725:RTT/SEGGER_RTT.c ****       }
 3459              		.loc 1 1725 9 is_stmt 1 view .LVU959
 3460 0078 1A4B     		ldr	r3, .L240+4
 3461 007a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3462 007c 3846     		mov	r0, r7
 3463              	.LVL334:
1725:RTT/SEGGER_RTT.c ****       }
 3464              		.loc 1 1725 9 is_stmt 0 view .LVU960
 3465 007e FFF7FEFF 		bl	_PostTerminalSwitch
 3466              	.LVL335:
 3467 0082 E0E7     		b	.L230
 3468              	.LVL336:
 3469              	.L228:
1734:RTT/SEGGER_RTT.c ****         Status = -1;
 3470              		.loc 1 1734 7 is_stmt 1 view .LVU961
1734:RTT/SEGGER_RTT.c ****         Status = -1;
 3471              		.loc 1 1734 10 is_stmt 0 view .LVU962
 3472 0084 0328     		cmp	r0, #3
 3473 0086 02D8     		bhi	.L239
1735:RTT/SEGGER_RTT.c ****       } else {
 3474              		.loc 1 1735 16 view .LVU963
 3475 0088 4FF0FF34 		mov	r4, #-1
 3476 008c DBE7     		b	.L230
 3477              	.L239:
1737:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 3478              		.loc 1 1737 9 is_stmt 1 view .LVU964
 3479 008e 164F     		ldr	r7, .L240+8
 3480 0090 2146     		mov	r1, r4
 3481 0092 3846     		mov	r0, r7
 3482              	.LVL337:
1737:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 3483              		.loc 1 1737 9 is_stmt 0 view .LVU965
 3484 0094 FFF7FEFF 		bl	_PostTerminalSwitch
 3485              	.LVL338:
1738:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3486              		.loc 1 1738 9 is_stmt 1 view .LVU966
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 98


1738:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3487              		.loc 1 1738 66 is_stmt 0 view .LVU967
 3488 0098 A9F10402 		sub	r2, r9, #4
1738:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3489              		.loc 1 1738 23 view .LVU968
 3490 009c 4245     		cmp	r2, r8
 3491 009e 28BF     		it	cs
 3492 00a0 4246     		movcs	r2, r8
 3493 00a2 2946     		mov	r1, r5
 3494 00a4 3846     		mov	r0, r7
 3495 00a6 FFF7FEFF 		bl	_WriteBlocking
 3496              	.LVL339:
 3497 00aa 0446     		mov	r4, r0
 3498              	.LVL340:
1739:RTT/SEGGER_RTT.c ****       }
 3499              		.loc 1 1739 9 is_stmt 1 view .LVU969
 3500 00ac 0D4B     		ldr	r3, .L240+4
 3501 00ae 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3502 00b0 3846     		mov	r0, r7
 3503              	.LVL341:
1739:RTT/SEGGER_RTT.c ****       }
 3504              		.loc 1 1739 9 is_stmt 0 view .LVU970
 3505 00b2 FFF7FEFF 		bl	_PostTerminalSwitch
 3506              	.LVL342:
 3507 00b6 C6E7     		b	.L230
 3508              	.LVL343:
 3509              	.L229:
1746:RTT/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 3510              		.loc 1 1746 7 is_stmt 1 view .LVU971
 3511 00b8 0B4F     		ldr	r7, .L240+8
 3512 00ba 2146     		mov	r1, r4
 3513 00bc 3846     		mov	r0, r7
 3514              	.LVL344:
1746:RTT/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 3515              		.loc 1 1746 7 is_stmt 0 view .LVU972
 3516 00be FFF7FEFF 		bl	_PostTerminalSwitch
 3517              	.LVL345:
1747:RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 3518              		.loc 1 1747 7 is_stmt 1 view .LVU973
1747:RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 3519              		.loc 1 1747 21 is_stmt 0 view .LVU974
 3520 00c2 4246     		mov	r2, r8
 3521 00c4 2946     		mov	r1, r5
 3522 00c6 3846     		mov	r0, r7
 3523 00c8 FFF7FEFF 		bl	_WriteBlocking
 3524              	.LVL346:
 3525 00cc 0446     		mov	r4, r0
 3526              	.LVL347:
1748:RTT/SEGGER_RTT.c ****       break;
 3527              		.loc 1 1748 7 is_stmt 1 view .LVU975
 3528 00ce 054B     		ldr	r3, .L240+4
 3529 00d0 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3530 00d2 3846     		mov	r0, r7
 3531              	.LVL348:
1748:RTT/SEGGER_RTT.c ****       break;
 3532              		.loc 1 1748 7 is_stmt 0 view .LVU976
 3533 00d4 FFF7FEFF 		bl	_PostTerminalSwitch
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 99


 3534              	.LVL349:
1749:RTT/SEGGER_RTT.c ****     default:
 3535              		.loc 1 1749 7 is_stmt 1 view .LVU977
 3536 00d8 B5E7     		b	.L230
 3537              	.LVL350:
 3538              	.L231:
1749:RTT/SEGGER_RTT.c ****     default:
 3539              		.loc 1 1749 7 is_stmt 0 view .LVU978
 3540              	.LBE23:
1759:RTT/SEGGER_RTT.c ****   }
 3541              		.loc 1 1759 12 view .LVU979
 3542 00da 4FF0FF34 		mov	r4, #-1
 3543              	.LVL351:
1761:RTT/SEGGER_RTT.c **** }
 3544              		.loc 1 1761 3 is_stmt 1 view .LVU980
1761:RTT/SEGGER_RTT.c **** }
 3545              		.loc 1 1761 10 is_stmt 0 view .LVU981
 3546 00de B4E7     		b	.L225
 3547              	.L241:
 3548              		.align	2
 3549              	.L240:
 3550 00e0 00000000 		.word	.LANCHOR1
 3551 00e4 00000000 		.word	.LANCHOR4
 3552 00e8 18000000 		.word	.LANCHOR1+24
 3553              		.cfi_endproc
 3554              	.LFE30:
 3556              		.global	_SEGGER_RTT
 3557              		.section	.bss._ActiveTerminal,"aw",%nobits
 3558              		.set	.LANCHOR4,. + 0
 3561              	_ActiveTerminal:
 3562 0000 00       		.space	1
 3563              		.section	.bss._SEGGER_RTT,"aw",%nobits
 3564              		.align	2
 3565              		.set	.LANCHOR1,. + 0
 3568              	_SEGGER_RTT:
 3569 0000 00000000 		.space	168
 3569      00000000 
 3569      00000000 
 3569      00000000 
 3569      00000000 
 3570              		.section	.bss._acDownBuffer,"aw",%nobits
 3571              		.align	2
 3572              		.set	.LANCHOR3,. + 0
 3575              	_acDownBuffer:
 3576 0000 00000000 		.space	16
 3576      00000000 
 3576      00000000 
 3576      00000000 
 3577              		.section	.bss._acUpBuffer,"aw",%nobits
 3578              		.align	2
 3579              		.set	.LANCHOR2,. + 0
 3582              	_acUpBuffer:
 3583 0000 00000000 		.space	1024
 3583      00000000 
 3583      00000000 
 3583      00000000 
 3583      00000000 
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 100


 3584              		.section	.rodata._aTerminalId,"a"
 3585              		.align	2
 3586              		.set	.LANCHOR0,. + 0
 3589              	_aTerminalId:
 3590 0000 30313233 		.ascii	"0123456789ABCDEF"
 3590      34353637 
 3590      38394142 
 3590      43444546 
 3591              		.text
 3592              	.Letext0:
 3593              		.file 2 "RTT/SEGGER_RTT.h"
 3594              		.file 3 "d:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.07\\arm-none-eabi\\include\\
 3595              		.file 4 "<built-in>"
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 101


DEFINED SYMBOLS
                            *ABS*:00000000 SEGGER_RTT.c
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:18     .text._GetAvailWriteSpace:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:25     .text._GetAvailWriteSpace:00000000 _GetAvailWriteSpace
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:79     .text._WriteNoCheck:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:85     .text._WriteNoCheck:00000000 _WriteNoCheck
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:175    .text._WriteBlocking:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:181    .text._WriteBlocking:00000000 _WriteBlocking
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:320    .text._PostTerminalSwitch:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:326    .text._PostTerminalSwitch:00000000 _PostTerminalSwitch
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:368    .text._PostTerminalSwitch:00000020 $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:373    .rodata._DoInit.str1.4:00000000 $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:383    .text._DoInit:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:389    .text._DoInit:00000000 _DoInit
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:469    .text._DoInit:0000004c $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:479    .text.SEGGER_RTT_ReadNoLock:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:486    .text.SEGGER_RTT_ReadNoLock:00000000 SEGGER_RTT_ReadNoLock
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:656    .text.SEGGER_RTT_ReadNoLock:0000009c $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:661    .text.SEGGER_RTT_Read:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:668    .text.SEGGER_RTT_Read:00000000 SEGGER_RTT_Read
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:720    .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:727    .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000000 SEGGER_RTT_WriteWithOverwriteNoLock
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:951    .text.SEGGER_RTT_WriteWithOverwriteNoLock:0000010c $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:956    .text.SEGGER_RTT_WriteSkipNoLock:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:963    .text.SEGGER_RTT_WriteSkipNoLock:00000000 SEGGER_RTT_WriteSkipNoLock
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:1217   .text.SEGGER_RTT_WriteSkipNoLock:00000120 $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:1222   .text.SEGGER_RTT_WriteNoLock:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:1229   .text.SEGGER_RTT_WriteNoLock:00000000 SEGGER_RTT_WriteNoLock
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:1344   .text.SEGGER_RTT_WriteNoLock:00000068 $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:1349   .text.SEGGER_RTT_Write:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:1356   .text.SEGGER_RTT_Write:00000000 SEGGER_RTT_Write
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:1429   .text.SEGGER_RTT_Write:00000030 $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:1434   .text.SEGGER_RTT_WriteString:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:1441   .text.SEGGER_RTT_WriteString:00000000 SEGGER_RTT_WriteString
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:1484   .text.SEGGER_RTT_PutCharSkipNoLock:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:1491   .text.SEGGER_RTT_PutCharSkipNoLock:00000000 SEGGER_RTT_PutCharSkipNoLock
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:1585   .text.SEGGER_RTT_PutCharSkipNoLock:0000004c $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:1590   .text.SEGGER_RTT_PutCharSkip:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:1597   .text.SEGGER_RTT_PutCharSkip:00000000 SEGGER_RTT_PutCharSkip
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:1723   .text.SEGGER_RTT_PutCharSkip:0000006c $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:1729   .text.SEGGER_RTT_PutChar:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:1736   .text.SEGGER_RTT_PutChar:00000000 SEGGER_RTT_PutChar
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:1886   .text.SEGGER_RTT_PutChar:0000008c $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:1892   .text.SEGGER_RTT_GetKey:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:1899   .text.SEGGER_RTT_GetKey:00000000 SEGGER_RTT_GetKey
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:1951   .text.SEGGER_RTT_WaitKey:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:1958   .text.SEGGER_RTT_WaitKey:00000000 SEGGER_RTT_WaitKey
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:1988   .text.SEGGER_RTT_HasKey:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:1995   .text.SEGGER_RTT_HasKey:00000000 SEGGER_RTT_HasKey
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2048   .text.SEGGER_RTT_HasKey:00000020 $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2053   .text.SEGGER_RTT_HasData:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2060   .text.SEGGER_RTT_HasData:00000000 SEGGER_RTT_HasData
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2091   .text.SEGGER_RTT_HasData:0000001c $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2096   .text.SEGGER_RTT_HasDataUp:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2103   .text.SEGGER_RTT_HasDataUp:00000000 SEGGER_RTT_HasDataUp
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2134   .text.SEGGER_RTT_HasDataUp:0000001c $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2139   .text.SEGGER_RTT_AllocDownBuffer:00000000 $t
ARM GAS  C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s 			page 102


C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2146   .text.SEGGER_RTT_AllocDownBuffer:00000000 SEGGER_RTT_AllocDownBuffer
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2279   .text.SEGGER_RTT_AllocDownBuffer:00000070 $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2285   .text.SEGGER_RTT_AllocUpBuffer:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2292   .text.SEGGER_RTT_AllocUpBuffer:00000000 SEGGER_RTT_AllocUpBuffer
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2430   .text.SEGGER_RTT_AllocUpBuffer:0000007c $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2436   .text.SEGGER_RTT_ConfigUpBuffer:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2443   .text.SEGGER_RTT_ConfigUpBuffer:00000000 SEGGER_RTT_ConfigUpBuffer
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2566   .text.SEGGER_RTT_ConfigUpBuffer:00000070 $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2571   .text.SEGGER_RTT_ConfigDownBuffer:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2578   .text.SEGGER_RTT_ConfigDownBuffer:00000000 SEGGER_RTT_ConfigDownBuffer
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2698   .text.SEGGER_RTT_ConfigDownBuffer:00000064 $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2703   .text.SEGGER_RTT_SetNameUpBuffer:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2710   .text.SEGGER_RTT_SetNameUpBuffer:00000000 SEGGER_RTT_SetNameUpBuffer
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2802   .text.SEGGER_RTT_SetNameUpBuffer:00000040 $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2807   .text.SEGGER_RTT_SetNameDownBuffer:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2814   .text.SEGGER_RTT_SetNameDownBuffer:00000000 SEGGER_RTT_SetNameDownBuffer
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2904   .text.SEGGER_RTT_SetNameDownBuffer:00000040 $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2909   .text.SEGGER_RTT_SetFlagsUpBuffer:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:2916   .text.SEGGER_RTT_SetFlagsUpBuffer:00000000 SEGGER_RTT_SetFlagsUpBuffer
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:3006   .text.SEGGER_RTT_SetFlagsUpBuffer:00000040 $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:3011   .text.SEGGER_RTT_SetFlagsDownBuffer:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:3018   .text.SEGGER_RTT_SetFlagsDownBuffer:00000000 SEGGER_RTT_SetFlagsDownBuffer
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:3108   .text.SEGGER_RTT_SetFlagsDownBuffer:00000040 $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:3113   .text.SEGGER_RTT_Init:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:3120   .text.SEGGER_RTT_Init:00000000 SEGGER_RTT_Init
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:3140   .text.SEGGER_RTT_SetTerminal:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:3147   .text.SEGGER_RTT_SetTerminal:00000000 SEGGER_RTT_SetTerminal
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:3308   .text.SEGGER_RTT_SetTerminal:0000007c $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:3316   .text.SEGGER_RTT_TerminalOut:00000000 $t
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:3323   .text.SEGGER_RTT_TerminalOut:00000000 SEGGER_RTT_TerminalOut
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:3550   .text.SEGGER_RTT_TerminalOut:000000e0 $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:3568   .bss._SEGGER_RTT:00000000 _SEGGER_RTT
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:3561   .bss._ActiveTerminal:00000000 _ActiveTerminal
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:3562   .bss._ActiveTerminal:00000000 $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:3564   .bss._SEGGER_RTT:00000000 $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:3571   .bss._acDownBuffer:00000000 $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:3575   .bss._acDownBuffer:00000000 _acDownBuffer
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:3578   .bss._acUpBuffer:00000000 $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:3582   .bss._acUpBuffer:00000000 _acUpBuffer
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:3585   .rodata._aTerminalId:00000000 $d
C:\Users\alronman\AppData\Local\Temp\ccpk5MNa.s:3589   .rodata._aTerminalId:00000000 _aTerminalId

UNDEFINED SYMBOLS
memcpy
strlen
